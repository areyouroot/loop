prerequest - html,css,basic webdev,js,react,solidity,truffle,blockchain and etherium,oops,metamask,basic shell commands,powershell etc ......

const { config, config, config, config, config } = require("npm")

download and install node js

install ganache

npm install truffle

install chromium based browser with metamask extention

install npm truffle globally

#npm i truffle -g //to install globally

now use init cmd 

#truffle init

if u want to init with migrations use this (recomended)

#truffle init --with-migrations

inside the contracts file create a sol file that will be ur main contract 

check the solidiy version u are using 

u can also use the cmd to automate

#truffle create contract "contract name"

eg:#truffle create contract demo

sample code:

pragma solidity 0.8.6;

contract demo{
    uint number;
    function set(uint _number) public{
        number=_number;
    }
    function get() public view returns(uint){
        return number;
    }
}

then change ur truffle-config.js

before changing:

  compilers: {
    solc: {
      version: "0.8.18",      // Fetch exact version from solc-bin (default: truffle's version)
      // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)
      // settings: {          // See the solidity docs for advice about optimization and evmVersion
      //  optimizer: {
      //    enabled: false,
      //    runs: 200
      //  },
      //  evmVersion: "byzantium"
      // }
    }
  },

after changing:

  compilers: {
    solc: {
      version: "0.8.6",      // Fetch exact version from solc-bin (default: truffle's version)
      // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)
      // settings: {          // See the solidity docs for advice about optimization and evmVersion
      //  optimizer: {
      //    enabled: false,
      //    runs: 200
      //  },
      //  evmVersion: "byzantium"
      // }
    }
  },

give the version as given in ur contract

then u can compile the code with cmd

#truffle compile 

by running this command a build file will be created

after this u need to create a migration file in older versions the initial migrations does exit but in new version it doesnt so 

create a migration file in migrations folder and name it as same as the contract name which u created 

u can also use #truffle create migration "contract name"

this will only create the structure

code:

var the-contract-name = artifacts.require("the-contract-name");

module.exports = function (deployer) {
    deployer.deploy(the-contract-name);
};

eg code://here the contract name is demo

var demo = artifacts.require("demo");

module.exports = function (deployer) {
    deployer.deploy(demo);
};

after this before deploying it uncomment the developement in network part in truffle-config.js

networks: {

    development: {
     host: "127.0.0.1",     // Localhost (default: none)
     port: 8545,            // Standard Ethereum port (default: none)
     network_id: "*",       // Any network (default: none)
    },
}

and lanch the ganache gui and according to that change the above Credentials

try to use ganache gui because the gui is easy to track than the cli version

now u can migrate by cmd

#truffle migrate

if u are going to migrate then compilation is optional because it compile on its own

note :dont forget to add ur license in the contract file on the top of the code using comment 

//SPDX-License-Identifier: UNLICENSED - like this 

the migration eg message

$ truffle migrate

//make sure that ganache is on

Compiling your contracts...
===========================
> Compiling .\contracts\demo.sol
> Compiling .\contracts\demo.sol
> Artifacts written to C:\Users\abdul\Desktop\git works\clg project\block-play\DFS\build\contracts
> Compiled successfully using:
   - solc: 0.8.6+commit.11564f7e.Emscripten.clang


Starting migrations...
======================
> Network name:    'development'
> Network id:      5777
> Block gas limit: 6721975 (0x6691b7)


1677493515_demo.js
==================

   Deploying 'demo'
   ----------------
   > transaction hash:    0xd480c41ca45b68fa56dd340cbedb5db60a347cd827f066d153d776f406024d0f
   > Blocks: 0            Seconds: 0
   > contract address:    0x8BC5c25EEB0465B9899d58446d2aa54543C40CB6
   > block number:        1
   > block timestamp:     1677493999
   > account:             0x3D402e0e172F67adfF677A47795675680AD763b7
   > balance:             99.99748646
   > gas used:            125677 (0x1eaed)
   > gas price:           20 gwei
   > value sent:          0 ETH
   > total cost:          0.00251354 ETH

   > Saving artifacts
   -------------------------------------
   > Total cost:          0.00251354 ETH

Summary
=======
> Total deployments:   1
> Final cost:          0.00251354 ETH

------------------------------------------------------------------------------------------
even u can see the change in ganache in currency and logs

once u have migrated then any changes u make in the contract file will not be detected until you reset the migrate

#truffle migrate --reset

this will re compile the whole contrat and migrate it again

u need to wait in mainnet of Ethereum it is not as fast as ganache 

----------------------------------------infura--------------------------------------------

we will see about infura this acts like a layer making it easy to host our smart contract and deploy it 

first create a account then login

//do read the terms and conditions

select the network that needs to be deployed 

1)web3 for blockchain like eth

2)ipfs - storage decentralized its a protocol

3)file coin - web 3 based ipfs service network

after creating the project in the infura copy the required values in the truffle-config.js

u can google different networks is that a developement network or main net 

eg code :

    // goerli: {
    //   provider: () => new HDWalletProvider(MNEMONIC, `https://goerli.infura.io/v3/${PROJECT_ID}`),
    //   network_id: 5,       // Goerli's id
    //   confirmations: 2,    // # of confirmations to wait between deployments. (default: 0)
    //   timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)
    //   skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    // },

go to the ropsten fauset - do google for fauset at the time while i was developing it was under maintance so i was not able to acess it 

copy the wallet address of metamask befor that do connet ure wallet to that network and the config the truffle-config.js

in truffle-config.js the code will be commented like this and google how to connect it using config u will get a code copy and paste it in the truffle-config.js file 

to connet the wallet uncomment this line in truffle-config.js

// const HDWalletProvider = require('@truffle/hdwallet-provider');

to know more about the configuration read this document  https://trufflesuite.com/docs/truffle/reference/configuration

u need to provide the mnemonic its like the secret key for humans becareful with the mnemonic because this can help the bad guys to get ur wallet and this might cause the loss of ether - real ether

create a variable called mnemonic like this 

best way to hide it is to create a secret file in some secret loctaion if u are using github the be more carful do not push the secret file 

const mnemonic = read a file do google search js script to read a file and read the file (or) u can directly paste the mnemonic phrase

------------------------------------------others------------------------------------------
all of the tutorial and intergration with new technologies are avalable Headers

trufflesuite.com/boxes/

------------------------------------------react-------------------------------------------
now its time to react

for frontend u can create a seperate folder 

go in to that folder then run this command 

#truffle unbox react

note u need to init truffle first 

go to the folder where u installed react  

u will find a truffle-config.js this is how the program will be deployed dont confuse it with original truffle config file

but dont for get to change the network details like port etc in both config

then find the contracts in the react app which u installed then migrate it if u want start developement then migrate

now start the client by changind directory to client then using npm run the start script

#npm start

add the ganache network in the metamask by seeing youtube

network name - anyname i prefer ganache

rpc url - HTTP://127.0.0.1:7546     //do check ur rpc server in ganache

chain id - 1337

currency symbol is - eth

then import any one accout by looking ganache's account private key

then connect it just clicking on metamask -> unconnected -> (select account) connect

then play with the existing smart contract to get to know more

hey if the deplyment shows error pls check the network credentials

note: - before u change and migration of the contract do turn off ur development server

to terminate or to stop the server press ctrl + c

await is used to execute the external statement and wait until it complete then do other tasks

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                again from scratch
__________________________________________________________________________________________

note : the above commands are only for windows

after installing all npm and node and truffle and react intall ipfs uploader

#npm install react-ipfs-uploader

#npm install web3

#npm i create-react-app
#npm install react-bootstrap
#npm install fs-extra
#npm install ipfs-api
#npm install web3

install metamask and ganache

#npx create react-create-app ./

delete all un nessary stuff

install go in ur os

note # == $ == > but some places u need root acess

$ npm i ipfs-http-client
$ npm install --save ipfs-http-client

>wget https://dist.ipfs.tech/kubo/v0.18.1/kubo_v0.18.1_windows-amd64.zip -Outfile kubo_v0.18.1.zip

>Expand-Archive -Path kubo_v0.18.1.zip -DestinationPath ~\Apps\kubo_v0.18.1

>cd ~\Apps\kubo_v0.18.1\kubo

>c:\Users\{ur username}\Apps\kubo_v0.18.1\kubo\ipfs.exe    

{ur username} - fill it with the current user of windows

>alias ipfs="/c/Users/abdul/Apps/kubo_v0.18.1/kubo/ipfs.exe" 

$ ipfs init

=========================================================================

#npm i ipfs-http-client

$ npm install ipfs

pls download the go-ipfs exe and use powershell it is best in windows if i mention git bash anywhere ignore it

first download the exe version if u are uing windows 

the ipfs is aka interplanitary file system this is a decentralized method to store data

there are 2 node in a network its a ipfs client and server

copy the ipfs to the c:/user/user/apps/kubo/ipfs

the create an alias or create a env variable

the cmd whe ipfs is typed the exe should run

go to the project location 

type 

#ipfs init

this will intiate local ipfs

then after this cmd it will generate a key copy and paste it to verify the installation is it sucessful?

eg:

PS C:\Users\abdul\Desktop\git works\clg project\block-play\DFS-v1.0 - test\dfs> ipfs init
generating ED25519 keypair...done
peer identity: 12D3KooWQcoMDHczPZw5DqR43XrGE1qddgJ
initializing IPFS node at C:\Users\abdul\.ipfs
to get started, enter:

        ipfs cat /ipfs/QmQPeNsJPyVWPFDVHbz4bG2X8D2GhfbSXc/readme

copy what ever is after ipfs cat and paste it in this command

#ipfs cat <content>

eg:

ipfs cat /ipfs/QmQPeNsJPyVWPFDVHbz4bG2X8D2GhfbSXc/readme



to disable the init go where the config file is located and delete it

or delete this folder C:\Users\abdul\.ipfs

copy the contents of that command 

try to upload any file by this command 

#ipfs add file-location

to access that file back do remember the hash it had generated when the file was uploaded

eg

$ ipfs add ./DFS-v1.0\ -\ test/dfs/hell.txt

added QmTtkGE5tKP8yWjHUi3LCTf3wJaVvvE7 hell.txt

350 B / 350 B [================================================================================================================================] 100.00% 

you can upload a folder using -r argument which means recursive

eg:

ipfs add -r ./babanaidu

------------------ipfs done ------------------------

to expose and connect to the rest of the ipfs network use deamon

run:

#ipfs daemon

it will print some thing like this 

Initializing daemon...
go-ipfs version: 0.10.0
Repo version: 11
System version: 386/windows
Golang version: go1.16.8
Swarm listening on /ip4/127.0.0.1/tcp/8542
Swarm listening on /ip4/127.0.0.1/udp/8542/quic
Swarm listening on /ip4/169.254.171.166/tcp/8542
Swarm listening on /ip4/169.254.171.166/udp/8542/quic
Swarm listening on /ip4/169.254.177.100/tcp/8542
Swarm listening on /ip4/169.254.177.100/udp/8542/quic
Swarm listening on /ip4/169.254.221.250/tcp/8542
Swarm listening on /ip4/169.254.221.250/udp/8542/quic     
Swarm listening on /ip4/169.254.39.73/tcp/8542
Swarm listening on /ip4/169.254.39.73/udp/8542/quic       
Swarm listening on /ip4/172.20.106.223/tcp/8542
Swarm listening on /ip4/172.20.106.223/udp/8542/quic      
Swarm listening on /ip4/192.168.0.102/tcp/8542
Swarm listening on /ip4/192.168.0.102/udp/8542/quic       
Swarm listening on /ip4/192.168.240.1/tcp/8542
Swarm listening on /ip4/192.168.240.1/udp/8542/quic       
Swarm listening on /ip6/::1/tcp/8542
Swarm listening on /ip6/::1/udp/8542/quic
Swarm listening on /p2p-circuit
Swarm announcing /ip4/127.0.0.1/tcp/8542
Swarm announcing /ip4/127.0.0.1/udp/8542/quic
Swarm announcing /ip4/192.168.0.102/tcp/8542
Swarm announcing /ip4/192.168.0.102/udp/8542/quic
Swarm announcing /ip4/49.205.80.252/udp/19597/quic        
Swarm announcing /ip6/::1/tcp/8542
Swarm announcing /ip6/::1/udp/8542/quic
API server listening on /ip4/127.0.0.1/tcp/5001
WebUI: http://127.0.0.1:5001/webui
Gateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080
Daemon is ready

the port number may differ

to see the files raw data use the url - 

https://gateway.ipfs.io/ipfs/<hash>

eg:

https://gateway.ipfs.io/ipfs/QmYp611n9hwPtVXCtsB7i4LpNbDL9NMtRAifWQWkxEC8vU

else copy the hash and using ipfs u can access the file like this 

makesure that ur prowser has ipfs extention installed -

ipfs://<hash>

eg:

ipfs://bafybeie7p2vbiybnujqxsq44f3kncyhdmc4/



if u modify and and reupload it will regenrate new hash 









last seen - full comp - https://www.youtube.com/watch?v=vEyxWt-pmjo&list=PLgPmWS2dQHW9F8fRXzrFBtcrwE-uS8Qa5&index=11

https://www.youtube.com/watch?v=62f757RVEvU - 3
last seen - 13 - https://www.youtube.com/watch?v=pTZVoqBUjvI

react
______

https://radixweb.com/blog/steps-to-build-react-project-with-create-react-app
https://www.youtube.com/watch?v=hQAHSlTtcmY