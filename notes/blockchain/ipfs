pls download the go-ipfs exe and use powershell it is best in windows if i mention git bash anywhere ignore it

first download the exe version if u are uing windows 

the ipfs is aka interplanitary file system this is a decentralized method to store data

there are 2 node in a network its a ipfs client and server

copy the ipfs to the c:/user/user/apps/kubo/ipfs

the create an alias or create a env variable

the cmd whe ipfs is typed the exe should run

go to the project location 

type 

#ipfs init

this will intiate local ipfs

then after this cmd it will generate a key copy and paste it to verify the installation is it sucessful?

eg:

PS C:\Users\abdul\Desktop\git works\clg project\block-play\DFS-v1.0 - test\dfs> ipfs init
generating ED25519 keypair...done
peer identity: 12D3KooWQcoMDHczPZw5DqR43XrGE1qddgJ
initializing IPFS node at C:\Users\abdul\.ipfs
to get started, enter:

        ipfs cat /ipfs/QmQPeNsJPyVWPFDVHbz4bG2X8D2GhfbSXc/readme

copy what ever is after ipfs cat and paste it in this command

#ipfs cat <content>

eg:

ipfs cat /ipfs/QmQPeNsJPyVWPFDVHbz4bG2X8D2GhfbSXc/readme



to disable the init go where the config file is located and delete it

or delete this folder C:\Users\abdul\.ipfs

copy the contents of that command 

try to upload any file by this command 

#ipfs add file-location

to access that file back do remember the hash it had generated when the file was uploaded

eg

$ ipfs add ./DFS-v1.0\ -\ test/dfs/hell.txt

added QmTtkGE5tKP8yWjHUi3LCTf3wJaVvvE7 hell.txt

350 B / 350 B [================================================================================================================================] 100.00% 

you can upload a folder using -r argument which means recursive

eg:

ipfs add -r ./babanaidu

to expose and connect to the rest of the ipfs network use deamon

run:

#ipfs daemon

it will print some thing like this 

Initializing daemon...
go-ipfs version: 0.10.0
Repo version: 11
System version: 386/windows
Golang version: go1.16.8
Swarm listening on /ip4/127.0.0.1/tcp/8542
Swarm listening on /ip4/127.0.0.1/udp/8542/quic
Swarm listening on /ip4/169.254.171.166/tcp/8542
Swarm listening on /ip4/169.254.171.166/udp/8542/quic
Swarm listening on /ip4/169.254.177.100/tcp/8542
Swarm listening on /ip4/169.254.177.100/udp/8542/quic
Swarm listening on /ip4/169.254.221.250/tcp/8542
Swarm listening on /ip4/169.254.221.250/udp/8542/quic     
Swarm listening on /ip4/169.254.39.73/tcp/8542
Swarm listening on /ip4/169.254.39.73/udp/8542/quic       
Swarm listening on /ip4/172.20.106.223/tcp/8542
Swarm listening on /ip4/172.20.106.223/udp/8542/quic      
Swarm listening on /ip4/192.168.0.102/tcp/8542
Swarm listening on /ip4/192.168.0.102/udp/8542/quic       
Swarm listening on /ip4/192.168.240.1/tcp/8542
Swarm listening on /ip4/192.168.240.1/udp/8542/quic       
Swarm listening on /ip6/::1/tcp/8542
Swarm listening on /ip6/::1/udp/8542/quic
Swarm listening on /p2p-circuit
Swarm announcing /ip4/127.0.0.1/tcp/8542
Swarm announcing /ip4/127.0.0.1/udp/8542/quic
Swarm announcing /ip4/192.168.0.102/tcp/8542
Swarm announcing /ip4/192.168.0.102/udp/8542/quic
Swarm announcing /ip4/49.205.80.252/udp/19597/quic        
Swarm announcing /ip6/::1/tcp/8542
Swarm announcing /ip6/::1/udp/8542/quic
API server listening on /ip4/127.0.0.1/tcp/5001
WebUI: http://127.0.0.1:5001/webui
Gateway (readonly) server listening on /ip4/127.0.0.1/tcp/8080
Daemon is ready

the port number may differ

to see the files raw data use the url - 

https://gateway.ipfs.io/ipfs/<hash>

eg:

https://gateway.ipfs.io/ipfs/QmYp611n9hwPtVXCtsB7i4LpNbDL9NMtRAifWQWkxEC8vU

else copy the hash and using ipfs u can access the file like this 

makesure that ur prowser has ipfs extention installed -

ipfs://<hash>

eg:

ipfs://bafybeie7p2vbiybnujqxsq44f3kncyhdmc4/



if u modify and and reupload it will regenrate new hash 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

to see all the ipfs configuration use command 

ipfs config show

if u wana get the ipfs uploaded file name using hash the use this command 

#ipfs cat <hash>

hosting a website in ipfs is so easy create a html flder have a index.html folder and all the files should be linked to it css bootstrap etc

add the folder

publish it to ipns

give that hash

see this video for dns resolution - https://www.youtube.com/watch?v=ZRAStnf4AMA&list=PLNblnG6W6-KImttnlK9zRdJ_iqyUMvHz7&index=3

--how to setup the ipfs gateway--
_________________________________

do init 



what if the api is not working then change the ipaddress to 0.0.0.0

#code C:\Users\abdul\.ipfs\config     //only if u had vscode

eg:

file content

{
  "API": {
    "HTTPHeaders": {}
  },
  "Addresses": {
    "API": "/ip4/0.0.0.0/tcp/5001",
    "Announce": [],
    "Gateway": "/ip4/127.0.0.1/tcp/8080",
    "NoAnnounce": [],
    "Swarm": [
      "/ip4/0.0.0.0/tcp/4001",
      "/ip6/::/tcp/4001",
      "/ip4/0.0.0.0/udp/4001/quic",
      "/ip6/::/udp/4001/quic"
    ]
  },
  "AutoNAT": {},
  "Bootstrap": [
    "/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN",
    "/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa",
    "/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb",
    "/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt",
    "/ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ",
    "/ip4/104.131.131.82/udp/4001/quic/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ"
  ],
  "DNS": {
    "Resolvers": {}
  },
  "Datastore": {
    "BloomFilterSize": 0,
    "GCPeriod": "1h",
    "HashOnRead": false,
    "Spec": {
      "mounts": [
        {
          "child": {
            "path": "blocks",
            "shardFunc": "/repo/flatfs/shard/v1/next-to-last/2",
            "sync": true,
            "type": "flatfs"
          },
          "mountpoint": "/blocks",
          "prefix": "flatfs.datastore",
          "type": "measure"
        },
        {
          "child": {
            "compression": "none",
            "path": "datastore",
            "type": "levelds"
          },
          "mountpoint": "/",
          "prefix": "leveldb.datastore",
          "type": "measure"
        }
      ],
      "type": "mount"
    },
    "StorageGCWatermark": 90,
    "StorageMax": "10GB"
  },
  "Discovery": {
    "MDNS": {
      "Enabled": true,
      "Interval": 10
    }
  },
  "Experimental": {
    "AcceleratedDHTClient": false,
    "FilestoreEnabled": false,
    "GraphsyncEnabled": false,
    "Libp2pStreamMounting": false,
    "P2pHttpProxy": false,
    "ShardingEnabled": false,
    "StrategicProviding": false,
    "UrlstoreEnabled": false
  },
  "Gateway": {
    "APICommands": [],
    "HTTPHeaders": {
      "Access-Control-Allow-Headers": [
        "X-Requested-With",
        "Range",
        "User-Agent"
      ],
      "Access-Control-Allow-Methods": [
        "GET"
      ],
      "Access-Control-Allow-Origin": [
        "*"
      ]
    },
    "NoDNSLink": false,
    "NoFetch": false,
    "PathPrefixes": [],
    "PublicGateways": null,
    "RootRedirect": "",
    "Writable": false
  },
  "Identity": {
    "PeerID": "12D3KooWQcoMDHczPqR43XrGE1qddgJ",
    "PrivKey": "CAESQNXojOTGG4Bv5f2+V07rDAlI1/WQZD3jFQ0z5LT1YKzlc="
  },
  "Internal": {},
  "Ipns": {
    "RecordLifetime": "",
    "RepublishPeriod": "",
    "ResolveCacheSize": 128
  },
  "Migration": {
    "DownloadSources": [],
    "Keep": ""
  },
  "Mounts": {
    "FuseAllowOther": false,
    "IPFS": "/ipfs",
    "IPNS": "/ipns"
  },
  "Peering": {
    "Peers": null
  },
  "Pinning": {
    "RemoteServices": {}
  },
  "Plugins": {
    "Plugins": null
  },
  "Provider": {
    "Strategy": ""
  },
  "Pubsub": {
    "DisableSigning": false,
    "Router": ""
  },
  "Reprovider": {
    "Interval": "12h",
    "Strategy": "all"
  },
  "Routing": {
    "Type": "dht"
  },
  "Swarm": {
    "AddrFilters": null,
    "ConnMgr": {
      "GracePeriod": "20s",
      "HighWater": 900,
      "LowWater": 600,
      "Type": "basic"
    },
    "DisableBandwidthMetrics": false,
    "DisableNatPortMap": false,
    "EnableAutoRelay": false,
    "EnableRelayHop": false,
    "Transports": {
      "Multiplexers": {},
      "Network": {},
      "Security": {}
    }
  }
}


for ipfs with react and js see this :
 https://github.com/ipfs-inactive/js-ipfs-http-client




see this vid - https://www.youtube.com/watch?v=C6WfDTqXGR8&list=PLNblnG6W6-KImttnlK9zRdJ_iqyUMvHz7&index=4




to shutdown the daemon-
__________________________


#ipfs shutdown

completely shutdowns everything

