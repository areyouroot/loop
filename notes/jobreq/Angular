what is angular ?

    this is a frame wortk that is used to create single page application this is also used to create the apps 

Type Script -

    What is Type Script ?

        TypeScript is a free and open - source high - level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript.It is designed for the development of large applications and transpiles to JavaScript.

    the Type script is also a Super set of js means js + more functions

features of type script -

    - static checker - this is used to debug the code while typing
        - every code is converted in to js then compiled

Steps to install the angular -

    first install the node 
    then install and update the npm
    then install angular cli using this command 
        npm install - g @angular/cli
    then create a directory for the new app
    cmd is 
        ng new "application name without quotes use _ or - no avoid space and do avoid the word 'test' "
    depending on the angular version you are using you will be asked some default questions
    like do u like to add angular routing(y / n)
    or the css versions 

    press enter for the both questions to select the default

    angular uses the type script
    then use cd cmd to go inside the angular folder
    then run the develpement server
        ng serve
    the server is running in local host 4200

this is almost similar to the react but some new keywords and different internal working

CLI Deep Dive & Troubleshooting
In the next lecture, we're going to build our first little app!

If the CLI prompts you to answer some questions(some versions do that), you can simply hit ENTER for all questions.This will accept the default settings which are fine for this course.

The CLI generates a different welcome screen than you're going to see in my video though. No worries, you'll still be able to follow along without issues! Just make sure to code along so that your code equals mine - Angular itself didn't change a bit :)

-----

    If you want to dive deeper into the CLI and learn more about its usage, have a look at its official documentation: https://github.com/angular/angular-cli/wiki

You encountered issues during the installation of the CLI or setup of a new Angular project ?

    A lot of problems are solved by making sure you're using the latest version of NodeJS, npm and the CLI itself.

Updating NodeJS:

Go to nodejs.org and download the latest version - uninstall(all) installed versions on your machine first.

Updating npm:

Run[sudo] npm install - g npm(sudo  is only required on Mac / Linux)

Updating the CLI

[sudo] npm uninstall - g angular - cli @angular/cli 

npm cache verify

[sudo] npm install - g @angular/cli 

Here are some common issues & solutions:

Creation of a new project takes forever(longer than 3 minutes)
That happens on Windows from time to time => Try running the command line as administrator

You get an EADDR error(Address already in use)
You might already have another ng serve process running - make sure to quit that or use ng serve--port ANOTHERPORT  to serve your project on a new port

My changes are not reflected in the browser(App is not compiling)
Check if the window running ng serve  displays an error.If that's not the case, make sure you're using the latest CLI version and try restarting your CLI
    

angular strict mode

this is a mode used while creating the app the strict mode
    Angular CLI creates all new workspaces and projects with strict mode enabled.Strict mode improves maintainability and helps you catch bugs ahead of time.

    TO CREATE A APP IN THE STRICT MODE 
        ng new "app name without quotes" --strict  

    more on strict mode - https://angular.io/guide/strict-mode

if u dont want the strict mode then specify as --no - strict
        ng new "app name without quotes" --no - strict  

same like react the angular also displays an empty page on the error occurance

to use a particular module in the angular u need to download it using npm command then import it in the app.module.ts to use it in the main script or the html then u need to edit the imports section in the app.module.ts

    eg let me use a module called FormsModule

for this module it is already installed with the angular cli so we are going to import it directly

    inside the app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';

@NgModule({
    declarations: [
        AppComponent
    ],
    imports: [
        BrowserModule,
        FormsModule
    ],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule { }

    as u can see we have added 2 new lines

1.
import { FormsModule } from '@angular/forms';

2.
imports: [
    BrowserModule,
    FormsModule
],

    this was a module for ngModel that is used to get the input and change the variable dynamically
    
    then we also modified the html and app.component.ts
app.component.ts

import { Component } from '@angular/core';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
})
export class AppComponent {
    name = 'new_app';
}

app.component.html

    < input type = "text"[(ngModel)] = "name" >
        <p>{{ name }}</p>

the above program is noting but it makes the input value to render in the html page using NgModule

this is not the full content so dont forget to google stuff and read DOMRectList

so angular uses type script that is converted in to js at the end

you can install the bootstrap for beatuful Ui in ur web application

    npm i--save bootstrap @version

eg:
        npm i--save bootstrap  // this installs the latest version
    (or)
        npm i--save bootstrap @3  //this installs the version 3

then the node should know that we have another css file that is bootstrap so u need to add a line under angular.json under -> architect -> build -> test -> styles
here we need to add the location of out bootstrap css file whic is located in C: \Users\[Your user name]\[your app location and name]\node_modules\bootstrap\dist\css\bootstrap - theme.min.css

        after modification:

"styles": [
    "node_modules/bootstrap/dist/css/bootstrap-theme.min.css",
    "src/styles.css"
],

    note : change '\' -> ' / ' in the copied path and the copied path should started from node_modules
try not to use the bootstrap from the global installation else it will be confusing
do restart the server so that the new config is loaded



use developers tools and check the sources tab and then click on style.css if it displayed message like 

Do you get some strange error ? Are you stuck ?

    Have a look at the source code of this course - by comparing it to your code you should be able to quickly find out where your code deviates and what causes the issue!

You can find the source code of each section attached to the last lecture of that section!

Each ZIP file holds code files which you can use to compare your code to it.

One important note: All the course code will only work if you are NOT using "strict mode" see the "First App" lecture in this module.Strict mode forces you to write more verbose code in some places(especially when it comes to class properties).If you enabled it by accident, you can also disable it by setting strict: false in your tsconfig.json file.

---

    Due to dependency version mismatches, running the attachments might fail though - in that case, you can try the following:

1) Create a new project via ng new my - project--strict false(the--strict false part is important!)

2) Copy the content of the ZIP attachment src / app folder into the newly created project src / app folder.

3) Run your project(my - project) via ng serve

If you try to directly run my ZIP attachments, you must run npm install first.

If you're getting errors when running npm install, you can often solve them by running npm install --legacy-peer-deps instead of npm install.

---

    Got any problems with the code(e.g.error messages when running it or you don't know how to use it)? Check this thread created by Jost: https://www.udemy.com/the-complete-guide-to-angular-2/learn/lecture/6709112#questions/8079942

!Still it does not work its ok u can contine we will see that in future
the root componet is the default componut in the angular it is the palce where all the componunts are tied up

Components -

        these are the parts of the the webpage that have different workings like google web page has a component called search it can be repeded in the multiple pages

    u can create the components any where but do do ccreate it under the app folder so that its easy to rember and MediaKeySystemAccess

    u need to include the files which u create in the component file then u need to create componets and do add it in the module also

JIT and AOT--

JIT - just in time compiler:

this compile the code at the run time this might cause the web page to be little slow
this will be used mostly in the developement

            What is the Just in Time(JIT) compiler ?

    Just in time compiler provides compilation during the execution of the program at a run time before execution.In simple words, code get compiles when it’s needed, not at the build time.

                Why and When Should you use Just In Time Compiler ?

    Just in time compiler compiles each file separately and it’s mostly compiled in the browser.You don’t have to build your project again after changing your code.
                    Most compiling is done on the browser side, so it will take less compiling time.
                    If you have a big project or a situation where some of your components don’t come in use most of the time then you should use the Just in time compiler.
Just in Time compiler is best when your application is in local development.

    JiT : Just -in -Time
                By default, during the execution of the application, the templates will be compiled.I.e.Angular will compile the templates on the fly.This is what we call JiT compilation which we can use via the commands:
                
                    ng build
    (or)
                    ng build--prod--no - aot

AOT - ahead of time compiler:
        
        All technologies Ahead of Time is a process of compiling higher - level language or intermediate language into a native machine code, which is system dependent.

        In simple words, when you serve / build your angular application, the Ahead of Time compiler converts your code during the build time before your browser downloads and runs that code.From Angular 9, by default compiling option is set to true for ahead of time compiler.

this will compile beforerunning this is mostly used in the production
this type of compileation is happend only once during the deployement 
            the code is converted in the server as the machine code 
            
            Why should you use the Ahead of Time compiler ?

    When you are using Ahead of Time Compiler, compilation only happens once, while you build your project.
                We don’t have to ship the HTML templates and the Angular compiler whenever we enter a new component.
                It can minimize the size of your application.
                The browser does not need to compile the code in run time, it can directly render the application immediately, without waiting to compile the app first so, it provides quicker component rendering.
                The Ahead of time compiler detects template error earlier.It detects and reports template binding errors during the build steps before users can see them.
                AOT provides better security.It compiles HTML components and templates into JavaScript files long before they are served into the client display.So, there are no templates to read and no risky client - side HTML or JavaScript evaluation.This will reduce the chances of injections attacks.

            The AoT compilation is based on this ascertainment, usable via the commands:

                ng build--aot
    (or)    
                ng build--prod

            by deafult the aot is used for the compileation

    What Compilation should I use ?

    During the development phase, it is recommended to use JiT compilation.The reduced build time will give fluid development environment.

        However, when we pass to the production phase, the AoT compilation is indispensable.Better performance, better security, smaller bundles, ..

        Good compilations.

Difference between angular.json and package.json in angular project

Package.JSON holds all of the “npm” packages installed for the project.Angular.JSON holds the configuration for the project.

    The`angular.json` file is a configuration file used in Angular projects to define various settings and properties related to the project's structure, build process, and development workflow. It is generated automatically when you create a new Angular project using the Angular CLI (Command Line Interface).

The `angular.json` file is written in JSON(JavaScript Object Notation) format and consists of several sections that define different aspects of the project.Here are the main sections you can find inside the `angular.json` file:

1. ** "projects":** This section defines the projects within your Angular workspace.By default, you will find an entry for the main project, which is usually named as the root project.Each project can have its own configuration settings.

    2. ** "architect":** This section contains the configuration for various architect builders, which are responsible for executing different tasks in your project.It includes settings for building, testing, serving, and deploying your Angular application.Under the "architect" section, you will find sub - sections corresponding to different commands such as "build", "test", "serve", etc.

    3. ** "schematics":** This section is used to define schematics, which are code generators that automate common tasks in an Angular project.Schematics allow you to generate components, modules, services, and other artifacts based on predefined templates or custom blueprints.

    4. ** "cli":** This section includes the configuration for the Angular CLI itself.It allows you to define default values and settings for the CLI commands.

    5. ** "defaultProject":** This property specifies the default project to be used when running CLI commands without explicitly specifying a project name.It references one of the projects defined in the "projects" section.

    6. ** "newProjectRoot":** This property sets the root directory where new projects will be created when using the Angular CLI to generate a new project.

    7. ** "workspace":** This section includes general settings for the Angular workspace, such as the version of the CLI used to generate the workspace, CLI default values, and other miscellaneous configuration options.

These are the main sections you will find in the`angular.json` file.The specific contents and properties within each section can vary depending on your project's configuration and the Angular CLI version being used. The `angular.json` file plays a crucial role in configuring your Angular project and defining how it behaves during development, building, and deployment processes.

Angular selectors -

    each component has the selectors so if u see inside a selector u can find that there a folder called src inside that u have app folder which represents the app componet
    inside the app.component.ts u can see a selector keyin @component 

    u can represent the selector as a html tag

this selector is used to put that componet code in that position this can be done in many ways like using the selector as a html tag attribute or as a style class or a html tag

    method 1 : as html tag -

    selector: 'name of the selector'

        in the html file eg: app.component.html

            < name of the selector > </name of the selector>

eg:

selector: 'approot'

htmlfile -

    <approot></approot>

    method 2 as a html attribute -

    selector: '[name of the selector]'

htmlfile -

    <any html tag  name of the selector > </any html tag>

eg:

selector: '[approot]'

htmlfile -

    <div approot > </div>

    method 3 as a css class selector-

    selector: ".name of the attribute"

        html file -

    <AnyHtmlTag class='name of the attribute' >

        eg:

selector: ".approot"

htmlfile -

    <div class="approot" > </div>

the selector name can be anything approot rick montey etc.......

pipes -

    this is a rough def - in bash we use pipes same we use in angular to convert data from one form to another read down for more

EVERY THING RELATED TO ANGULAR CLI -

    Install the Angular CLI globally:

    npm install - g @angular/cli
    Create workspace:

    ng new [PROJECT NAME]
    Run the application:

cd[PROJECT NAME]
    ng serve
    Angular is cross - platform, fast, scalable, has incredible tooling, and is loved by millions.

    to get more details - https://github.com/angular/angular-cli


after creating the new app u can delete the contents of the[app] -> src -> app.component.html
this is to build from the scratch

use ful extensions for the nagular developers -

    1)angular language service - used to get the variables functuions recomendations

2)json to ts - this is ued to copy the json file to ts interface

3) angular v6 snippets - snippts

4) angular 6 snippets ngrx, rx js etc ....

5) angular switcher - this is used to switch the angular files easy and fast using shortcutsd like alt + shift + u(or) i(or) o(or) p

5th one is optional because u can use ctrl + tab

Components -

    single part of the web page like header or the main content or the side menu etc..this can be seperated indually and called as a componets

this allows us to reuse the componets like header and footer etc and many sub opart of the page like menu

how to create a component manually -

    first create a folder in the src -> app -> componet name 
then create a file in that folder named like this 
replace ComponetName with ur componet name like server, menu etc ...

ComponentName.component.ts

    and like this

ComponentName.component.html

inside ComponentName.component.ts folder - 

    import { Component } from "@angular/core";

@Component({
    selector: 'app-ComponentName',
    templateUrl: './ComponetName.componet.html'
})
export class ComponetNameComponent {

}

eg:

import { Component } from "@angular/core";

@Component({
    selector: 'app-server',
    templateUrl: './server.componet.html'
})
export class ServerComponent {

}

let the ComponentName.component.html be empty now 

then modify the src -> app -> app.module.ts

import ur componet eg:

import { ServerComponent } from './server/server.component';

    then add it in the ngmodule:

@NgModule({
    declarations: [
        AppComponent,
        ServerComponent
    ],

    then u can use the html selector tag in app.componet.html or may be index.html

    eg:

        <h1>{{ Title }}</h1>
< input type = "text"[(ngModel)] = "Input" >
<p>The Input is {{ Input }}</p>
< p > The Output : {{ Output }}</p>
< app - server > </app-server>

the server will automatically take the updation

u can automate this process also by using the generate param

    ng generate component ComponentName
    (or)
    ng g c ComponentName

    eg:
    ng g c service

    then follow the same steps of adding the tags etc .....

    it will automatically add the componet in the app.module.ts

    u just need to add this in the app.component.html file

if u see the component.ts in any component u will see the 3 default key value pairs inside the componet selector @Component

selector: 'what ever name u give here will be used as the identifire in the actual html template so that the html might render the content of that componet'

templateUrl: 'this can contain the location of the html template or the html code its self'

styleUrls: ['this contains the style sheet location or the style itself]

    u hsould use`` to write the multiline content of html or the location do not use "" or ''

if u have multiple templates use['file one', 'file 2']

    u also have the styles: key to implement the inline style that has high priority

styles: [`
    h3 {
        color: doggerblue;
    }
    `]

do use the snippets in the vs code for automation and the speed improvement

data binding -

    the data and the instruction intract with each other and give a final html page

    adding the data dynamically stuff like string interpolation { { data } } property binding etc...

string interpolation - 

    in the ComponetName.component.ts we will have export class ComponentName { }

this where we declare the variables and write the actual code

eg:

export class AppComponent {
    Title = 'Calculator';
    Input = '';
    Output = 0;
}

if u want to define the datatype manually u can use: method

eg:

export class AppComponent {
    Title: string = 'Calculator';
    Input: string = '';
    Output: number = 0;
}

you can directly embed the content in the html like this

<h1>{{ Title }}</h1>
<p>The Input is {{ Input }}</p>
<p>The Output : {{ Output }}</p>

this will display the contents of the variable dynamically

u can directly embed the string like this {{ 'hello' }}

the method definition in the type script -

    methodname(){
        //action block
    }

now we need to learn ts and prerequest is html css and js which is avalible in the repo

    the type script is a superset - it has more than JavaScript

type script is all about type safety like u can add the '2' which is a string and 2 which is a number it shoudnt allow it corret ?

for more clarity - https://youtu.be/30LWjhZzg50

type script features - 

    static checking - this checks the code when u type is it correct or not like accessing the undefind object etc ....

    the ts is converted into js

    interface

intrioduction to the TypeScript:

    almost everything will be similar in the type script like js if u dint learn it then do ckeckout the javascript first

    u can use online ide for pratice - https://www.typescriptlang.org/play?#code/MYewdgzgLgBAhmAogDzgWwA4BsCmA1OAJwEs4AjXGAXhgCIAJHLLEGAdREKwBNaAoUJBC4AdCwDmACgQp02fEVIUcASj5A

    if u want to pratice locally then u need to install it 

        npm i -g typescript 

    u can execute the typescipt file by tsc command

        tsc filename

    this will convert in to js then u can execute

    try to avoid the key word any in the typescript

    how to define a variable in typescript

        let variableName = value;//this can be done for any datatype but avoid it

        let variableName:datatype = values

        eg :
            let age:number = 10;

    Data type	Keyword	Description
    Number	number	Double precision 64-bit floating point values. It can be used to represent both, integers and fractions.
    String	string	Represents a sequence of Unicode characters
    Boolean	boolean	Represents logical values, true and false
    Void	void	Used on function return types to represent non-returning functions
    Null	null	Represents an intentional absence of an object value.
    Undefined	undefined	Denotes value given to all uninitialized variables
    Note − There is no integer type in TypeScript and JavaScript.

    the type script doesnot allow others to put other datatype in the variables which is has a predefined datatype 

    eg:
        let age:number = 10;
        then u cannot change the value as a string
        age = 'bandra';
        this will not work
        this will give a error like - Type 'string' is not assignable to type 'number'.

    if u put . near the variable the vs code will suggest some method related to that datatype

    the error is highlighted using red '~~~~~~~~~~'lines 

any keyword : 

    any can be used as the datatype while declaring a variable if u dont know what is going to be stored in it 
    please do avoid it because any will have safety concernt

    u can define the typescript config to avoid any 

    noImplicitAny
        When you don’t specify a type, and TypeScript can’t infer it from context, the compiler will typically default to any.

        You usually want to avoid this, though, because any isn’t type-checked. Use the compiler flag noImplicitAny to flag any implicit any as an error.

    for more details on all the datatypes - https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

functions in the typescript:

    THE BASIC FUNMCTION DECLARATION 

        function FunctionName(params){
            actionblock;
            return variable/opertion/any
        }

        eg :

            //declaration 
            function addTwo(num){
                return num + 2
            }

            //calling
            addTwo(90);

        using lamda fuunctions

        let FunctionName = () => {
            action block;
            return variable/opertion/any
        }

        default the functions are declared using the 'any' u cna have specific param datatype and the return type

    with variables and the datatype :

        function FunctionName(params:datatype):returnDataType {
            action block ;
            return variable/opertion/any
        }

        lamda

        let FunctionName:datatype = (params:datatype) =>{
            action block;
            return variable/opertion/any
        }

    eg:
        function Adder(value1:number,value2:number):number{
            let sum:number=value1+value2;
            return sum
        }

        lamda

        const Sub:number = (value1L:number,value2:number) {
            let subratedValue:number = value1L-value2;
            return subratedValue
        }

the lambda function can be defiend using let or const

there is a datatype called void that rteturs ether null or not-defined if u want to return nothing the n use never

    eg: 
        function printer():never{
            console.log('this never retuns any thing');
        }

object declaration :

const user ={
    name:'asd',
    email:'asd!@asd.asd'
}

passing a object or the geting a object as the return type

    function createuser ({name:'anny',email:'anni@gulsarvice.com'}):{status:bool,password:string}{
        actionblock;
        return {status:true,password:'asd'}
    }
 
u can also first declare the object and then u can call the function

    type userobj = {
        name:string;
        email:string;
        isActive:boolean
    }

    function createUser(user:userobj){
        //the object name can be anything
        //action block
    }

    createUser({name:"",email:"",isActive:true})
    or 
    user1:userobj = {name:"",email:"",isActive:true}
    createUser(user1)

u can define the readonly variables like this

    readonly _id:string = '123'
we can use const but why read only because the const doenst allow use to intialize first time in the run time but read only does allow 

u can combine 2 or more objects in the type script like this 

eg: 
    type cardnumber = {
        cardnumber:string
    }
    type Carddate={
        carddate:string
    }

    type carddetails = cardnumber & carddate & { cvv:number }

arrays in the typescript 

    const VariableName:datatype[]= []

    eg :

        cosnt hero:string[] = []

        for multidiementional use [][] = {{},{}}

    u can push the stuff to insert 

        hero.push("venom")

union- 

    a variable can have 2 or more datatypes to represent it we use union
        | is the symbole use to represent union
        eg:

            let id: number|string;

        here id can be a nuber like roll no or a email address which is a string

tuples-

    the tuples are like list but it s immutabel means the values cannot be changed 

    delcartion and the usage

    eg:
        let user:[string,number,boolean]

        user = ["allen",1,true]

enums-

    this are the immutable list of data
    eg:
        enum city {
            chennai = 1,
            mumbai = 2,
            newyork = 3
        }

        (or)

        enum city {
            chennai = 'chennai',
            mumbai = 'mumbai',
            newyork = 'us'
        }

        u can access it by the key

        const city = city.chennai

        some time to siply fiy the code add const befor the enum it will only generate the required value

interface - 

    as same as C# this is used to define a interface to a method aka function that can be called indirectly a interface can have multiple methods but u can also have variables in here only the definition can be here

        interface city {
            name:string
            region?:string // this is optional u can define it or not 
            cityfinder:()=>string // this is return type
        }

const city1:city = {
    name:'chennai',
    cityfinder:() => {
    return 'stringvalue'
    }
}

you can also extend one interface over another 

eg:
    interface state extends city{
        state:(capita:string,city:string)
    }

class- 

    eg:
    //class declaration
        class user{
            email:string
            //u can also defien the access here if u want to access only inside the class
            private password = 'asd'
            constructor(email:string){
                this.email = email;
                this.password = '123'//you cannot acces or change this anywhere else
            }
        }

    //object declaration

        const hitesh = new user(email:'asd@asd.com')

getters and setters-

    get funcName(params){
        return
    }
    set funcname(params){
        this.InternalVariableOrPrivateVariable = Value
    }

you can see the ts script - https://github.com/hiteshchoudhary/typescript-youtube-22  //code is avaliable here

access modifieriers-

    private - 

    public - 

    protected - 

    all are same like other languages

    for this first u need to under stand the inheretance we use extends to inheret the class

    eg:
        class SubUser extends User {
            this.anything from parrent class
        }

abstract class-

    abstract class are the classes that can be used only to override it doesnt has any actual purpose

    just before the method declaration put abstract and while defineing th child class use extend

    rember not all methods are abstract

generics,in and other advance concepts-

to learn all about the generics and generic classes u can see this this also has type narrowing - https://youtu.be/30LWjhZzg50?t=12939

comming back to angular - start from 25

----------string interpolation---------------
                 and 
----------  property binding    -------------
                 and 
-------------event binding-------------------

string interpolation - 

    U CAN directly use the ts variables in the html template

    like this {{ variable }} this will be embeded as the string in the html

    eg: 
        <h1>{{ name }}</h1>

    you can also embed the functions in the template as which has the return type 

    eg:
        <h1>{{ GetName() }}</h1>

        and the get name definition in thwe componet.ts

        import { Component } from '@angular/core';

        @Component({
          selector: 'app-root',
          templateUrl: './app.component.html',
          styleUrls: ['./app.component.css']
        })
        export class AppComponent {
            GetName():string{
                return 'my name is mr robot'
            }
          }
        }

        now the output will be like my name is robot

    property binding - 
        this the method where u can manage the property like hide or true false etc other attributes
        eg the there is a disable attribute for the button which defaults disabling the button

        this can be done like

        html code:

            <button
                class='any name'
                [disable]="variableAllow">
                <!-- u can also do the opposite by adding ! before the variable -->
                content
            </button>

        ts file:

            export class anycomponent implements OnInit { // the class name may be changed the oninit may not be there
                variableAllow = false;
                constructor(){
                    setTimeout(() => {this.variableAllow = true;}
                    ,2000);
                }
                //this is a program to disable the button after 2 seconds
            }

        for adding the content to a element u can have the inner text attruibute like this 

            <p [innerText]="variableAllow"></p>

property binding vs string interpolation - 

    when ever you want to show the content of the variable use the string interpolation and if u want to do some operation or decide the state of the current element atribute then use the property buinding

    do not mix both 

Bindable Properties and Events
How do you know to which Properties or Events of HTML Elements you may bind? You can basically bind to all Properties and Events - a good idea is to console.log()  the element you're interested in to see which properties and events it offers.

Important: For events, you don't bind to onclick but only to click (=> (click)).

The MDN (Mozilla Developer Network) offers nice lists of all properties and events of the element you're interested in. Googling for YOUR_ELEMENT properties  or YOUR_ELEMENT events  should yield nice results.

    eg :

    u want to know the different properties and the events generated by the 
    you can pass the $event to a function and print the contents in the console and 
    $event is a reserved variable that has the content of the current event 

    eg code:

    html:
        //we are going to take the input events data
        <input 
        type='text'
        (input)="EventPrinter($event)">

    conponet.ts code :

        //inside the class
        EventPrinter(event:any){
            console.log(event);
        }

//this can be only used by the one way like if u update in the html element in the web application then the variable will be update but if the ts manuplated the data it will not get updated for 2 way use the ngModel

Important: FormsModule is Required for Two-Way-Binding!
Important: For Two-Way-Binding (covered in the next lecture) to work, you need to enable the ngModel  directive. This is done by adding the FormsModule  to the imports[]  array in the AppModule.

You then also need to add the import from @angular/forms  in the app.module.ts file:

import { FormsModule } from '@angular/forms'; 

FormsModule-

    to activate this form module first import the form module in the app.module.ts and add FormsModule in the imports

    like this:

        import { NgModule } from '@angular/core';
        import { BrowserModule } from '@angular/platform-browser';
        import { FormsModule } from '@angular/forms';
        
        import { AppComponent } from './app.component';
        import { ServerComponent } from './server/server.component';
        import { ServiceComponent } from './service/service.component';
        
        @NgModule({
          declarations: [
            AppComponent,
            ServerComponent,
            ServiceComponent
          ],
          imports: [
            BrowserModule,
            FormsModule
          ],
          providers: [],
          bootstrap: [AppComponent]
        })
        export class AppModule { }
        
then u can use the ngModel in the input tag etc ...

    eg:
        Input1:<input type="text" [(ngModel)]="input1" (ngModelChange)='1'>

here if we update the value in the program or the ng model the variable will be updated

directives- 36




top read the type script doc from stratch - https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html


    

last seen - https://youtu.be/30LWjhZzg50?t=4606