we need to download and work in visual studio
and in visual stdio select the community edition and the package is .NET desktop developement

after installing open a directory and open that dir with visual studio and select new project and start the type of application that u are going to develope select the options and frame work version 

and now a template is generated for you to work make sure you dont have any old apps in that folder if that exist its fine still it can some times overlap

for me i have choose "new -> new project -> console app (.net framework)

the new generated program will be like having a file called program.cs and the content will be 

note : the text behind // are meessages this will not reflect in original code they are only for reference

----------------------------------------code----------------------------------------------

using System;                           //these are header files
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program              //classes
    {
        static void Main(string[] args) //functions or aka method
        {
            //here is where the actual code is typed and first executed
        }
    }
}

------------------------------------------------------------------------------------------

-------------------------------hello world program----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World");
            
        }
    }
}
---------------------------------------------------------------------------------------------


-------------------------first program to print hello world-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");
        }
    }
}

------------------------------------------------------------------------------------------

select 2nd play button "run without debugging"

to execute the program fully use first start button but the program will be terminated after execution u can stuck it by demanding a input

to get input use 

    Console.ReadLine();

full program

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            Console.ReadLine();
        }
    }
}

to print the line without the next line use 

            Console.Write("hello world");

this prints in same line

_______________________variables__________________________________________________________

variables are use to store data in a program for more pls google it

C# Variables
Variables are containers for storing data values.

In C#, there are different types of variables (defined with different keywords), for example:

int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false
var - can store anything for float mention f at last of the number d - decimals or value in actual float like 2.9 or string etc ..........

sample for float double and decimal:

code :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FloatingPointNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            float f_no = 0.0f;
            double d_no = 0.0d;
            decimal m_no = 0.0m;

            f_no = 1 / 3f;
            d_no = 1 / 3d;
            m_no = 1 / 3m;

            //place holder
            Console.WriteLine("Float no. is {0}", f_no);
            Console.WriteLine("Double no. is {0}", d_no);
            Console.WriteLine("Decimal no. is {0}", m_no);
        }
    }
}


output:

    Float no. is 0.3333333
    Double no. is 0.333333333333333
    Decimal no. is 0.3333333333333333333333333333
    Press any key to continue . . .


Declaring (Creating) Variables
To create a variable, you must specify the type and assign it a value:

Syntax
type variableName = value;
Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.

To create a variable that should store text, look at the following example:

Example
Create a variable called name of type string and assign it the value "John":

string name = "John";
Console.WriteLine(name);

Other Types
A demonstration of how to declare variables of other types:

Example
int myNum = 5;
double myDoubleNum = 5.99D;
char myLetter = 'D';
bool myBool = true;
string myText = "Hello";

the other datatypes related to numbers are given as "./number datatypes.png" 

Name .NET Type Size Range
sbyte System.SByte 1 byte -128 to 127
byte System.Byte 1 byte 0 to 255
short System.Int16 2 bytes -32,768 to 32,767
ushort System.UInt16 2 bytes 0 to 65,535
int System.Int32 4 bytes -2,147,483,648 to 2,147,483,647
uint System.UInt32 4 bytes 0 to 4,294,967,295
long System.Int64 8 bytes -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
ulong System.UInt64 8 bytes 0 to 18,446,744,073,709,551,615
float System.Single 4 bytes 7 digits 1.5 x 10^-45 to 3.4 x 10^38
double System.Double 8 bytes 15-16 digits 5.0 x 10^-324 to 1.7 x 10^308
decimal System.Decimal 16 bytes 28-29 decimal places 1.0 x 10^-28 to 7.9 x 10^28




the variables can be concardinated in write line with + sign eg program with output

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            int myNum = 5;
            double myDoubleNum = 5.99D;
            char myLetter = 'D';
            bool myBool = true;
            string myText = "Hello";

            Console.WriteLine("int " + myNum );
            Console.WriteLine("double " + myDoubleNum + " number");
            Console.WriteLine("char " + myLetter );
            Console.WriteLine("bool " + myBool + " haha");
            Console.WriteLine("string " + myText );


            Console.ReadLine();
        }
    }
}


output:

hello world
int 5
double 5.99 number
char D
bool True haha
string Hello

-------------------------------------sample program2 for variables-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Variables
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 2;
            Console.WriteLine("Number x is " + x);
            x = 5;
            Console.WriteLine("Number x is " + x);

            double double_num = 0.0d;
            float float_num = 0.0f;
            decimal decimal_num = 0.0m;

            double_num = 9.8;
            float_num = 5.5f;
            decimal_num = 100.250m;

            Console.WriteLine("Double is " + double_num + " float is " + float_num + " decimal is "+decimal_num);

            string firstName, lastName, House;
            firstName = "Jon";
            lastName = " Snow";
            House = "Stark";


            Console.Write("Hello, " + firstName +  lastName + " of House Stark");

            bool IsWorking;

            IsWorking = true;

            Console.WriteLine(IsWorking);

            int sum;
            sum = 0;

            int number1, number2;

            number1 = 5;
            number2 = 100;
            sum = number2;
            Console.WriteLine(sum);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________

__________________________________________sample program for var---------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace var
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            string name = "faheem";

            var test = name;
            Console.WriteLine(test);
        }
    }
}

----------------------------------------------------------------------------------------------

to find the lenght of a string use ".Length"

eg:            Console.WriteLine( variable.length );

like length u can use ToUpper() to convert string from lower to Upper and ToLower() for wiseversa

            Console.WriteLine(myText.Contains("Hell"));

the above function is to check whether the given word is there in the string returns true or false

u can print character by character by their index position 
eg:myText[0]

note: index starts from 0

u can print the index of a character by the IndexOf function

u can print a range of indexes using the Substring function
eg: myText.Substring(2,5);

u can execute the arithmetic operations directly in write line function

Arithmetic Operations
 Addition (+) ex. 1 + 1 = 2
 Subtraction (-) ex. 3 - 1 = 2
 Multiplication (*) ex. 2 * 2 = 4
 Division (/) ex. 6 / 3 = 2
Remainder (%) ex. 7 % 3 = 1 or 19 % 5 = 4
Remainder is the amount left over after division
19 / 5
19 cannot be divided exactly by 5
 The closest you can get without going over is 3 x 5 = 15, which is 4 less than 19
 So 4 is the remainder
 
code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 7;
            int y = 2;
            int result = 0;
            result = x % y;
            Console.WriteLine("Rem: " + result);
        }
    }
}

---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperatorsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int x, y;
            int add, sub, mult,rem;
            float div;

            Console.WriteLine("Enter no. 1");
            x = int.Parse(Console.ReadLine());

            Console.WriteLine("Enter no. 2");
            y = int.Parse(Console.ReadLine());

            add = x + y;
            Console.WriteLine(x + " + " + y + " = " + add);

            sub = x - y;
            Console.WriteLine(x + " - " + y + " = " + sub);

            mult = x * y;
            Console.WriteLine(x + " * " + y + " = " + mult);

            div = (float)x / (float)y;
            Console.WriteLine(x + " / " + y + " = " + div);

            rem = x % y;
            Console.WriteLine(x + " % " + y + " = " + rem);
        }
    }
}


---------------------------------------------------------------------------------------------


Precedence of operators

wrong method

2 + 3 * 2 - 4 + 2
5 * 2 - 4 + 2
10 - 4 + 2
6 + 2
8

right method

2 + 3 * 2 - 4 + 2
2 + 6 - 4 + 2
8 - 4 + 2
4 + 2
6


increment and decrement exist

there are many math functions see https://www.w3schools.com/cs/cs_math.php

trial code use BODMAS:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrecedenceOfoperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            x = (2 + 3) * 2 - 4 + 2;
            Console.WriteLine(x);
        }
    }
}



---------------------------------------input operations----------------------------------
            
            Console.WriteLine("enter the name:");
            myText=Console.ReadLine(); //this read line only works for string
            Console.WriteLine("hello" + myText);

eg code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadLine
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");

            string name =  Console.ReadLine();

            Console.WriteLine("Welcome " + name + ", welcome back!");
        }
    }
}


-----------------------------------------------------------------------------------------
to convert the datatype of the variables u can use 

eg: int num = Convert.ToInt32("45");

or

eg: num = num.ToInt32();

also you can use 

eg: variable1 = (int)variable2;

like this, u have different datatypes that u can convert note the datatype should be compatible

-----------------------------------------sample data conversion-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TypeConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            int serialNo = 150;
            string accountNo = "";
            float anyNo = 3.1f;

            accountNo = serialNo.ToString();

            Console.WriteLine(accountNo);

            //serialNo = Convert.ToInt32(anyNo);
            serialNo = (int)anyNo;

            Console.WriteLine(serialNo);
        }
    }
}


-------------------------------------arrays in c#-----------------------------------------

how to declare an array

syntax:

datatype[index limit] variableName = {value,values}; //here index limit can be empty
Console.WriteLine( variableName[index] );

eg:

int[] number = {1,2,3,4,5,6};
Console.WriteLine(number[0]);

to define a static array

syntax:

datatype variableName = new samedatatype[index limit];

eg:

string[] friends=new string[5]

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Arrays
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = new int[5] { 1, 10, 100, 1000, 10000 };
            //string[] weekDays = new string[7] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
            string[] weekdays = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.WriteLine(numbers[i]);
            }

            foreach (var item in weekdays)
            {
                Console.WriteLine(item);
            }
        }
    }
}


----------------------------------------c# functions _____________________________________________

how to declare functions or aka methods

    static void Main(string[] args){
        functionName(variable or value to be passed);
    }

    static void functionName(datatype variableName){
        action block;
    }

eg:
-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            hi("hellow world");

            Console.ReadLine();
        }

        static void hi(string s)
        {
            Console.WriteLine(s);
        }
    }
}

-----------------------------------------------------------------------------------------

other rules are as same as other languages

-------------------------------------if statements------------------------------------------

if is as same as c and java

syntax + eg:

if(condition == condition){
    action block;
}
else if{
    action block false;    
}
else{
    action block else;
}

useful things in if:

1) == equalto
2) && and
3) || or
4) != not equal

Comparison operators

== equal
!= not equal
> greater than
 < less than
>= greater than or equal to
 <= less than or equal to

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConditionalStatmentsIF
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            int y = 7;

            x = int.Parse(Console.ReadLine());
            y = int.Parse(Console.ReadLine());

            if (x > y)
            {
                Console.WriteLine("Number one is greater than number two");
            }
            else if (x < y)
            {
                Console.WriteLine("Number one is less than number two");
            }
            else 
            {
                Console.WriteLine("They matches!!");
            }
         }
    }
}

-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComparisonOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            int y = 0;

            x = 9; y = 9;

            if (x == y)
                Console.WriteLine("X is equal to y");
            else if (x != y)
            {
                //nested if
                if (x > y)
                    Console.WriteLine("X is greater than y");
                else if (x < y)
                    Console.WriteLine("X is less than y");
            }
               

        }
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedLoops
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int i = 1; i <= 30; i++)
            {
                //Console.WriteLine("First loop i = " + i);
                for (int j = 1; j <= 30; j++)
                {
                    Console.Write("0 ");
                    //Console.WriteLine("Second loop j = " + j);
                }
                Console.WriteLine();
            }
        }
    }
}


---------------------------------logical operators-----------------------------------------

Logical operators
Condition X Condition Y AND OR
true - true true true
true - false false true
false -true false true
false -false false false
AND
Learn to drive Get license Get to drive in streets
true- true true
true- false false
false- true false
false- false false
OR
Take a shower Go for a swim Get wet
true- true true
true- false true
false- true true
false- false false

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoreLogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            bool username = false;
            bool email = false;
            bool password = true;

            if ((username || email) && password)
                Console.WriteLine("User is valid.");
            else
                Console.WriteLine("Something went wrong");
        }
    }
}

----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            // and operator
            //bool HasLicence = true;
            //bool KnowHowToDrive = false;

            //if (HasLicence == true && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You are good to go!");
            //}
            //else if (HasLicence == true && KnowHowToDrive == false)
            //{
            //    Console.WriteLine("Cheateeer!!!");
            //}
            //else if (HasLicence == false && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You need to get a licence");
            //}
            //else
            //{
            //    Console.WriteLine("That is not gonna happen pal!");
            //}

            // or operator
            bool WentForSwim = true;
            bool TookAShower = true;

            if (!WentForSwim || !TookAShower)
            {
                Console.WriteLine("Pal you are so wet");
            }
            else
            {
                Console.WriteLine("You are not wet");
            }

            // Not !
        }
    }
}

-----------------------------------------------------------------------------------------------

------------------------------------------------switch --------------------------------

syntax + eg:

switch(variable)
{
    case condition:
        actionblock case1;
        break;
    
    other cases..................
    .
    .
    .
    .
    .
    .
    .
    .
    .
    default:
    action block default;
    break;
}

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchStatment
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Are you enjoying C#? (Yes or No)");
            string input = Console.ReadLine();

            switch (input)
            {
                case "Yes": Console.WriteLine("This is very good"); break;
                case "No": Console.WriteLine("So sorry that you are not enjoying");break;
                default: Console.WriteLine("This is not a correct answer");break;
            }
        }
    }
}


---------------------------------------------while--------------------------------------

syntax + eg:

while(condition){
    actionblock;
}

the switch is as same as c and be careful if u didnt mention break it will continue to execute inside the switch break is used to jum out of switch case

do while is also same as c

syntax :

do{
    actionblock;
}while (condition);

//dont forget ;

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WhileLoop
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("While Loop");
            int x = 8;

            while (x >= 1)
            {
                if (x == 3)
                    break;
                Console.WriteLine("Game of thrones season 0" + x);
                x--;
            }
            Console.WriteLine("------");
            Console.WriteLine("Do While Loop");

            int i = 1;

            do
            {
                Console.WriteLine("This is line no." + i);
                i++;
            } while (i <= 10);
        }
    }
}


--------------------------------------for-------------------------------------------------

for is as same as C

syntax:

for(intialization;condition;itration){
    action block;
}

-------------------------------------comments------------------------------------------------------
//single line 

/*multiline comment*/

sample code for comments:
----------------------------basic errors and debugging-----------------------------------
syntax errors - they are like spelling mistakes in codeing like usage of ; () and function name can be misused or missed or any data is mismatched type of data is incorrect

run time errors - error which is caused during run time

logical error - they are error in the logic like divided by zero 

----------------------------advance exception handelling aka error handeling-------------------------

Exception Handling

An exception is a runtime error that happens during the execution
of a program.
Exceptions provide a way to transfer control from one part of a
program to another.

Exception handling is built upon these keywords: try, catch and finally
Try: try block contains a block of code, exceptions is expected to happen if we
run it.
Catch: program catches an exception with an exception handler at the place in
a program where you want to handle the problem.
Finally: finally block is used to execute a block of code, whether an exception is
thrown or not thrown.

types

1)

try
{
}
catch (SomeSpecificException ex)
{
}

2)

try
{
}
finally
{
} 

3)

try
{
}
catch (SomeSpecificException ex)
{
}
finally
{
}

they are as samme as C

use try for code and catch for error handeling

try{
    action block;
}
catch(type_of_exception object_for_reference /*optional*/){
    action on error;
    object_for_reference.command;
}
finally{
    should be executed action block;
}

to know more on detail and types read :https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm

execute no matter what happens should be added in finally method

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExceptionExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int firstNumber = 0;
            int secondNumber = 0;
            double divResult = 0;
            startAgain:
            try
            {
                Console.WriteLine("Enter the first number");
                firstNumber = int.Parse(Console.ReadLine());

                Console.WriteLine("Enter the second number");
                secondNumber = int.Parse(Console.ReadLine());

                divResult = (double)firstNumber / (double)secondNumber;
                Console.WriteLine("Result = " + divResult);
            }
            catch(DivideByZeroException e)
            {
                Console.WriteLine("Cannot divide by zero");
                goto startAgain;
            }
            catch (FormatException e)
            {
                Console.WriteLine("Invalid Input");
                goto startAgain;
            }
        }
    }
}


eg:



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExceptionHandling
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            int y = 9;
            double div = 0;

            try
            {
                div = y / x;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error is :" + e.Message);
            }
            finally
            {
                Console.WriteLine("Result is : " + div);
            }
        }
    }
}



-------------------------------------classes and objects----------------------------------

when u creat a class u can use a class file by accessing the view->solution explorer->(right click)new file->c# class

this will create a new class

when u define thwe classes make sure that u define the access controle such as public private protected internal etc.....

when ever u create and define a class make sure that u also declare and create a object_for_reference

eg class code (external class file called class1.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

    }
}

eg program code (main.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book();
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}

you can call functions also like this eg: name is a function then

book1.read(arguments);

you can declar the non static method out side the class in another class

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Classes
{
    class Program
    {
        static void Main(string[] args)
        {
            Person perOne = new Person();
            
            perOne.FirstName = "Ahmad";
            perOne.LastName = "Mohey";
            perOne.Country = "Egypt";

            Person perTwo = new Person();
            perTwo.FirstName = "Tim";
            perTwo.LastName = "David";
            perTwo.Country = "Australia";

            Person perThree = new Person();
            perThree.FirstName = "Daniel";
            Console.WriteLine(perOne.FirstName);
            Console.WriteLine(perTwo.FirstName);
            Console.WriteLine(perThree.FirstName);
        }
    }

    class Person
    {
        string firstName;
        string lastName;
        DateTime birthDate;
        string country;

        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }

        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }

        public DateTime BirthDate { get; set; }

        public string Country { get; set; }

        public Person()
        {
            firstName = "Unknown";
        }
    }
}



variable scope - 
_____________________________________________

class classname{
    global variable can be accessed from any where any function

    method(){
        local variable only accessable within the method
    }
}
_____________________________________________constructor----------------------------------

the constructure should have the class name there can be many constructure and the access type should be defined

the constructure should have as same name as class

eg program for the constructure:

main.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book("baba");
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}


class.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

        public book(string title) { 
            Console.WriteLine(title);
        }

    }
}

when a object (class) is under a scope the constructor gets executed 

-------------------------------getters and setters-----------------------------------------

getters and setter are used to access the data which is private to return a specific value or to set a specific value 

sample code how to use getter and setter 

private private_variable;//declared in class

public datatype variable //this will represent the private variable
{
    get {return private_variable;}
    set{condition;}
}

the variable should be called by the public variable name 
-----------------------------static class attributes & methods--------------------------------------

static means that the method belongs to the Program class and not an object of the Program class. You will learn more about objects and how to access methods through objects later in this tutorial. void means that this method does not have a return value. You will learn more about return values later in this

u can only call use add the values or modify only using the class not out side the class eg object.variable will not work here u can only use in class and its function

syntax and eg:

public static int count=0;

--methods--

to access the class functions without the object declaration eg:math.sqrt(3,3) like this u can use the key word static

eg and syntax:

class.cs:

class class_name{
    public static void function_name(){
        action block;
    }
}

main.cs:

class_name.function_name();

no need of object declaration like object class_name= new objectname() then objectname.function_name(); // no need of this 

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart3
{
    class Program
    {
        static void Main(string[] args)
        {
            //string firstEmployee, secondEmployee;

            //firstEmployee = "David Smith";
            //secondEmployee = "Sophia Watson";

            //Console.WriteLine($"Inside Main Method\n----------\n{firstEmployee} \n{secondEmployee}\n\n");

            ChangeNames(out string firstEmployee, out string secondEmployee);

            Console.WriteLine($"Inside Main Method\n----------\n{firstEmployee} \n{secondEmployee}\n\n");
        }

        static void ChangeNames(out string firstEmp,out string secEmp)
        {
            
            firstEmp = "Olivia Aaron";
            secEmp = "Alvaro Salazar";
            Console.WriteLine($"Outside Main Method\n----------\n{firstEmp} \n{secEmp}\n\n");
        }
    }
}






eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart4
{
    class Program
    {
        static void Main(string[] args)
        {
            string guestName = "";

            Console.WriteLine("Hello, Dear Guest, what is your name?");

            guestName = Console.ReadLine();

            if (guestName == string.Empty)
                WelcomeGuest();

        }

        static void WelcomeGuest()
        {
            Console.WriteLine("Okay, we hope you enjoy staying at our hotel");
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart4
{
    class Program
    {
        static void Main(string[] args)
        {
            string guestName = "";

            Console.WriteLine("Hello, Dear Guest, what is your name?");

            guestName = Console.ReadLine();

            if (guestName == string.Empty)
                WelcomeGuest();
            else
                WelcomeGuest(guestName);

        }

        static void WelcomeGuest()
        {
            Console.WriteLine("Okay, we hope you enjoy staying at our hotel");
        }

        static void WelcomeGuest(string name)
        {
            Console.WriteLine($"Thank you {name}, we hope you enjoy staying at our hotel");
        }
    }
}










--------------------------------------inheritance-------------------------------------------

we use : for inheretance

we should have 2 class for in heretance

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg")
        //super class
    }
}

class nonvegchef : vegchef {
    public void noncook(){
        Console.WriteLine("cooks non veg")
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    class Animals
    {
        private string privateVariable; public string publicVariable;
        protected string protectedVaraible; internal string internalVariable;

        private void TrainAnimalPrivate()
        {}
        public void TrainAnimalPublic()
        {}
        protected void TrainAnimalProtected()
        {}
        internal void TrainAnimalInternal()
        {}
    }

    class Dogs : Animals 
    {
        Dogs dog = new Dogs();

        void FeedDog()
        {
            
        }
    }

    class Cats
    {
        Animals animal = new Animals();

        void FeedCat()
        {
            
        }
    }
}


------------------------------------overriding--------------------------------------------

if super class and sub class same named functions when u execute it u wnat that class function to run u can use override method

eg :

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg");
        //super class
    }
    public virtual noncook(){
        Console.WriteLine("cooks milk");
    }
}

class nonvegchef : vegchef {
    public override void noncook(){
        Console.WriteLine("cooks non veg");
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();
        veg.noncook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

advance--------------------------------------------------------------------------------------

see ./accessc#.png for access control in c#

types of constructor are 

1)default

the default constructor doesnt has a parameter

when a class has no constructor ,default constructor is served by the compiler to that class

2)parameterized

the constructor has one or more parameters

3)static

restricted class but cannot be changed 

this constructor is called before the object is created

4)private

restricted class can be changed

there is also public constructor so that they can be accessed by anywhere

5)destructor

this gets scope when object is destroid this is represent by ~ symbol same name as class and there is only one desctroctor

to know more see this https://youtu.be/hxIb99-Z8_I

here u see the out put will be like the veg chef cooks milk but non veg chef cooks nonveg

---------------------------------------sample code for greeting---------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace greeting
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");
            var name = Console.ReadLine();
            Console.WriteLine("Nice to meet you {0} My name is C#, How old are you?",name);
            int.TryParse(Console.ReadLine(), out int age);
            if(age==0)
                Console.WriteLine("That is not a correct input");
            else
                Console.WriteLine("{0} good, As for me I was born on 2002. Which makes me {1} years old.", age,DateTime.Now.Year-2002);
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------date program-----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace date
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the day...");
            var day = Console.ReadLine();

            Console.WriteLine("Enter the month...");
            var month = Console.ReadLine();

            Console.WriteLine("Enter the year...");
            var year = Console.ReadLine();

            DateTime date = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
            Console.WriteLine("\n" + date.DayOfWeek);

        }
    }
}

--------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DateTimeLecture
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime myDate = DateTime.Now;
            string formattedDate = string.Format("Date is {0:yyyy MMMM dddd HH mm ss tt}",myDate);
            Console.WriteLine(formattedDate);
        }
    }
}


--------------------------------------------------------------------------------------------------------

-------------------------------------print day----------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace day
{
    class Program
    {
        static void Main(string[] args)
        {
            var day = DateTime.Now.DayOfWeek.ToString();

            switch (day)
            {
                case "Saturday": Console.WriteLine("Yellow");break;
                case "Sunday": Console.WriteLine("Green"); break;
                case "Monday": Console.WriteLine("Blue"); break;
                case "Tuesday": Console.WriteLine("Grey"); break;
                case "Wednesday": Console.WriteLine("Red"); break;
                case "Thursday": Console.WriteLine("Orange"); break;
                case "Friday": Console.WriteLine("White"); break;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------------

Date Class in C#---------------------------------------------------------------------------------

To set dates in C#, use DateTime class. The DateTime value is between 12:00:00 midnight, January 1, 0001 to 11:59:59 P.M., December 31, 9999 A.D.

Let’s create a DateTime object.

Example

using System;
class Test {
   static void Main() {
      DateTime dt = new DateTime(2018, 7, 24);
      Console.WriteLine (dt.ToString());
   }
}

Output
7/24/2018 12:00:00 AM
Let us now get the current date and time.

Example

using System;
class Test {
   static void Main() {
      Console.WriteLine (DateTime.Now.ToString());
   }
}

Output
9/17/2018 5:49:21 AM
Now using the method Add(), we will add days in a date with the DateTime structure.

Example
 
using System;
class Test {
   static void Main() {
      DateTime dt1 = new DateTime(2018, 7, 23, 08, 20, 10);
      Console.WriteLine ("Old Date: "+dt1.ToString());
      DateTime dt2 = dt1.AddDays(7);
      Console.WriteLine ("New Date: "+dt2.ToString());
   }
}

Output
Old Date: 7/23/2018 8:20:10 AM
New Date: 7/30/2018 8:20:10 AM

------------------------------------------------------------------------------------------------------



random month gerenrator Program using if - else

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo5
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int x = rand.Next(1,13);
            string monthName = "";
                        
            if (x == 1)
                monthName = "January - 31 days";
            else if (x == 2 )
                monthName = "February - 28/29 days";
            else if (x == 3)
                monthName = "March - 31 days";
            else if (x == 4)
                monthName = "April - 30 days";
            else if (x == 5)
                monthName = "May - 31 days";
            else if (x == 6)
                monthName = "June - 30 days";
            else if (x == 7)
                monthName = "July - 31 days";
            else if (x == 8)
                monthName = "August - 31 days";
            else if (x == 9)
                monthName = "September - 30 days";
            else if (x == 10)
                monthName = "October - 31 days";
            else if (x == 11)
                monthName = "November - 30 days";
            else 
                monthName = "December - 31 days";

            Console.WriteLine(monthName);
        }
    }
}

----------------------------------------random data is generated in every datatype--------

// Instantiate random number generator using system-supplied value as seed.
var rand = new Random();

// Generate and display 5 random byte (integer) values.
var bytes = new byte[5];
rand.NextBytes(bytes);
Console.WriteLine("Five random byte values:");
foreach (byte byteValue in bytes)
    Console.Write("{0, 5}", byteValue);
Console.WriteLine();

// Generate and display 5 random integers.
Console.WriteLine("Five random integer values:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,15:N0}", rand.Next());
Console.WriteLine();

// Generate and display 5 random integers between 0 and 100.
Console.WriteLine("Five random integers between 0 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(101));
Console.WriteLine();

// Generate and display 5 random integers from 50 to 100.
Console.WriteLine("Five random integers between 50 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(50, 101));
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 1.
Console.WriteLine("Five Doubles.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble());
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 5.
Console.WriteLine("Five Doubles between 0 and 5.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble() * 5);

// The example displays output like the following:
//    Five random byte values:
//      194  185  239   54  116
//    Five random integer values:
//        507,353,531  1,509,532,693  2,125,074,958  1,409,512,757    652,767,128
//    Five random integers between 0 and 100:
//          16      78      94      79      52
//    Five random integers between 50 and 100:
//          56      66      96      60      65
//    Five Doubles.
//       0.943   0.108   0.744   0.563   0.415
//    Five Doubles between 0 and 5.
//       2.934   3.130   0.292   1.432   4.369

================================================================================================

random team generator

Random rnd = new Random();
string[] malePetNames = { "Rufus", "Bear", "Dakota", "Fido",
                          "Vanya", "Samuel", "Koani", "Volodya",
                          "Prince", "Yiska" };
string[] femalePetNames = { "Maggie", "Penny", "Saya", "Princess",
                            "Abby", "Laila", "Sadie", "Olivia",
                            "Starlight", "Talla" };

// Generate random indexes for pet names.
int mIndex = rnd.Next(malePetNames.Length);
int fIndex = rnd.Next(femalePetNames.Length);

// Display the result.
Console.WriteLine("Suggested pet name of the day: ");
Console.WriteLine("   For a male:     {0}", malePetNames[mIndex]);
Console.WriteLine("   For a female:   {0}", femalePetNames[fIndex]);

// The example displays output similar to the following:
//       Suggested pet name of the day:
//          For a male:     Koani
//          For a female:   Maggie

--------------------------------random dice generator-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo6
{
    class Program
    {
        static void Main(string[] args)
        {
            string input = "";
            Random rand = new Random();
            int x = 0;
            do
            {
                Console.WriteLine("Roll dice? (yes, no)");
                input = Console.ReadLine();
                if (input.ToLower() == "yes")
                {
                    x = rand.Next(1, 7);
                    Console.WriteLine("New dice no is " + x);
                }
            }
            while (input.ToLower() != "no");
        }
    }
}

note:indentation is c# is not nessary

------------------------------------triange generator using for --------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo4
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int j = 15; j >= 0; j--)
            {
                for (int t = 0; t <= j; t++)
                {
                    Console.Write("0 ");
                }
                Console.WriteLine();
            }
        }
    }
}
--------------------------------------------------------------------------------------------
                                    Parse and TryParse
_______________________________________________________________________________________________________________________________________________________________________________________

Convert a string representation of number to an integer,using the int.TryParse and intParse method in C#.

If the string cannot be converted, then the int.TryParse method returns false i.e. a Boolean value, whereas int.Parse returns an exception.

Let us see an example of int.Parse method −

eg Parse:

using System.IO;
using System;
class Program {
   static void Main() {
      int res;
      string myStr = "120";
      res = int.Parse(myStr);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

eg TryParse:

using System.IO;
using System;
class Program {
   static void Main() {
      bool res;
      int a;
      string myStr = "120";
      res = int.TryParse(myStr, out a);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

here in str u can also provide a text or word it will return 0 but parse cannot handel it it can only convert

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TryParse
{
    class Program
    {
        static void Main(string[] args)
        {
            int.TryParse(Console.ReadLine(),out int x);
            if (x == 0)
            {
                Console.WriteLine("This is not a valid input");
            }
            else
            {
                Console.WriteLine("You have entered no. " + x);
            }
        }
    }
}


---------------------------------------constants------------------------------------------

the value of pi or gravity doent changes so these types of values are called constants

u should use the keyword const followed by the datatype

eg:

const var asd=1;
const double pi=3.14;

u cannot change it later in run time

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Constants
{
    class Program
    {
        static void Main(string[] args)
        {
            const double gravityForce = 9.8;
            double PI = 3.14159265359;
            

            Console.WriteLine("Gravity force is " + gravityForce + " and PI is " + PI);
        }
    }
}


-------------------------------------string manuplation-------------------------------------

the string is used to represent words and sentences

indexes-
_________

index is the position of the particular character eg - there is a word called apple the index of a is 0 and p is 1,2 and l is 3 and e is 4

u can acces the position by [] brackets

like this eg :

console.WriteLine(wordvariable[postition]);

trim-
_________

this used to remove the extra or un nessary white spaces frount and back

eg : apple mango        banana 

after using trim 

eg== apple mango banana

syntax:

variable.Trim();

toupper,tolower-
_________

this used to convert to upper case all letters and lower

syntax:

variable.ToUpper();

variable.ToLower();

length-
________

this will print length of the word

variable.Length();

replace-
__________

this is used to replace one or more letters in a word

syntax:

variable.replace('word to be replaced','word to be replaced with');

index of-
___________
this is used to find the position of a particular letters

syntax:

variable.IndexOf('letter');

last index of-
__________________
same as the IndexOf but calculates from last

syntax:

variable.LastIndexOf('letter');

Substring-
___________
this prints from the position which is mentioned

eg games - postion is given as 2 then i will print from mes this can also give a range like this 2,2 this will print me

syntax:

variable.Substring(position);
(or)
variable.Substring(position,range);

remove-
__________
remove does the reverse of the substring 

syntax:

variable.remove(position);
(or)
variable.remove(position,range);

insert-
__________

this used to insert the words or the letter at mentioned position

syntax:

variable.insert(position,"word");
variable.insert(0,"the");

escape sequence-
__________________

these are the characters that cannot be represented in original form eg u cant print next line or " direcetly so u can represent it by \ back slash

like \" and \\ to represent " and \ and for new line use \n

\t-tab spaces

\n-new line

\" - "
\\ - \

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EscapeSequences
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(" And Jon said \"Bend \t \t \n \a the knee \" ");
            Console.WriteLine("D:\\Movies");
        }
    }
}


string interpolation-
_____________________________________________

a print statements can be easily manuplated like this porms

eg:
Console.WriteLine("hello"+name+name2);
(or)
Console.WriteLine("hello{0}{1}",name,name2);
(or)
Console.WriteLine($"hello {name} {name2}");

they all are same

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringManipulationPart2
{
    class Program
    {
        static void Main(string[] args)
        {
            string tvShow = "Game of Thrones";

            // Index of
            Console.WriteLine(tvShow.IndexOf('o'));
            // Last index of
            Console.WriteLine(tvShow.LastIndexOf('o'));
            // Substring
            Console.WriteLine(tvShow.Substring(4));
            // Remove
            Console.WriteLine(tvShow.Remove(4));
            // Insert
            Console.WriteLine(tvShow.Insert(0,"The "));

        }
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringManipulationPart1
{
    class Program
    {
        static void Main(string[] args)
        {
            string movieName = "    lord of the RINGS    ";
            // Indexes
            Console.WriteLine(movieName[17]);

            // Trim 
            Console.WriteLine(movieName.Trim());

            // Upper Case
            Console.WriteLine(movieName.ToUpper().Trim());

            // Lower Case
            Console.WriteLine(movieName.Trim().ToLower());

            // Length
            Console.WriteLine(movieName.Length);
            Console.WriteLine(movieName.Trim().Length);


            // Reaplce
            Console.WriteLine(movieName.Replace('l','L').Trim());
        }
    }
}


wg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringInterpolation
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "";
            Console.WriteLine("What is your name?");
            name = Console.ReadLine();

            //Console.WriteLine("Welcome back " + name);
            //Console.WriteLine("Welcome Back {0}", name);

            Console.WriteLine($"Welcome back again {name}");
        }
    }
}



----------------------------------------maths function_______________________________________________________________

ceiling-

if a decimal value is provided to it will round off the next high whole number 

eg :
2.2 - 3

3.5 - 4

4.9 - 5

syntax:

Math.ceiling(variable);

floor-

opposite to ceiling

syntax:

Math.floor(variable);

round-

it will round off the decimal

syntax:

Math.round(variable);

for round u can also mention the number of decimal values to be there

syntax:

Math.round(variable,number_of_decimal_places);

eg

Math.round(variable,2); -> 4.22

truncate-

this just removes te decimal points

syntax:

Math.truncate(variable);

max-

finds the maximum number

Math.Max(variable1,variable2);

min-

finds the minimum number

maths.min(var1,var2);

sqrt-

finds the square root

Math.sqrt(variable);

pow-

used to give power

math.pow(variable,power);

pi-

generates the pi value

pi-math.pi

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathPart2
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 9;
            int y = 4;
            // Max
            Console.WriteLine("Max : " + Math.Max(x,y));
            // Min
            Console.WriteLine("Min : " + Math.Min(x, y));
            // sqrt
            Console.WriteLine("SQRT : " + Math.Sqrt(y));
            // pow
            Console.WriteLine("POW : " + Math.Pow(3,2));
            // PI
            
        }
    }
}


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathPart1
{
    class Program
    {
        static void Main(string[] args)
        {
            double x = 5.227;
            // ceiling
            Console.WriteLine("Ceiling : " + Math.Ceiling(x));
            // floor
            Console.WriteLine("Floor : " + Math.Floor(x));
            // round
            Console.WriteLine("Round : " + Math.Round(x,2));
            //truncate
            Console.WriteLine("Truncate : " + Math.Truncate(x));
        }
    }
}


------------------------------------egs--------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RandomNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int x = 0;
            x = rand.Next(1,13);
            Console.WriteLine("Month : " + x);

            double y = 0;
            y = rand.NextDouble() * 10;
            Console.WriteLine("Random double no is " + Math.Round(y,2));
        }
    }
}

eg :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LoopsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            // Even Numbers
            //for (int x = 0; x < 501; x++)
            //{
            //    if(x%2==0)
            //        Console.Write(x + ", ");
            //}

            for (int i = 1; i <= 20; i++)
            {
                for (int j = 1; j <= i; j++)
                {
                    Console.Write("0");
                }
                Console.WriteLine();
            }
        }
    }
}


eg:


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ForLoop
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int i = 10; i >= 1; i--)
            {
                if (i == 2)
                    break;
                Console.WriteLine("The value of variable i is : " + i);
            }
        }
    }
}

--------------------------------oops------------------------------------------------------

oops - object orented programing structure

What is object-oriented programming?
Object-Oriented Programming (OOP) refers to a type software design
programmers define data type of a data structure, but also the types of
operations (functions) that can be applied to the data structure.
In this way the data structure becomes an object that includes both data and
functions. 

Class : A category of objects. The class defines all the common properties of the
different objects that belong to it.
Object : Refers to a particular instance of a class where the object can be a
combination of variables, functions, and data structures.
Method : A combination of instructions grouped together to achieve some result. It
may take arguments and return result.
Property : A member that provides a flexible mechanism to read, write, or compute
the value of a private field

eg of oops:

Vehicle

Wheeled vehicles Non-wheeled vehicles

Four wheeled vehicle Two wheeled vehicle Sea vehicle Air vehicles

Color, Manufacturer, Max Speed, Carriage Capacity, Gasoline or Electricity

Class
Sub class Sub class
Sub class Sub class Sub class Sub class
Start(), Stop(), Drive(), Refuel(), RunAtMaxSpeed(), TransportPeople()

Properties
Methods
Object
BMW X4
Ferrari Enzo
Kawasaki KX450F
Boeing 787


The Four Pillars of OOP
Inheritance : The process of creating the new class by extending the existing class or the process of
inheriting the features of base class is called as inheritance.
Polymorphism : Poly means many and Morph means forms. Polymorphism is the process in which an
object or function take different forms.
Abstraction : Abstraction is the process of showing only essential features of an object to the outside
world and hide the other irrelevant information.


Methods part 1 (The basics)

DRY

A method is a code block that contains a series of statements. A program
causes the statements to be executed by calling the method and specifying
any required method arguments.


Method Signature

Method name and its parameters types (but not the parameter names) are
part of the signature.

Methods part 2 (parameters and return types)

Methods part 3 (value vs reference)

Passing by value (using a copy)
Passing by reference (using the variable itself)
ref keyword
out keyword

Methods part 4 (overloaded methods)

Classes
template or blueprint of the methods, variables and properties in a
particular kind of object

Inheritance
Inheritance enables new objects to inherit the properties of existing objects.
A class that is used as the basis for inheritance is called a superclass or base
class. A class that inherits from a superclass is called a subclass or derived
class



Encapsulation
Encapsulation is a concept that binds together the data and methods that
manipulate the data, and that keeps both safe from outside interference
and misused.

Public: Access is not restricted.
Protected: Access is limited to the containing class or types derived from the
containing class.
Private: Access is limited to the containing type.
Internal: Access is limited to the current assembly.
Protected internal: Access is limited to the current assembly or types derived
from the containing class.


Polymorphism
Polymorphism means having many forms. usually expressed as 'one
interface, multiple functions’.
Static type or compile time
Overloading
Dynamic type or runtime
Overriding allows you to change the functionality of a method in a child
class.
virtual
override
new


Abstraction is a concept or an idea not associated with any specific instance.

---------------------------hard code----------------------------------------------------------

ref method-

how to work on the variable inside the method aka function without declaring the global variable or using the same variable the ref key word is used for this purpoe

eg:

//outside function

a=10;
b=11;
Console.WriteLine($"the output is {a} and {b}"); //before going inside the function
function(a,b);                                   //in function
Console.WriteLine($"the output is {a} and {b}"); //out the function   

static void function(int x,int y){
//inside the function
x=20;
y=30;
Console.WriteLine($"the output is {x} and {y}");
}

//output

the output is 10 and 11 //before
the output is 20 and 30 //in function
the output is 10 and 11 //out

to have same values changed in the real variable use the ref method eg

eg:

//outside function

a=10;
b=11;
Console.WriteLine($"the output is {a} and {b}"); //before going inside the function
function(ref a,ref b);                                   //in function
Console.WriteLine($"the output is {a} and {b}"); //out the function   

static void function(ref int x,ref int y){
//inside the function
x=20;
y=30;
Console.WriteLine($"the output is {x} and {y}");
}

//output

the output is 10 and 11 //before
the output is 20 and 30 //in function
the output is 20 and 30 //out

before uing this reference method u should intialize and declare the variable

if u want to intialize but not declare then use "out" key word the use is same and the purpose is also the same



method overloading-
_____________________________________________

the same method name can be used for 2 methods with a difference of number of arguments or their datatype



abstraction-
__________________

if u want to directly inheret a function aka method from a class without defining it u can do it by abstract key word after inhereting from the parrent using ":"

use the key word before the class and the function that u are going to use like this 

class main{

    main(){
        xyz
    }
}

class parent{ 
    override method a(){
        xyz
    }
}

abstract class child{
    abstract method a();
}

if we call the method a from the clid it will run the parrents a method 



#region hack in visual stdio-
_____________________________________________

u can hid a region easily in vs by comment lines specifing a reagion this will enable the code hiding when nessay and easy ur Tasks

syntax:

#region region-name
code;
#endregion

a + or ▽ or - will appear click on it to hide this leaves no change in code or its working

sealed classes-
__________________

any class that should not be inhereted by any classes are knowen as sealed class

you can seal a class by the keyword called sealed

syntax:

sealed class sealedclassname{
    action block;
}


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SealedClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Dogs dog = new Dogs();
            
        }
    }

    sealed class Animal
    {
        public string name;
    }

    class Dogs : Animal // you will need to remove the sealed keyword in order for inheritance to work
    {
        public string dogBreed;

    }
}






static class-
__________________

this can only have staict variables and method

and u cannot inheret non static class from static class viceversa

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StaticClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animal.GetAge();
        }
    }

    static class Animal
    {
        static public string name;

        static public void GetAge()
        {
            Console.WriteLine(DateTime.Now.Year - DateTime.Now.AddYears(-4).Year);
        }
    }
    
}






nested classes-
_____________________________________________

class having a class is known as nested class

to use the nested class u need to create an object for both classed 

syntax:

class main{
    a classa=new a();
    a.b classb=new a.b();
}

class a{
    class b{
        actionblock;
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals animal = new Animals();
            Animals.Dogs dog = new Animals.Dogs();
            Animals.Cats cat = new Animals.Cats();
            
        }
    }

    class Animals
    {
        public string animalName;
        public string animalCountry;

        public class Dogs
        {
            public string dogBreed;
            public string dogNickname;
        }

        public class Cats
        {
            public string catName;
        }

    }
}







partial classes-
___________________________

u can create 2 classes in two different classes usingh keyword partial before the class 

eg:

program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals animal = new Animals();
            animal.GetName();
        }
    }
}

class2.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    partial class Animals
    {
        public DateTime birthDate;
        public string animalBreed;

        public void SayHi()
        {

        }
    }
}


class1.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    partial class Animals
    {
        public string animalColor;
        public string animalName;

        public void GetName()
        {
            Console.WriteLine("My name is max, I am a dog");
        }
    }
}







namespaces -
___________________________

name spaces is like the mega container for the classes u can call the name spaces directly in the porgram at top begning

like eg:

using System;

this name space contains functions like console.WriteLine()

u can also create a own namespaces like 

namespace namespace-name{
    class class-name{

    }
}

to call the namespaces from the classes u can use "." operator eg:

namespace.class.function();

like class the namespace can also created inside the namespace


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MyOwnNamespace.GameOfThrones;

namespace Namespaces
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine();
            MyOwnNamespace.Animal animal = new MyOwnNamespace.Animal();
            animal.SayHi();
            //MyOwnNamespace.GameOfThrones.HouseStark.sayQuote();
            HouseStark.sayQuote();
        }
    }
}

namespace MyOwnNamespace
{
    class Animal
    {
        public string animalColor;

        public void SayHi()
        {
            Console.WriteLine("Hi from the custom namespace");
        }
    }

    class Trainers
    {
    }

    namespace GameOfThrones
    {
        class HouseStark
        {
            public static void sayQuote()
            {
                Console.WriteLine("The north remembers");
            }
        }
    }
}







structs--------
___________________________

as asame as c programing language used to define a collection of datatypes as an object

syntax:

struct Employee{
    public string employeename;
    public string job;
    private int Salary;

    public decimal Salary{
        get{return salary;}
        set {salary = value;}
    }
}

you should call it like class 

eg:

class main{
    static void main(){
        Employee newemp = new Employee(); //object declaration
        newemp.employeename="value";
        }
}

u can even code in the struct it will run the object gets in the scope

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Structs
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee newEmployee = new Employee();
            newEmployee.employeeName = "James";
            newEmployee.employeeJob = "Programmer";
            newEmployee.Salary = 5000;
            Console.WriteLine($"Employee name is {newEmployee.employeeName} and his job is {newEmployee.employeeJob} and starting salary is {newEmployee.Salary}");
            newEmployee.SayHi();
        }
    }

    struct Employee
    {
        public string employeeName;
        public string employeeJob;
        private decimal salary;

        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }

        public void SayHi()
        {
            Console.WriteLine("Hi from the method in struct");
        }
    }
}






class vs structs - 
___________________________

Class

✓ Declared with class keyword
✓ Supports inheritance
✓ User-defined constructors can be implemented
✓ Data members can be initialized in the class
definition
✓ Reference type (Heap)

Struct

✓ Declared with struct keyword
✓ Doesn’t Support inheritance
✓ User-defined constructors can’t be implemented
✓ Data members can’t be initialized in the struct
definition
✓ Value type (Stack)

The majority of types in a framework should be classes, but if instances of the type are small and
commonly short-lived or are commonly embedded in other objects define a struct





enumerations-
__________________

enum are only visible inside a class it can be declared anywhere in namespace also in this case its only visble inside the namespace

syntax:

enum name{
    values,
    values
}

eg:

enum weekdays{
    mon,
    tues,
    Wed,
    fri
}

it can be used by "." operator

weekDays.mon.ToString();

u can have a custom variable also 

like 

day='monday',

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Enumerations
{
    class Program
    {
        static void Main(string[] args)
        {
            string weekDayName = WeekDay.Monday.ToString();
            WeekDay day = WeekDay.Sunday;

            Console.WriteLine((int)day);
        }

    }

    enum WeekDay
    {
        Monday,
        Tuesday,
        Wednesday,
        Thursday,
        Friday = 40,
        Saturday = 50,
        Sunday = 60
    }
}









this keyword-
__________________

this is a keyword used to access the internal value like u are sending an argument from out side the class that might change the actual value the use this to see the last value

eg:

ab(){
    a=asd
    b=asd
    ca ca=new ca()
    ca.bc()
}

class ca{

    a=a
    b=b

    bc(){
        Console.WriteLine(a+b)
        Console.WriteLine(this.a+this.b)

    }

}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ThisKeyword
{
    class Program
    {
        static void Main(string[] args)
        {
            Person person = new Person();
            person.DisplayName("James","Morrison");
        }
    }

    class Person
    {
        string firstName;
        string lastName;

        public void DisplayName()
        {
            Console.WriteLine(firstName + " " + lastName);
        }

        public void DisplayName(string firstName, string lastName)
        {
            Console.WriteLine(firstName + " " + lastName);
            Console.WriteLine(this.firstName + " " + this.lastName);
        }

        public Person()
        {
            firstName = "David";
            lastName = "Smith";
        }
    }
}




output will be -
_____________________________________________

asdasd
ab

syntax to use this -

this.variablename

Interfaces-
__________________

Interfaces
An interface contains definitions for a group of related
functionalities that a class or a struct can implement.
Think of it as contract that all the classes inheriting the interface
should follow. The interface defines the 'what' part of the contract
and the deriving classes define the 'how' part of the contract.

interface is only used to declar and commands 

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):

syntax:

public interface Iname{
    //do add i in the name cause it will help us to defrentiate
    declaration of methods
}

eg:

// Interface
interface IAnimal 
{
  void animalSound(); // interface method (does not have a body)
}

// Pig "implements" the IAnimal interface
class Pig : IAnimal 
{
  public void animalSound() 
  {
    // The body of animalSound() is provided here
    Console.WriteLine("The pig says: wee wee");
  }
}

class Program 
{
  static void Main(string[] args) 
  {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
  }
}




eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interfaces
{
    class Program
    {
        static void Main(string[] args)
        {
            Dogs dog = new Dogs();
            dog.Attack();
            dog.SayHi();
            dog.Run();
            
        }
    }

    public interface IAnimals
    {
        void Run();
    }

    public interface IDogCommands : IAnimals
    {
        void Stay();
        void Sit();
        void Attack();

        string DogName
        {
            set;
            get;
        }
    }

    interface Trainer
    {

    }

    class Animals
    {
        string AnimalName;

        public void SayHi()
        {
            Console.WriteLine("Hi from the animals class");
        }
    }

    class Dogs : Animals, IDogCommands, Trainer
    {
        private string DogBreed;

        public void Stay()
        {
            Console.WriteLine("Dog is staying");
        }

        public void Sit()
        {
            Console.WriteLine("Dog is sitting");
        }

        public void Attack()
        {
            Console.WriteLine("Dog is attacking");
        }

        public void Run()
        {
            Console.WriteLine("Animal is running");
        }

        public string DogName { get; set; }
    }
}







interfaces vs abstract class - 
_____________________________________________

Similarities

‣ Can't be instantiated directly
‣ Must implement all its members
‣ Can contain events, methods, and properties.

Differences

Interface

‣ Can’t have method implementations
‣ Allow multiple inheritance
‣ Can’t have access modifiers, everything is public
‣ Can’t contain variables

Abstract Class

‣ Can have method implementations
‣ Doesn’t allow multiple inheritance
‣ Can contain access modifiers
‣ Can contain variables 



---------------------------------------------------------------------------------------------------
sample program of list

animal.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo8
{
    class Animal
    {
        private string name;
        private DateTime birthDate;
        private Origions origin;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public DateTime BirthDate
        {
            get { return birthDate; }
            set { birthDate = value; }
        }

        public Origions Origin
        {
            get { return origin; }
            set { origin = value; }
        }
    }

    interface Dog
    {
        void Eat();
        void Drink();
        void Sit();
        void Sleep();
        void SayHi();

    }

    class GermanShepard : Animal, Dog
    {
        private Gender gender;
        private double weight;
        private bool securityGuard;
        private TrainingAbility training;
        private Sizes size;


        public Gender Gender
        {
            get { return gender; }
            set { gender = value; }
        }

        public double Weight
        {
            get { return weight; }
            set { weight = value; }
        }

        public bool SecurityGuard
        {
            get { return securityGuard; }
            set { securityGuard = value; }
        }

        public TrainingAbility Training
        {
            get { return training; }
            set { training = value; }
        }

        public Sizes Size
        {
            get { return size; }
            set { size = value; }
        }

        public void Eat()
        {
            Console.WriteLine("Dog is eating");
        }
        public void Eat(string dogName)
        {
            Console.WriteLine($"{dogName} is eating");
        }
        public void Drink()
        {
            Console.WriteLine("Dog is drinking");
        }
        public void Drink(string dogName)
        {
            Console.WriteLine($"{dogName} is drinking");
        }
        public void Sit()
        {
            Console.WriteLine("Dog is sitting");
        }
        public void Sit(string dogName)
        {
            Console.WriteLine($"{dogName} is sitting");
        }
        public void Sleep()
        {
            Console.WriteLine("Dog is sleeping");
        }
        public void Sleep(string dogName)
        {
            Console.WriteLine($"{dogName} is sleeping");
        }

        public void SayHi()
        {
            Console.WriteLine("Hiii \"in dogs language :D\"");
        }

        public void DisplayDogInformation()
        {
            Console.WriteLine($"The dog name is {Name} from {Origin}, " +
                $"was born on {BirthDate.ToShortDateString()} " +
                $"{Name} is a {Gender} and weights {Weight} kilos and its size is {Size} ");
        }
    }

    enum Gender
    {
        Male,
        Female
    }

    enum Sizes
    {
        Small,
        Medium,
        Large
    }
    enum TrainingAbility
    {
        Easy,
        Medium,
        Hard
    }
    enum Origions
    {
        Afghanistan,
        Albania,
        Algeria,
        Angola,
        Argentina,
        Australia,
        Austria,
        Bahamas,
        Bahrain,
        Bangladesh,
        Belarus,
        Belgium,
        Bolivia,
        Botswana,
        Brazil,
        Brunei,
        Bulgaria,
        BurkinaFaso,
        Burundi,
        Cambodia,
        Cameroon,
        Canada,
        Chad,
        Chile,
        China,
        Colombia,
        Comoros,
        CostaRica,
        Croatia,
        Cuba,
        Cyprus,
        CzechRepublic,
        Denmark,
        Ecuador,
        Egypt,
        ElSalvador,
        Estonia,
        Ethiopia,
        Finland,
        France,
        Gabon,
        Gambia,
        Georgia,
        Germany,
        Ghana,
        Greece,
        Greenland,
        Guatemala,
        Haiti,
        Honduras,
        HongKong,
        Hungary,
        Iceland,
        India,
        Indonesia,
        Iran,
        Iraq,
        Ireland,
        Israel,
        Italy,
        Jamaica,
        Japan,
        Jordan,
        Kazakhstan,
        Kenya,
        Kosovo,
        Kuwait,
        Latvia,
        Lebanon,
        Liberia,
        Libya,
        Liechtenstein,
        Lithuania,
        Luxembourg,
        Macedonia,
        Madagascar,
        Malawi,
        Malaysia,
        Maldives,
        Mali,
        Malta,
        Mauritius,
        Mexico,
        Moldova,
        Monaco,
        Mongolia,
        Montenegro,
        Morocco,
        Mozambique,
        Namibia,
        Nepal,
        Netherlands,
        NewZealand,
        Nicaragua,
        Niger,
        Nigeria,
        NorthKorea,
        Norway,
        Oman,
        Pakistan,
        Palestine,
        Panama,
        Paraguay,
        Peru,
        Philippines,
        Poland,
        Portugal,
        PuertoRico,
        Qatar,
        Romania,
        Russia,
        Rwanda,
        SaudiArabia,
        Senegal,
        Serbia,
        Seychelles,
        SierraLeone,
        Singapore,
        Slovakia,
        Slovenia,
        Somalia,
        SouthAfrica,
        SouthKorea,
        SouthSudan,
        Spain,
        SriLanka,
        Sudan,
        Swaziland,
        Sweden,
        Switzerland,
        Syria,
        Taiwan,
        Tanzania,
        Thailand,
        Togo,
        Tonga,
        Tunisia,
        Turkey,
        Uganda,
        Ukraine,
        UnitedArabEmirates,
        UnitedKingdom,
        UnitedStatesofAmerica,
        Uruguay,
        Uzbekistan,
        VaticanCity,
        Venezuela,
        Vietnam,
        Yemen,
        Zambia,
        Zimbabwe
    }
}


program.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo8
{
    class Program
    {
        static void Main(string[] args)
        {
            GermanShepard max = new GermanShepard();
            max.Origin = Origions.Germany;
            max.Name = "Max";
            max.BirthDate = new DateTime(2017, 10, 10);
            max.Gender = Gender.Male;
            max.Weight = 32.54;
            max.SecurityGuard = false;
            max.Size = Sizes.Large;
            max.Training = TrainingAbility.Easy;
            max.DisplayDogInformation();
            max.Sit(max.Name);
            max.Eat();
            max.SayHi();
        }


    }
}

--------------------------------------------------------------------------------------------------------

movie program

program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MovieNamespace;

namespace AssignmentNo7
{
    class Program
    {
        static void Main(string[] args)
        {
            MovieNamespace.Movie InceptionInstance = new MovieNamespace.Movie();
            MovieNamespace.Movie WildTalesInstance = new MovieNamespace.Movie();

            InceptionInstance.MovieName = "Inception";
            InceptionInstance.Rate = 8.8;
            InceptionInstance.ReleaseDate = new DateTime(2010, 7, 16);

            InceptionInstance.Languages = new Language[3];
            InceptionInstance.Languages[0] = Language.English;
            InceptionInstance.Languages[1] = Language.French;
            InceptionInstance.Languages[2] = Language.Japanese;

            InceptionInstance.Countries = new Country[2];
            InceptionInstance.Countries[0] = Country.UnitedStatesofAmerica;
            InceptionInstance.Countries[1] = Country.UnitedKingdom;

            InceptionInstance.Genres = new Genres[3];
            InceptionInstance.Genres[0] = Genres.Action;
            InceptionInstance.Genres[1] = Genres.Adventure;
            InceptionInstance.Genres[2] = Genres.SciFi;
            
            
            WildTalesInstance.MovieName = "Wild Tales";
            WildTalesInstance.Rate = 8.1;
            WildTalesInstance.ReleaseDate = new DateTime(2014, 8, 21);

            WildTalesInstance.Languages = new Language[1];
            WildTalesInstance.Languages[0] = Language.Spanish;

            WildTalesInstance.Countries = new Country[2];
            WildTalesInstance.Countries[0] = Country.Argentina;
            WildTalesInstance.Countries[1] = Country.Spain;

            WildTalesInstance.Genres = new Genres[3];
            WildTalesInstance.Genres[0] = Genres.Comedy;
            WildTalesInstance.Genres[1] = Genres.Drama;
            WildTalesInstance.Genres[2] = Genres.Thriller;

            InceptionInstance.DisplayMovieInformation();
            WildTalesInstance.DisplayMovieInformation();
        }
    }
}

movie.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieNamespace
{
    struct Movie
    {
        private string movieName;
        private double rate;
        private DateTime releaseDate;
        private Genres[] genres;
        private Language[] languages;
        private Country[] countries;

        public string MovieName
        {
            get { return movieName; }
            set { movieName = value; }
        }

        public double Rate
        {
            get { return rate; }
            set { rate = value; }
        }

        public DateTime ReleaseDate
        {
            get { return releaseDate; }
            set { releaseDate = value; }
        }

        public Language[] Languages
        {
            get { return languages; }
            set { languages = value; }
        }

        public Country[] Countries
        {
            get { return countries; }
            set { countries = value; }
        }

        public Genres[] Genres
        {
            get { return genres; }
            set { genres = value; }
        }

        public void DisplayMovieInformation()
        {
            Console.Write($"Movies : {MovieName}" +
                $"\nRate : {Rate} out of 10" +
                $"\nReleased on: {ReleaseDate.ToShortDateString()}" +
                $"\nLanguages: ");

            for (int i = 0; i < Languages.Length; i++)
            {
                Console.Write(Languages[i]);
                if (i < Languages.Length - 1)
                    Console.Write(", ");
                else
                    Console.WriteLine();
            }
            Console.Write("Countries : ");
            for (int i = 0; i <Countries.Length; i++)
            {
                Console.Write(Countries[i]);
                if (i < Countries.Length - 1)
                    Console.Write(", ");
            }
            Console.Write("\nGenres : ");
            for (int i = 0; i < Genres.Length; i++)
            {
                Console.Write(Genres[i]);
                if (i < Genres.Length - 1)
                    Console.Write(", ");
                else
                    Console.WriteLine();
            }
            Console.WriteLine("---------------------------------------");
        }
    }


    #region Lists

    #region Languages List
    enum Language
    {
        Arabic,
        Azerbaijani,
        Bengali,
        Czech,
        Dutch,
        English,
        French,
        German,
        Greek,
        Hindi,
        Hungarian,
        Italian,
        Japanese,
        Javanese,
        Korean,
        Kurdish,
        Malay,
        Mandarin,
        Persian,
        Polish,
        Portuguese,
        Romanian,
        Russian,
        Spanish,
        Swedish,
        Thai,
        Turkish,
        Ukrainian,
        Urdu,
        Vietnamese,
        Zulu
    }
    #endregion

    #region Countries List
    enum Country
    {
        Afghanistan,
        Albania,
        Algeria,
        Angola,
        Argentina,
        Australia,
        Austria,
        Bahamas,
        Bahrain,
        Bangladesh,
        Belarus,
        Belgium,
        Bolivia,
        Botswana,
        Brazil,
        Brunei,
        Bulgaria,
        BurkinaFaso,
        Burundi,
        Cambodia,
        Cameroon,
        Canada,
        Chad,
        Chile,
        China,
        Colombia,
        Comoros,
        CostaRica,
        Croatia,
        Cuba,
        Cyprus,
        CzechRepublic,
        Denmark,
        Ecuador,
        Egypt,
        ElSalvador,
        Estonia,
        Ethiopia,
        Finland,
        France,
        Gabon,
        Gambia,
        Georgia,
        Germany,
        Ghana,
        Greece,
        Greenland,
        Guatemala,
        Haiti,
        Honduras,
        HongKong,
        Hungary,
        Iceland,
        India,
        Indonesia,
        Iran,
        Iraq,
        Ireland,
        Israel,
        Italy,
        Jamaica,
        Japan,
        Jordan,
        Kazakhstan,
        Kenya,
        Kosovo,
        Kuwait,
        Latvia,
        Lebanon,
        Liberia,
        Libya,
        Liechtenstein,
        Lithuania,
        Luxembourg,
        Macedonia,
        Madagascar,
        Malawi,
        Malaysia,
        Maldives,
        Mali,
        Malta,
        Mauritius,
        Mexico,
        Moldova,
        Monaco,
        Mongolia,
        Montenegro,
        Morocco,
        Mozambique,
        Namibia,
        Nepal,
        Netherlands,
        NewZealand,
        Nicaragua,
        Niger,
        Nigeria,
        NorthKorea,
        Norway,
        Oman,
        Pakistan,
        Palestine,
        Panama,
        Paraguay,
        Peru,
        Philippines,
        Poland,
        Portugal,
        PuertoRico,
        Qatar,
        Romania,
        Russia,
        Rwanda,
        SaudiArabia,
        Senegal,
        Serbia,
        Seychelles,
        SierraLeone,
        Singapore,
        Slovakia,
        Slovenia,
        Somalia,
        SouthAfrica,
        SouthKorea,
        SouthSudan,
        Spain,
        SriLanka,
        Sudan,
        Swaziland,
        Sweden,
        Switzerland,
        Syria,
        Taiwan,
        Tanzania,
        Thailand,
        Togo,
        Tonga,
        Tunisia,
        Turkey,
        Uganda,
        Ukraine,
        UnitedArabEmirates,
        UnitedKingdom,
        UnitedStatesofAmerica,
        Uruguay,
        Uzbekistan,
        VaticanCity,
        Venezuela,
        Vietnam,
        Yemen,
        Zambia,
        Zimbabwe
    }
    #endregion

    #region Genres
    enum Genres
    {
        Action,
        Adventure,
        Animation,
        Biography,
        Comedy,
        Crime,
        Documentary,
        Drama,
        Family,
        Fantasy,
        History,
        Horror,
        Musical,
        Mystery,
        Romance,
        SciFi,
        Sport,
        Thriller,
        War,
        Western
    }
    #endregion
    #endregion
}

------------------------------------------------------------------------------------------------------------

Association
 • It is a relationship between objects.
 • Usually defined as “is-a” or “using” relationship.
 • Both objects have independent life-cycle.
 • Each object owns their actions and will not affect other object.
Aggregation
 • Specialized form of Association.
 • Usually defined as “has-a” relationship.
 • Each object has an independent life-cycle.
 • Ownership between objects.
Composition
 • Specialized form of Aggregation.
 • Usually defined as “part-of” relationship.
 • Child Object has dependent life-cycle.
 • Ownership between objects. 






_______________________________________________________________________________________________________________________________________________________________________________________

ls -6 0

last seen - https://www.youtube.com/watch?v=GhQdlIFylQ8&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i 

last seen - youtube.com/watch?v=hxIb99-Z8_I&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i&index=4
