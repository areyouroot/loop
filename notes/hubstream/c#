we need to download and work in visual studio
and in visual stdio select the community edition and the package is .NET desktop developement

after installing open a directory and open that dir with visual studio and select new project and start the type of application that u are going to develope select the options and frame work version 

and now a template is generated for you to work make sure you dont have any old apps in that folder if that exist its fine still it can some times overlap

for me i have choose "new -> new project -> console app (.net framework)

the new generated program will be like having a file called program.cs and the content will be 

note : the text behind // are meessages this will not reflect in original code they are only for reference

----------------------------------------code----------------------------------------------

using System;                           //these are header files
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program              //classes
    {
        static void Main(string[] args) //functions or aka method
        {
            //here is where the actual code is typed and first executed
        }
    }
}

------------------------------------------------------------------------------------------

-------------------------------hello world program----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World");
            
        }
    }
}
---------------------------------------------------------------------------------------------


-------------------------first program to print hello world-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");
        }
    }
}

------------------------------------------------------------------------------------------

select 2nd play button "run without debugging"

to execute the program fully use first start button but the program will be terminated after execution u can stuck it by demanding a input

to get input use 

    Console.ReadLine();

full program

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            Console.ReadLine();
        }
    }
}

to print the line without the next line use 

            Console.Write("hello world");

this prints in same line

_______________________variables__________________________________________________________

variables are use to store data in a program for more pls google it

C# Variables
Variables are containers for storing data values.

In C#, there are different types of variables (defined with different keywords), for example:

int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false
var - can store anything for float mention f at last of the number d - decimals or value in actual float like 2.9 or string etc ..........

sample for float double and decimal:

code :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FloatingPointNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            float f_no = 0.0f;
            double d_no = 0.0d;
            decimal m_no = 0.0m;

            f_no = 1 / 3f;
            d_no = 1 / 3d;
            m_no = 1 / 3m;

            //place holder
            Console.WriteLine("Float no. is {0}", f_no);
            Console.WriteLine("Double no. is {0}", d_no);
            Console.WriteLine("Decimal no. is {0}", m_no);
        }
    }
}


output:

    Float no. is 0.3333333
    Double no. is 0.333333333333333
    Decimal no. is 0.3333333333333333333333333333
    Press any key to continue . . .


Declaring (Creating) Variables
To create a variable, you must specify the type and assign it a value:

Syntax
type variableName = value;
Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.

To create a variable that should store text, look at the following example:

Example
Create a variable called name of type string and assign it the value "John":

string name = "John";
Console.WriteLine(name);

Other Types
A demonstration of how to declare variables of other types:

Example
int myNum = 5;
double myDoubleNum = 5.99D;
char myLetter = 'D';
bool myBool = true;
string myText = "Hello";

the other datatypes related to numbers are given as "./number datatypes.png" 

Name .NET Type Size Range
sbyte System.SByte 1 byte -128 to 127
byte System.Byte 1 byte 0 to 255
short System.Int16 2 bytes -32,768 to 32,767
ushort System.UInt16 2 bytes 0 to 65,535
int System.Int32 4 bytes -2,147,483,648 to 2,147,483,647
uint System.UInt32 4 bytes 0 to 4,294,967,295
long System.Int64 8 bytes -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
ulong System.UInt64 8 bytes 0 to 18,446,744,073,709,551,615
float System.Single 4 bytes 7 digits 1.5 x 10^-45 to 3.4 x 10^38
double System.Double 8 bytes 15-16 digits 5.0 x 10^-324 to 1.7 x 10^308
decimal System.Decimal 16 bytes 28-29 decimal places 1.0 x 10^-28 to 7.9 x 10^28




the variables can be concardinated in write line with + sign eg program with output

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            int myNum = 5;
            double myDoubleNum = 5.99D;
            char myLetter = 'D';
            bool myBool = true;
            string myText = "Hello";

            Console.WriteLine("int " + myNum );
            Console.WriteLine("double " + myDoubleNum + " number");
            Console.WriteLine("char " + myLetter );
            Console.WriteLine("bool " + myBool + " haha");
            Console.WriteLine("string " + myText );


            Console.ReadLine();
        }
    }
}


output:

hello world
int 5
double 5.99 number
char D
bool True haha
string Hello

-------------------------------------sample program2 for variables-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Variables
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 2;
            Console.WriteLine("Number x is " + x);
            x = 5;
            Console.WriteLine("Number x is " + x);

            double double_num = 0.0d;
            float float_num = 0.0f;
            decimal decimal_num = 0.0m;

            double_num = 9.8;
            float_num = 5.5f;
            decimal_num = 100.250m;

            Console.WriteLine("Double is " + double_num + " float is " + float_num + " decimal is "+decimal_num);

            string firstName, lastName, House;
            firstName = "Jon";
            lastName = " Snow";
            House = "Stark";


            Console.Write("Hello, " + firstName +  lastName + " of House Stark");

            bool IsWorking;

            IsWorking = true;

            Console.WriteLine(IsWorking);

            int sum;
            sum = 0;

            int number1, number2;

            number1 = 5;
            number2 = 100;
            sum = number2;
            Console.WriteLine(sum);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________

__________________________________________sample program for var---------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace var
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            string name = "faheem";

            var test = name;
            Console.WriteLine(test);
        }
    }
}

----------------------------------------------------------------------------------------------

to find the lenght of a string use ".Length"

eg:            Console.WriteLine( variable.length );

like length u can use ToUpper() to convert string from lower to Upper and ToLower() for wiseversa

            Console.WriteLine(myText.Contains("Hell"));

the above function is to check whether the given word is there in the string returns true or false

u can print character by character by their index position 
eg:myText[0]

note: index starts from 0

u can print the index of a character by the IndexOf function

u can print a range of indexes using the Substring function
eg: myText.Substring(2,5);

u can execute the arithmetic operations directly in write line function

Arithmetic Operations
 Addition (+) ex. 1 + 1 = 2
 Subtraction (-) ex. 3 - 1 = 2
 Multiplication (*) ex. 2 * 2 = 4
 Division (/) ex. 6 / 3 = 2
Remainder (%) ex. 7 % 3 = 1 or 19 % 5 = 4
Remainder is the amount left over after division
19 / 5
19 cannot be divided exactly by 5
 The closest you can get without going over is 3 x 5 = 15, which is 4 less than 19
 So 4 is the remainder
 
code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 7;
            int y = 2;
            int result = 0;
            result = x % y;
            Console.WriteLine("Rem: " + result);
        }
    }
}

---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperatorsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int x, y;
            int add, sub, mult,rem;
            float div;

            Console.WriteLine("Enter no. 1");
            x = int.Parse(Console.ReadLine());

            Console.WriteLine("Enter no. 2");
            y = int.Parse(Console.ReadLine());

            add = x + y;
            Console.WriteLine(x + " + " + y + " = " + add);

            sub = x - y;
            Console.WriteLine(x + " - " + y + " = " + sub);

            mult = x * y;
            Console.WriteLine(x + " * " + y + " = " + mult);

            div = (float)x / (float)y;
            Console.WriteLine(x + " / " + y + " = " + div);

            rem = x % y;
            Console.WriteLine(x + " % " + y + " = " + rem);
        }
    }
}


---------------------------------------------------------------------------------------------


Precedence of operators

wrong method

2 + 3 * 2 - 4 + 2
5 * 2 - 4 + 2
10 - 4 + 2
6 + 2
8

right method

2 + 3 * 2 - 4 + 2
2 + 6 - 4 + 2
8 - 4 + 2
4 + 2
6


increment and decrement exist

there are many math functions see https://www.w3schools.com/cs/cs_math.php

trial code use BODMAS:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrecedenceOfoperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            x = (2 + 3) * 2 - 4 + 2;
            Console.WriteLine(x);
        }
    }
}



---------------------------------------input operations----------------------------------
            
            Console.WriteLine("enter the name:");
            myText=Console.ReadLine(); //this read line only works for string
            Console.WriteLine("hello" + myText);

eg code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadLine
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");

            string name =  Console.ReadLine();

            Console.WriteLine("Welcome " + name + ", welcome back!");
        }
    }
}


-----------------------------------------------------------------------------------------
to convert the datatype of the variables u can use 

eg: int num = Convert.ToInt32("45");

or

eg: num = num.ToInt32();

also you can use 

eg: variable1 = (int)variable2;

like this, u have different datatypes that u can convert note the datatype should be compatible

-----------------------------------------sample data conversion-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TypeConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            int serialNo = 150;
            string accountNo = "";
            float anyNo = 3.1f;

            accountNo = serialNo.ToString();

            Console.WriteLine(accountNo);

            //serialNo = Convert.ToInt32(anyNo);
            serialNo = (int)anyNo;

            Console.WriteLine(serialNo);
        }
    }
}


-------------------------------------arrays in c#-----------------------------------------

how to declare an array

syntax:

datatype[index limit] variableName = {value,values}; //here index limit can be empty
Console.WriteLine( variableName[index] );

eg:

int[] number = {1,2,3,4,5,6};
Console.WriteLine(number[0]);

to define a static array

syntax:

datatype variableName = new samedatatype[index limit];

eg:

string[] friends=new string[5]

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Arrays
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = new int[5] { 1, 10, 100, 1000, 10000 };
            //string[] weekDays = new string[7] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
            string[] weekdays = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.WriteLine(numbers[i]);
            }

            foreach (var item in weekdays)
            {
                Console.WriteLine(item);
            }
        }
    }
}


----------------------------------------c# functions _____________________________________________

how to declare functions or aka methods

    static void Main(string[] args){
        functionName(variable or value to be passed);
    }

    static void functionName(datatype variableName){
        action block;
    }

eg:
-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            hi("hellow world");

            Console.ReadLine();
        }

        static void hi(string s)
        {
            Console.WriteLine(s);
        }
    }
}

-----------------------------------------------------------------------------------------

other rules are as same as other languages

-------------------------------------if statements------------------------------------------

if is as same as c and java

syntax + eg:

if(condition == condition){
    action block;
}
else if{
    action block false;    
}
else{
    action block else;
}

useful things in if:

1) == equalto
2) && and
3) || or
4) != not equal

Comparison operators

== equal
!= not equal
> greater than
 < less than
>= greater than or equal to
 <= less than or equal to

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConditionalStatmentsIF
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            int y = 7;

            x = int.Parse(Console.ReadLine());
            y = int.Parse(Console.ReadLine());

            if (x > y)
            {
                Console.WriteLine("Number one is greater than number two");
            }
            else if (x < y)
            {
                Console.WriteLine("Number one is less than number two");
            }
            else 
            {
                Console.WriteLine("They matches!!");
            }
         }
    }
}

-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComparisonOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            int y = 0;

            x = 9; y = 9;

            if (x == y)
                Console.WriteLine("X is equal to y");
            else if (x != y)
            {
                //nested if
                if (x > y)
                    Console.WriteLine("X is greater than y");
                else if (x < y)
                    Console.WriteLine("X is less than y");
            }
               

        }
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedLoops
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int i = 1; i <= 30; i++)
            {
                //Console.WriteLine("First loop i = " + i);
                for (int j = 1; j <= 30; j++)
                {
                    Console.Write("0 ");
                    //Console.WriteLine("Second loop j = " + j);
                }
                Console.WriteLine();
            }
        }
    }
}


---------------------------------logical operators-----------------------------------------

Logical operators
Condition X Condition Y AND OR
true - true true true
true - false false true
false -true false true
false -false false false
AND
Learn to drive Get license Get to drive in streets
true- true true
true- false false
false- true false
false- false false
OR
Take a shower Go for a swim Get wet
true- true true
true- false true
false- true true
false- false false

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoreLogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            bool username = false;
            bool email = false;
            bool password = true;

            if ((username || email) && password)
                Console.WriteLine("User is valid.");
            else
                Console.WriteLine("Something went wrong");
        }
    }
}

----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            // and operator
            //bool HasLicence = true;
            //bool KnowHowToDrive = false;

            //if (HasLicence == true && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You are good to go!");
            //}
            //else if (HasLicence == true && KnowHowToDrive == false)
            //{
            //    Console.WriteLine("Cheateeer!!!");
            //}
            //else if (HasLicence == false && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You need to get a licence");
            //}
            //else
            //{
            //    Console.WriteLine("That is not gonna happen pal!");
            //}

            // or operator
            bool WentForSwim = true;
            bool TookAShower = true;

            if (!WentForSwim || !TookAShower)
            {
                Console.WriteLine("Pal you are so wet");
            }
            else
            {
                Console.WriteLine("You are not wet");
            }

            // Not !
        }
    }
}

-----------------------------------------------------------------------------------------------

------------------------------------------------switch --------------------------------

syntax + eg:

switch(variable)
{
    case condition:
        actionblock case1;
        break;
    
    other cases..................
    .
    .
    .
    .
    .
    .
    .
    .
    .
    default:
    action block default;
    break;
}

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchStatment
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Are you enjoying C#? (Yes or No)");
            string input = Console.ReadLine();

            switch (input)
            {
                case "Yes": Console.WriteLine("This is very good"); break;
                case "No": Console.WriteLine("So sorry that you are not enjoying");break;
                default: Console.WriteLine("This is not a correct answer");break;
            }
        }
    }
}


---------------------------------------------while--------------------------------------

syntax + eg:

while(condition){
    actionblock;
}

the switch is as same as c and be careful if u didnt mention break it will continue to execute inside the switch break is used to jum out of switch case

do while is also same as c

syntax :

do{
    actionblock;
}while (condition);

//dont forget ;

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WhileLoop
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("While Loop");
            int x = 8;

            while (x >= 1)
            {
                if (x == 3)
                    break;
                Console.WriteLine("Game of thrones season 0" + x);
                x--;
            }
            Console.WriteLine("------");
            Console.WriteLine("Do While Loop");

            int i = 1;

            do
            {
                Console.WriteLine("This is line no." + i);
                i++;
            } while (i <= 10);
        }
    }
}


--------------------------------------for-------------------------------------------------

for is as same as C

syntax:

for(intialization;condition;itration){
    action block;
}

-------------------------------------comments------------------------------------------------------
//single line 

/*multiline comment*/

sample code for comments:
----------------------------basic errors and debugging-----------------------------------
syntax errors - they are like spelling mistakes in codeing like usage of ; () and function name can be misused or missed or any data is mismatched type of data is incorrect

run time errors - error which is caused during run time

logical error - they are error in the logic like divided by zero 

----------------------------advance exception handelling aka error handeling-------------------------

Exception Handling

An exception is a runtime error that happens during the execution
of a program.
Exceptions provide a way to transfer control from one part of a
program to another.

Exception handling is built upon these keywords: try, catch and finally
Try: try block contains a block of code, exceptions is expected to happen if we
run it.
Catch: program catches an exception with an exception handler at the place in
a program where you want to handle the problem.
Finally: finally block is used to execute a block of code, whether an exception is
thrown or not thrown.

types

1)

try
{
}
catch (SomeSpecificException ex)
{
}

2)

try
{
}
finally
{
} 

3)

try
{
}
catch (SomeSpecificException ex)
{
}
finally
{
}

they are as samme as C

use try for code and catch for error handeling

try{
    action block;
}
catch(type_of_exception object_for_reference /*optional*/){
    action on error;
    object_for_reference.command;
}
finally{
    should be executed action block;
}

to know more on detail and types read :https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm

execute no matter what happens should be added in finally method

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExceptionExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int firstNumber = 0;
            int secondNumber = 0;
            double divResult = 0;
            startAgain:
            try
            {
                Console.WriteLine("Enter the first number");
                firstNumber = int.Parse(Console.ReadLine());

                Console.WriteLine("Enter the second number");
                secondNumber = int.Parse(Console.ReadLine());

                divResult = (double)firstNumber / (double)secondNumber;
                Console.WriteLine("Result = " + divResult);
            }
            catch(DivideByZeroException e)
            {
                Console.WriteLine("Cannot divide by zero");
                goto startAgain;
            }
            catch (FormatException e)
            {
                Console.WriteLine("Invalid Input");
                goto startAgain;
            }
        }
    }
}


eg:



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExceptionHandling
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            int y = 9;
            double div = 0;

            try
            {
                div = y / x;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error is :" + e.Message);
            }
            finally
            {
                Console.WriteLine("Result is : " + div);
            }
        }
    }
}



-------------------------------------classes and objects----------------------------------

when u creat a class u can use a class file by accessing the view->solution explorer->(right click)new file->c# class

this will create a new class

when u define thwe classes make sure that u define the access controle such as public private protected internal etc.....

when ever u create and define a class make sure that u also declare and create a object_for_reference

eg class code (external class file called class1.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

    }
}

eg program code (main.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book();
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}

you can call functions also like this eg: name is a function then

book1.read(arguments);

you can declar the non static method out side the class in another class

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Classes
{
    class Program
    {
        static void Main(string[] args)
        {
            Person perOne = new Person();
            
            perOne.FirstName = "Ahmad";
            perOne.LastName = "Mohey";
            perOne.Country = "Egypt";

            Person perTwo = new Person();
            perTwo.FirstName = "Tim";
            perTwo.LastName = "David";
            perTwo.Country = "Australia";

            Person perThree = new Person();
            perThree.FirstName = "Daniel";
            Console.WriteLine(perOne.FirstName);
            Console.WriteLine(perTwo.FirstName);
            Console.WriteLine(perThree.FirstName);
        }
    }

    class Person
    {
        string firstName;
        string lastName;
        DateTime birthDate;
        string country;

        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }

        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }

        public DateTime BirthDate { get; set; }

        public string Country { get; set; }

        public Person()
        {
            firstName = "Unknown";
        }
    }
}



variable scope - 
_____________________________________________

class classname{
    global variable can be accessed from any where any function

    method(){
        local variable only accessable within the method
    }
}
_____________________________________________constructor----------------------------------

the constructure should have the class name there can be many constructure and the access type should be defined

the constructure should have as same name as class

eg program for the constructure:

main.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book("baba");
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}


class.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

        public book(string title) { 
            Console.WriteLine(title);
        }

    }
}

when a object (class) is under a scope the constructor gets executed 

-------------------------------getters and setters-----------------------------------------

getters and setter are used to access the data which is private to return a specific value or to set a specific value 

sample code how to use getter and setter 

private private_variable;//declared in class

public datatype variable //this will represent the private variable
{
    get {return private_variable;}
    set{condition;}
}

the variable should be called by the public variable name 
-----------------------------static class attributes & methods--------------------------------------

static means that the method belongs to the Program class and not an object of the Program class. You will learn more about objects and how to access methods through objects later in this tutorial. void means that this method does not have a return value. You will learn more about return values later in this

u can only call use add the values or modify only using the class not out side the class eg object.variable will not work here u can only use in class and its function

syntax and eg:

public static int count=0;

--methods--

to access the class functions without the object declaration eg:math.sqrt(3,3) like this u can use the key word static

eg and syntax:

class.cs:

class class_name{
    public static void function_name(){
        action block;
    }
}

main.cs:

class_name.function_name();

no need of object declaration like object class_name= new objectname() then objectname.function_name(); // no need of this 

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart3
{
    class Program
    {
        static void Main(string[] args)
        {
            //string firstEmployee, secondEmployee;

            //firstEmployee = "David Smith";
            //secondEmployee = "Sophia Watson";

            //Console.WriteLine($"Inside Main Method\n----------\n{firstEmployee} \n{secondEmployee}\n\n");

            ChangeNames(out string firstEmployee, out string secondEmployee);

            Console.WriteLine($"Inside Main Method\n----------\n{firstEmployee} \n{secondEmployee}\n\n");
        }

        static void ChangeNames(out string firstEmp,out string secEmp)
        {
            
            firstEmp = "Olivia Aaron";
            secEmp = "Alvaro Salazar";
            Console.WriteLine($"Outside Main Method\n----------\n{firstEmp} \n{secEmp}\n\n");
        }
    }
}






eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart4
{
    class Program
    {
        static void Main(string[] args)
        {
            string guestName = "";

            Console.WriteLine("Hello, Dear Guest, what is your name?");

            guestName = Console.ReadLine();

            if (guestName == string.Empty)
                WelcomeGuest();

        }

        static void WelcomeGuest()
        {
            Console.WriteLine("Okay, we hope you enjoy staying at our hotel");
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodsPart4
{
    class Program
    {
        static void Main(string[] args)
        {
            string guestName = "";

            Console.WriteLine("Hello, Dear Guest, what is your name?");

            guestName = Console.ReadLine();

            if (guestName == string.Empty)
                WelcomeGuest();
            else
                WelcomeGuest(guestName);

        }

        static void WelcomeGuest()
        {
            Console.WriteLine("Okay, we hope you enjoy staying at our hotel");
        }

        static void WelcomeGuest(string name)
        {
            Console.WriteLine($"Thank you {name}, we hope you enjoy staying at our hotel");
        }
    }
}










--------------------------------------inheritance-------------------------------------------

we use : for inheretance

we should have 2 class for in heretance

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg")
        //super class
    }
}

class nonvegchef : vegchef {
    public void noncook(){
        Console.WriteLine("cooks non veg")
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    class Animals
    {
        private string privateVariable; public string publicVariable;
        protected string protectedVaraible; internal string internalVariable;

        private void TrainAnimalPrivate()
        {}
        public void TrainAnimalPublic()
        {}
        protected void TrainAnimalProtected()
        {}
        internal void TrainAnimalInternal()
        {}
    }

    class Dogs : Animals 
    {
        Dogs dog = new Dogs();

        void FeedDog()
        {
            
        }
    }

    class Cats
    {
        Animals animal = new Animals();

        void FeedCat()
        {
            
        }
    }
}


------------------------------------overriding--------------------------------------------

if super class and sub class same named functions when u execute it u wnat that class function to run u can use override method

eg :

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg");
        //super class
    }
    public virtual noncook(){
        Console.WriteLine("cooks milk");
    }
}

class nonvegchef : vegchef {
    public override void noncook(){
        Console.WriteLine("cooks non veg");
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();
        veg.noncook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

advance--------------------------------------------------------------------------------------

see ./accessc#.png for access control in c#

types of constructor are 

1)default

the default constructor doesnt has a parameter

when a class has no constructor ,default constructor is served by the compiler to that class

2)parameterized

the constructor has one or more parameters

3)static

restricted class but cannot be changed 

this constructor is called before the object is created

4)private

restricted class can be changed

there is also public constructor so that they can be accessed by anywhere

5)destructor

this gets scope when object is destroid this is represent by ~ symbol same name as class and there is only one desctroctor

to know more see this https://youtu.be/hxIb99-Z8_I

here u see the out put will be like the veg chef cooks milk but non veg chef cooks nonveg

---------------------------------------sample code for greeting---------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace greeting
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");
            var name = Console.ReadLine();
            Console.WriteLine("Nice to meet you {0} My name is C#, How old are you?",name);
            int.TryParse(Console.ReadLine(), out int age);
            if(age==0)
                Console.WriteLine("That is not a correct input");
            else
                Console.WriteLine("{0} good, As for me I was born on 2002. Which makes me {1} years old.", age,DateTime.Now.Year-2002);
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------date program-----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace date
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the day...");
            var day = Console.ReadLine();

            Console.WriteLine("Enter the month...");
            var month = Console.ReadLine();

            Console.WriteLine("Enter the year...");
            var year = Console.ReadLine();

            DateTime date = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
            Console.WriteLine("\n" + date.DayOfWeek);

        }
    }
}

--------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DateTimeLecture
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime myDate = DateTime.Now;
            string formattedDate = string.Format("Date is {0:yyyy MMMM dddd HH mm ss tt}",myDate);
            Console.WriteLine(formattedDate);
        }
    }
}


--------------------------------------------------------------------------------------------------------

-------------------------------------print day----------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace day
{
    class Program
    {
        static void Main(string[] args)
        {
            var day = DateTime.Now.DayOfWeek.ToString();

            switch (day)
            {
                case "Saturday": Console.WriteLine("Yellow");break;
                case "Sunday": Console.WriteLine("Green"); break;
                case "Monday": Console.WriteLine("Blue"); break;
                case "Tuesday": Console.WriteLine("Grey"); break;
                case "Wednesday": Console.WriteLine("Red"); break;
                case "Thursday": Console.WriteLine("Orange"); break;
                case "Friday": Console.WriteLine("White"); break;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------------

Date Class in C#---------------------------------------------------------------------------------

To set dates in C#, use DateTime class. The DateTime value is between 12:00:00 midnight, January 1, 0001 to 11:59:59 P.M., December 31, 9999 A.D.

Let’s create a DateTime object.

Example

using System;
class Test {
   static void Main() {
      DateTime dt = new DateTime(2018, 7, 24);
      Console.WriteLine (dt.ToString());
   }
}

Output
7/24/2018 12:00:00 AM
Let us now get the current date and time.

Example

using System;
class Test {
   static void Main() {
      Console.WriteLine (DateTime.Now.ToString());
   }
}

Output
9/17/2018 5:49:21 AM
Now using the method Add(), we will add days in a date with the DateTime structure.

Example
 
using System;
class Test {
   static void Main() {
      DateTime dt1 = new DateTime(2018, 7, 23, 08, 20, 10);
      Console.WriteLine ("Old Date: "+dt1.ToString());
      DateTime dt2 = dt1.AddDays(7);
      Console.WriteLine ("New Date: "+dt2.ToString());
   }
}

Output
Old Date: 7/23/2018 8:20:10 AM
New Date: 7/30/2018 8:20:10 AM

------------------------------------------------------------------------------------------------------



random month gerenrator Program using if - else

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo5
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int x = rand.Next(1,13);
            string monthName = "";
                        
            if (x == 1)
                monthName = "January - 31 days";
            else if (x == 2 )
                monthName = "February - 28/29 days";
            else if (x == 3)
                monthName = "March - 31 days";
            else if (x == 4)
                monthName = "April - 30 days";
            else if (x == 5)
                monthName = "May - 31 days";
            else if (x == 6)
                monthName = "June - 30 days";
            else if (x == 7)
                monthName = "July - 31 days";
            else if (x == 8)
                monthName = "August - 31 days";
            else if (x == 9)
                monthName = "September - 30 days";
            else if (x == 10)
                monthName = "October - 31 days";
            else if (x == 11)
                monthName = "November - 30 days";
            else 
                monthName = "December - 31 days";

            Console.WriteLine(monthName);
        }
    }
}

----------------------------------------random data is generated in every datatype--------

// Instantiate random number generator using system-supplied value as seed.
var rand = new Random();

// Generate and display 5 random byte (integer) values.
var bytes = new byte[5];
rand.NextBytes(bytes);
Console.WriteLine("Five random byte values:");
foreach (byte byteValue in bytes)
    Console.Write("{0, 5}", byteValue);
Console.WriteLine();

// Generate and display 5 random integers.
Console.WriteLine("Five random integer values:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,15:N0}", rand.Next());
Console.WriteLine();

// Generate and display 5 random integers between 0 and 100.
Console.WriteLine("Five random integers between 0 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(101));
Console.WriteLine();

// Generate and display 5 random integers from 50 to 100.
Console.WriteLine("Five random integers between 50 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(50, 101));
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 1.
Console.WriteLine("Five Doubles.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble());
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 5.
Console.WriteLine("Five Doubles between 0 and 5.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble() * 5);

// The example displays output like the following:
//    Five random byte values:
//      194  185  239   54  116
//    Five random integer values:
//        507,353,531  1,509,532,693  2,125,074,958  1,409,512,757    652,767,128
//    Five random integers between 0 and 100:
//          16      78      94      79      52
//    Five random integers between 50 and 100:
//          56      66      96      60      65
//    Five Doubles.
//       0.943   0.108   0.744   0.563   0.415
//    Five Doubles between 0 and 5.
//       2.934   3.130   0.292   1.432   4.369

================================================================================================

random team generator

Random rnd = new Random();
string[] malePetNames = { "Rufus", "Bear", "Dakota", "Fido",
                          "Vanya", "Samuel", "Koani", "Volodya",
                          "Prince", "Yiska" };
string[] femalePetNames = { "Maggie", "Penny", "Saya", "Princess",
                            "Abby", "Laila", "Sadie", "Olivia",
                            "Starlight", "Talla" };

// Generate random indexes for pet names.
int mIndex = rnd.Next(malePetNames.Length);
int fIndex = rnd.Next(femalePetNames.Length);

// Display the result.
Console.WriteLine("Suggested pet name of the day: ");
Console.WriteLine("   For a male:     {0}", malePetNames[mIndex]);
Console.WriteLine("   For a female:   {0}", femalePetNames[fIndex]);

// The example displays output similar to the following:
//       Suggested pet name of the day:
//          For a male:     Koani
//          For a female:   Maggie

--------------------------------random dice generator-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo6
{
    class Program
    {
        static void Main(string[] args)
        {
            string input = "";
            Random rand = new Random();
            int x = 0;
            do
            {
                Console.WriteLine("Roll dice? (yes, no)");
                input = Console.ReadLine();
                if (input.ToLower() == "yes")
                {
                    x = rand.Next(1, 7);
                    Console.WriteLine("New dice no is " + x);
                }
            }
            while (input.ToLower() != "no");
        }
    }
}

note:indentation is c# is not nessary

------------------------------------triange generator using for --------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo4
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int j = 15; j >= 0; j--)
            {
                for (int t = 0; t <= j; t++)
                {
                    Console.Write("0 ");
                }
                Console.WriteLine();
            }
        }
    }
}
--------------------------------------------------------------------------------------------
                                    Parse and TryParse
_______________________________________________________________________________________________________________________________________________________________________________________

Convert a string representation of number to an integer,using the int.TryParse and intParse method in C#.

If the string cannot be converted, then the int.TryParse method returns false i.e. a Boolean value, whereas int.Parse returns an exception.

Let us see an example of int.Parse method −

eg Parse:

using System.IO;
using System;
class Program {
   static void Main() {
      int res;
      string myStr = "120";
      res = int.Parse(myStr);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

eg TryParse:

using System.IO;
using System;
class Program {
   static void Main() {
      bool res;
      int a;
      string myStr = "120";
      res = int.TryParse(myStr, out a);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

here in str u can also provide a text or word it will return 0 but parse cannot handel it it can only convert

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TryParse
{
    class Program
    {
        static void Main(string[] args)
        {
            int.TryParse(Console.ReadLine(),out int x);
            if (x == 0)
            {
                Console.WriteLine("This is not a valid input");
            }
            else
            {
                Console.WriteLine("You have entered no. " + x);
            }
        }
    }
}


---------------------------------------constants------------------------------------------

the value of pi or gravity doent changes so these types of values are called constants

u should use the keyword const followed by the datatype

eg:

const var asd=1;
const double pi=3.14;

u cannot change it later in run time

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Constants
{
    class Program
    {
        static void Main(string[] args)
        {
            const double gravityForce = 9.8;
            double PI = 3.14159265359;
            

            Console.WriteLine("Gravity force is " + gravityForce + " and PI is " + PI);
        }
    }
}


-------------------------------------string manuplation-------------------------------------

the string is used to represent words and sentences

indexes-
_________

index is the position of the particular character eg - there is a word called apple the index of a is 0 and p is 1,2 and l is 3 and e is 4

u can acces the position by [] brackets

like this eg :

console.WriteLine(wordvariable[postition]);

trim-
_________

this used to remove the extra or un nessary white spaces frount and back

eg : apple mango        banana 

after using trim 

eg== apple mango banana

syntax:

variable.Trim();

toupper,tolower-
_________

this used to convert to upper case all letters and lower

syntax:

variable.ToUpper();

variable.ToLower();

length-
________

this will print length of the word

variable.Length();

replace-
__________

this is used to replace one or more letters in a word

syntax:

variable.replace('word to be replaced','word to be replaced with');

index of-
___________
this is used to find the position of a particular letters

syntax:

variable.IndexOf('letter');

last index of-
__________________
same as the IndexOf but calculates from last

syntax:

variable.LastIndexOf('letter');

Substring-
___________
this prints from the position which is mentioned

eg games - postion is given as 2 then i will print from mes this can also give a range like this 2,2 this will print me

syntax:

variable.Substring(position);
(or)
variable.Substring(position,range);

remove-
__________
remove does the reverse of the substring 

syntax:

variable.remove(position);
(or)
variable.remove(position,range);

insert-
__________

this used to insert the words or the letter at mentioned position

syntax:

variable.insert(position,"word");
variable.insert(0,"the");

escape sequence-
__________________

these are the characters that cannot be represented in original form eg u cant print next line or " direcetly so u can represent it by \ back slash

like \" and \\ to represent " and \ and for new line use \n

\t-tab spaces

\n-new line

\" - "
\\ - \

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EscapeSequences
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(" And Jon said \"Bend \t \t \n \a the knee \" ");
            Console.WriteLine("D:\\Movies");
        }
    }
}


string interpolation-
_____________________________________________

a print statements can be easily manuplated like this porms

eg:
Console.WriteLine("hello"+name+name2);
(or)
Console.WriteLine("hello{0}{1}",name,name2);
(or)
Console.WriteLine($"hello {name} {name2}");

they all are same

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringManipulationPart2
{
    class Program
    {
        static void Main(string[] args)
        {
            string tvShow = "Game of Thrones";

            // Index of
            Console.WriteLine(tvShow.IndexOf('o'));
            // Last index of
            Console.WriteLine(tvShow.LastIndexOf('o'));
            // Substring
            Console.WriteLine(tvShow.Substring(4));
            // Remove
            Console.WriteLine(tvShow.Remove(4));
            // Insert
            Console.WriteLine(tvShow.Insert(0,"The "));

        }
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringManipulationPart1
{
    class Program
    {
        static void Main(string[] args)
        {
            string movieName = "    lord of the RINGS    ";
            // Indexes
            Console.WriteLine(movieName[17]);

            // Trim 
            Console.WriteLine(movieName.Trim());

            // Upper Case
            Console.WriteLine(movieName.ToUpper().Trim());

            // Lower Case
            Console.WriteLine(movieName.Trim().ToLower());

            // Length
            Console.WriteLine(movieName.Length);
            Console.WriteLine(movieName.Trim().Length);


            // Reaplce
            Console.WriteLine(movieName.Replace('l','L').Trim());
        }
    }
}


wg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StringInterpolation
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "";
            Console.WriteLine("What is your name?");
            name = Console.ReadLine();

            //Console.WriteLine("Welcome back " + name);
            //Console.WriteLine("Welcome Back {0}", name);

            Console.WriteLine($"Welcome back again {name}");
        }
    }
}



----------------------------------------maths function_______________________________________________________________

ceiling-

if a decimal value is provided to it will round off the next high whole number 

eg :
2.2 - 3

3.5 - 4

4.9 - 5

syntax:

Math.ceiling(variable);

floor-

opposite to ceiling

syntax:

Math.floor(variable);

round-

it will round off the decimal

syntax:

Math.round(variable);

for round u can also mention the number of decimal values to be there

syntax:

Math.round(variable,number_of_decimal_places);

eg

Math.round(variable,2); -> 4.22

truncate-

this just removes te decimal points

syntax:

Math.truncate(variable);

max-

finds the maximum number

Math.Max(variable1,variable2);

min-

finds the minimum number

maths.min(var1,var2);

sqrt-

finds the square root

Math.sqrt(variable);

pow-

used to give power

math.pow(variable,power);

pi-

generates the pi value

pi-math.pi

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathPart2
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 9;
            int y = 4;
            // Max
            Console.WriteLine("Max : " + Math.Max(x,y));
            // Min
            Console.WriteLine("Min : " + Math.Min(x, y));
            // sqrt
            Console.WriteLine("SQRT : " + Math.Sqrt(y));
            // pow
            Console.WriteLine("POW : " + Math.Pow(3,2));
            // PI
            
        }
    }
}


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathPart1
{
    class Program
    {
        static void Main(string[] args)
        {
            double x = 5.227;
            // ceiling
            Console.WriteLine("Ceiling : " + Math.Ceiling(x));
            // floor
            Console.WriteLine("Floor : " + Math.Floor(x));
            // round
            Console.WriteLine("Round : " + Math.Round(x,2));
            //truncate
            Console.WriteLine("Truncate : " + Math.Truncate(x));
        }
    }
}


------------------------------------egs--------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RandomNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int x = 0;
            x = rand.Next(1,13);
            Console.WriteLine("Month : " + x);

            double y = 0;
            y = rand.NextDouble() * 10;
            Console.WriteLine("Random double no is " + Math.Round(y,2));
        }
    }
}

eg :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LoopsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            // Even Numbers
            //for (int x = 0; x < 501; x++)
            //{
            //    if(x%2==0)
            //        Console.Write(x + ", ");
            //}

            for (int i = 1; i <= 20; i++)
            {
                for (int j = 1; j <= i; j++)
                {
                    Console.Write("0");
                }
                Console.WriteLine();
            }
        }
    }
}


eg:


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ForLoop
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int i = 10; i >= 1; i--)
            {
                if (i == 2)
                    break;
                Console.WriteLine("The value of variable i is : " + i);
            }
        }
    }
}

--------------------------------oops------------------------------------------------------

oops - object orented programing structure

What is object-oriented programming?
Object-Oriented Programming (OOP) refers to a type software design
programmers define data type of a data structure, but also the types of
operations (functions) that can be applied to the data structure.
In this way the data structure becomes an object that includes both data and
functions. 

Class : A category of objects. The class defines all the common properties of the
different objects that belong to it.
Object : Refers to a particular instance of a class where the object can be a
combination of variables, functions, and data structures.
Method : A combination of instructions grouped together to achieve some result. It
may take arguments and return result.
Property : A member that provides a flexible mechanism to read, write, or compute
the value of a private field

eg of oops:

Vehicle

Wheeled vehicles Non-wheeled vehicles

Four wheeled vehicle Two wheeled vehicle Sea vehicle Air vehicles

Color, Manufacturer, Max Speed, Carriage Capacity, Gasoline or Electricity

Class
Sub class Sub class
Sub class Sub class Sub class Sub class
Start(), Stop(), Drive(), Refuel(), RunAtMaxSpeed(), TransportPeople()

Properties
Methods
Object
BMW X4
Ferrari Enzo
Kawasaki KX450F
Boeing 787


The Four Pillars of OOP
Inheritance : The process of creating the new class by extending the existing class or the process of
inheriting the features of base class is called as inheritance.
Polymorphism : Poly means many and Morph means forms. Polymorphism is the process in which an
object or function take different forms.
Abstraction : Abstraction is the process of showing only essential features of an object to the outside
world and hide the other irrelevant information.


Methods part 1 (The basics)

DRY

A method is a code block that contains a series of statements. A program
causes the statements to be executed by calling the method and specifying
any required method arguments.


Method Signature

Method name and its parameters types (but not the parameter names) are
part of the signature.

Methods part 2 (parameters and return types)

Methods part 3 (value vs reference)

Passing by value (using a copy)
Passing by reference (using the variable itself)
ref keyword
out keyword

Methods part 4 (overloaded methods)

Classes
template or blueprint of the methods, variables and properties in a
particular kind of object

Inheritance
Inheritance enables new objects to inherit the properties of existing objects.
A class that is used as the basis for inheritance is called a superclass or base
class. A class that inherits from a superclass is called a subclass or derived
class



Encapsulation
Encapsulation is a concept that binds together the data and methods that
manipulate the data, and that keeps both safe from outside interference
and misused.

Public: Access is not restricted.
Protected: Access is limited to the containing class or types derived from the
containing class.
Private: Access is limited to the containing type.
Internal: Access is limited to the current assembly.
Protected internal: Access is limited to the current assembly or types derived
from the containing class.


Polymorphism
Polymorphism means having many forms. usually expressed as 'one
interface, multiple functions’.
Static type or compile time
Overloading
Dynamic type or runtime
Overriding allows you to change the functionality of a method in a child
class.
virtual
override
new


Abstraction is a concept or an idea not associated with any specific instance.

---------------------------hard code----------------------------------------------------------

ref method-

how to work on the variable inside the method aka function without declaring the global variable or using the same variable the ref key word is used for this purpoe

eg:

//outside function

a=10;
b=11;
Console.WriteLine($"the output is {a} and {b}"); //before going inside the function
function(a,b);                                   //in function
Console.WriteLine($"the output is {a} and {b}"); //out the function   

static void function(int x,int y){
//inside the function
x=20;
y=30;
Console.WriteLine($"the output is {x} and {y}");
}

//output

the output is 10 and 11 //before
the output is 20 and 30 //in function
the output is 10 and 11 //out

to have same values changed in the real variable use the ref method eg

eg:

//outside function

a=10;
b=11;
Console.WriteLine($"the output is {a} and {b}"); //before going inside the function
function(ref a,ref b);                                   //in function
Console.WriteLine($"the output is {a} and {b}"); //out the function   

static void function(ref int x,ref int y){
//inside the function
x=20;
y=30;
Console.WriteLine($"the output is {x} and {y}");
}

//output

the output is 10 and 11 //before
the output is 20 and 30 //in function
the output is 20 and 30 //out

before uing this reference method u should intialize and declare the variable

if u want to intialize but not declare then use "out" key word the use is same and the purpose is also the same



method overloading-
_____________________________________________

the same method name can be used for 2 methods with a difference of number of arguments or their datatype



abstraction-
__________________

if u want to directly inheret a function aka method from a class without defining it u can do it by abstract key word after inhereting from the parrent using ":"

use the key word before the class and the function that u are going to use like this 

class main{

    main(){
        xyz
    }
}

class parent{ 
    override method a(){
        xyz
    }
}

abstract class child{
    abstract method a();
}

if we call the method a from the clid it will run the parrents a method 



#region hack in visual stdio-
_____________________________________________

u can hid a region easily in vs by comment lines specifing a reagion this will enable the code hiding when nessay and easy ur Tasks

syntax:

#region region-name
code;
#endregion

a + or ▽ or - will appear click on it to hide this leaves no change in code or its working

sealed classes-
__________________

any class that should not be inhereted by any classes are knowen as sealed class

you can seal a class by the keyword called sealed

syntax:

sealed class sealedclassname{
    action block;
}


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SealedClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Dogs dog = new Dogs();
            
        }
    }

    sealed class Animal
    {
        public string name;
    }

    class Dogs : Animal // you will need to remove the sealed keyword in order for inheritance to work
    {
        public string dogBreed;

    }
}






static class-
__________________

this can only have staict variables and method

and u cannot inheret non static class from static class viceversa

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StaticClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animal.GetAge();
        }
    }

    static class Animal
    {
        static public string name;

        static public void GetAge()
        {
            Console.WriteLine(DateTime.Now.Year - DateTime.Now.AddYears(-4).Year);
        }
    }
    
}






nested classes-
_____________________________________________

class having a class is known as nested class

to use the nested class u need to create an object for both classed 

syntax:

class main{
    a classa=new a();
    a.b classb=new a.b();
}

class a{
    class b{
        actionblock;
    }
}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals animal = new Animals();
            Animals.Dogs dog = new Animals.Dogs();
            Animals.Cats cat = new Animals.Cats();
            
        }
    }

    class Animals
    {
        public string animalName;
        public string animalCountry;

        public class Dogs
        {
            public string dogBreed;
            public string dogNickname;
        }

        public class Cats
        {
            public string catName;
        }

    }
}







partial classes-
___________________________

u can create 2 classes in two different classes usingh keyword partial before the class 

eg:

program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals animal = new Animals();
            animal.GetName();
        }
    }
}

class2.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    partial class Animals
    {
        public DateTime birthDate;
        public string animalBreed;

        public void SayHi()
        {

        }
    }
}


class1.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PartialClasses
{
    partial class Animals
    {
        public string animalColor;
        public string animalName;

        public void GetName()
        {
            Console.WriteLine("My name is max, I am a dog");
        }
    }
}







namespaces -
___________________________

name spaces is like the mega container for the classes u can call the name spaces directly in the porgram at top begning

like eg:

using System;

this name space contains functions like console.WriteLine()

u can also create a own namespaces like 

namespace namespace-name{
    class class-name{

    }
}

to call the namespaces from the classes u can use "." operator eg:

namespace.class.function();

like class the namespace can also created inside the namespace


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MyOwnNamespace.GameOfThrones;

namespace Namespaces
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine();
            MyOwnNamespace.Animal animal = new MyOwnNamespace.Animal();
            animal.SayHi();
            //MyOwnNamespace.GameOfThrones.HouseStark.sayQuote();
            HouseStark.sayQuote();
        }
    }
}

namespace MyOwnNamespace
{
    class Animal
    {
        public string animalColor;

        public void SayHi()
        {
            Console.WriteLine("Hi from the custom namespace");
        }
    }

    class Trainers
    {
    }

    namespace GameOfThrones
    {
        class HouseStark
        {
            public static void sayQuote()
            {
                Console.WriteLine("The north remembers");
            }
        }
    }
}







structs--------
___________________________

as asame as c programing language used to define a collection of datatypes as an object

syntax:

struct Employee{
    public string employeename;
    public string job;
    private int Salary;

    public decimal Salary{
        get{return salary;}
        set {salary = value;}
    }
}

you should call it like class 

eg:

class main{
    static void main(){
        Employee newemp = new Employee(); //object declaration
        newemp.employeename="value";
        }
}

u can even code in the struct it will run the object gets in the scope

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Structs
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee newEmployee = new Employee();
            newEmployee.employeeName = "James";
            newEmployee.employeeJob = "Programmer";
            newEmployee.Salary = 5000;
            Console.WriteLine($"Employee name is {newEmployee.employeeName} and his job is {newEmployee.employeeJob} and starting salary is {newEmployee.Salary}");
            newEmployee.SayHi();
        }
    }

    struct Employee
    {
        public string employeeName;
        public string employeeJob;
        private decimal salary;

        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }

        public void SayHi()
        {
            Console.WriteLine("Hi from the method in struct");
        }
    }
}






class vs structs - 
___________________________

Class

✓ Declared with class keyword
✓ Supports inheritance
✓ User-defined constructors can be implemented
✓ Data members can be initialized in the class
definition
✓ Reference type (Heap)

Struct

✓ Declared with struct keyword
✓ Doesn’t Support inheritance
✓ User-defined constructors can’t be implemented
✓ Data members can’t be initialized in the struct
definition
✓ Value type (Stack)

The majority of types in a framework should be classes, but if instances of the type are small and
commonly short-lived or are commonly embedded in other objects define a struct





enumerations-
__________________

enum are only visible inside a class it can be declared anywhere in namespace also in this case its only visble inside the namespace

syntax:

enum name{
    values,
    values
}

eg:

enum weekdays{
    mon,
    tues,
    Wed,
    fri
}

it can be used by "." operator

weekDays.mon.ToString();

u can have a custom variable also 

like 

day='monday',

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Enumerations
{
    class Program
    {
        static void Main(string[] args)
        {
            string weekDayName = WeekDay.Monday.ToString();
            WeekDay day = WeekDay.Sunday;

            Console.WriteLine((int)day);
        }

    }

    enum WeekDay
    {
        Monday,
        Tuesday,
        Wednesday,
        Thursday,
        Friday = 40,
        Saturday = 50,
        Sunday = 60
    }
}









this keyword-
__________________

this is a keyword used to access the internal value like u are sending an argument from out side the class that might change the actual value the use this to see the last value

eg:

ab(){
    a=asd
    b=asd
    ca ca=new ca()
    ca.bc()
}

class ca{

    a=a
    b=b

    bc(){
        Console.WriteLine(a+b)
        Console.WriteLine(this.a+this.b)

    }

}

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ThisKeyword
{
    class Program
    {
        static void Main(string[] args)
        {
            Person person = new Person();
            person.DisplayName("James","Morrison");
        }
    }

    class Person
    {
        string firstName;
        string lastName;

        public void DisplayName()
        {
            Console.WriteLine(firstName + " " + lastName);
        }

        public void DisplayName(string firstName, string lastName)
        {
            Console.WriteLine(firstName + " " + lastName);
            Console.WriteLine(this.firstName + " " + this.lastName);
        }

        public Person()
        {
            firstName = "David";
            lastName = "Smith";
        }
    }
}




output will be -
_____________________________________________

asdasd
ab

syntax to use this -

this.variablename

Interfaces-
__________________

Interfaces
An interface contains definitions for a group of related
functionalities that a class or a struct can implement.
Think of it as contract that all the classes inheriting the interface
should follow. The interface defines the 'what' part of the contract
and the deriving classes define the 'how' part of the contract.

interface is only used to declar and commands 

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):

syntax:

public interface Iname{
    //do add i in the name cause it will help us to defrentiate
    declaration of methods
}

eg:

// Interface
interface IAnimal 
{
  void animalSound(); // interface method (does not have a body)
}

// Pig "implements" the IAnimal interface
class Pig : IAnimal 
{
  public void animalSound() 
  {
    // The body of animalSound() is provided here
    Console.WriteLine("The pig says: wee wee");
  }
}

class Program 
{
  static void Main(string[] args) 
  {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
  }
}




eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interfaces
{
    class Program
    {
        static void Main(string[] args)
        {
            Dogs dog = new Dogs();
            dog.Attack();
            dog.SayHi();
            dog.Run();
            
        }
    }

    public interface IAnimals
    {
        void Run();
    }

    public interface IDogCommands : IAnimals
    {
        void Stay();
        void Sit();
        void Attack();

        string DogName
        {
            set;
            get;
        }
    }

    interface Trainer
    {

    }

    class Animals
    {
        string AnimalName;

        public void SayHi()
        {
            Console.WriteLine("Hi from the animals class");
        }
    }

    class Dogs : Animals, IDogCommands, Trainer
    {
        private string DogBreed;

        public void Stay()
        {
            Console.WriteLine("Dog is staying");
        }

        public void Sit()
        {
            Console.WriteLine("Dog is sitting");
        }

        public void Attack()
        {
            Console.WriteLine("Dog is attacking");
        }

        public void Run()
        {
            Console.WriteLine("Animal is running");
        }

        public string DogName { get; set; }
    }
}







interfaces vs abstract class - 
_____________________________________________

Similarities

‣ Can't be instantiated directly
‣ Must implement all its members
‣ Can contain events, methods, and properties.

Differences

Interface

‣ Can’t have method implementations
‣ Allow multiple inheritance
‣ Can’t have access modifiers, everything is public
‣ Can’t contain variables

Abstract Class

‣ Can have method implementations
‣ Doesn’t allow multiple inheritance
‣ Can contain access modifiers
‣ Can contain variables 



---------------------------------------------------------------------------------------------------
sample program of list

animal.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo8
{
    class Animal
    {
        private string name;
        private DateTime birthDate;
        private Origions origin;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public DateTime BirthDate
        {
            get { return birthDate; }
            set { birthDate = value; }
        }

        public Origions Origin
        {
            get { return origin; }
            set { origin = value; }
        }
    }

    interface Dog
    {
        void Eat();
        void Drink();
        void Sit();
        void Sleep();
        void SayHi();

    }

    class GermanShepard : Animal, Dog
    {
        private Gender gender;
        private double weight;
        private bool securityGuard;
        private TrainingAbility training;
        private Sizes size;


        public Gender Gender
        {
            get { return gender; }
            set { gender = value; }
        }

        public double Weight
        {
            get { return weight; }
            set { weight = value; }
        }

        public bool SecurityGuard
        {
            get { return securityGuard; }
            set { securityGuard = value; }
        }

        public TrainingAbility Training
        {
            get { return training; }
            set { training = value; }
        }

        public Sizes Size
        {
            get { return size; }
            set { size = value; }
        }

        public void Eat()
        {
            Console.WriteLine("Dog is eating");
        }
        public void Eat(string dogName)
        {
            Console.WriteLine($"{dogName} is eating");
        }
        public void Drink()
        {
            Console.WriteLine("Dog is drinking");
        }
        public void Drink(string dogName)
        {
            Console.WriteLine($"{dogName} is drinking");
        }
        public void Sit()
        {
            Console.WriteLine("Dog is sitting");
        }
        public void Sit(string dogName)
        {
            Console.WriteLine($"{dogName} is sitting");
        }
        public void Sleep()
        {
            Console.WriteLine("Dog is sleeping");
        }
        public void Sleep(string dogName)
        {
            Console.WriteLine($"{dogName} is sleeping");
        }

        public void SayHi()
        {
            Console.WriteLine("Hiii \"in dogs language :D\"");
        }

        public void DisplayDogInformation()
        {
            Console.WriteLine($"The dog name is {Name} from {Origin}, " +
                $"was born on {BirthDate.ToShortDateString()} " +
                $"{Name} is a {Gender} and weights {Weight} kilos and its size is {Size} ");
        }
    }

    enum Gender
    {
        Male,
        Female
    }

    enum Sizes
    {
        Small,
        Medium,
        Large
    }
    enum TrainingAbility
    {
        Easy,
        Medium,
        Hard
    }
    enum Origions
    {
        Afghanistan,
        Albania,
        Algeria,
        Angola,
        Argentina,
        Australia,
        Austria,
        Bahamas,
        Bahrain,
        Bangladesh,
        Belarus,
        Belgium,
        Bolivia,
        Botswana,
        Brazil,
        Brunei,
        Bulgaria,
        BurkinaFaso,
        Burundi,
        Cambodia,
        Cameroon,
        Canada,
        Chad,
        Chile,
        China,
        Colombia,
        Comoros,
        CostaRica,
        Croatia,
        Cuba,
        Cyprus,
        CzechRepublic,
        Denmark,
        Ecuador,
        Egypt,
        ElSalvador,
        Estonia,
        Ethiopia,
        Finland,
        France,
        Gabon,
        Gambia,
        Georgia,
        Germany,
        Ghana,
        Greece,
        Greenland,
        Guatemala,
        Haiti,
        Honduras,
        HongKong,
        Hungary,
        Iceland,
        India,
        Indonesia,
        Iran,
        Iraq,
        Ireland,
        Israel,
        Italy,
        Jamaica,
        Japan,
        Jordan,
        Kazakhstan,
        Kenya,
        Kosovo,
        Kuwait,
        Latvia,
        Lebanon,
        Liberia,
        Libya,
        Liechtenstein,
        Lithuania,
        Luxembourg,
        Macedonia,
        Madagascar,
        Malawi,
        Malaysia,
        Maldives,
        Mali,
        Malta,
        Mauritius,
        Mexico,
        Moldova,
        Monaco,
        Mongolia,
        Montenegro,
        Morocco,
        Mozambique,
        Namibia,
        Nepal,
        Netherlands,
        NewZealand,
        Nicaragua,
        Niger,
        Nigeria,
        NorthKorea,
        Norway,
        Oman,
        Pakistan,
        Palestine,
        Panama,
        Paraguay,
        Peru,
        Philippines,
        Poland,
        Portugal,
        PuertoRico,
        Qatar,
        Romania,
        Russia,
        Rwanda,
        SaudiArabia,
        Senegal,
        Serbia,
        Seychelles,
        SierraLeone,
        Singapore,
        Slovakia,
        Slovenia,
        Somalia,
        SouthAfrica,
        SouthKorea,
        SouthSudan,
        Spain,
        SriLanka,
        Sudan,
        Swaziland,
        Sweden,
        Switzerland,
        Syria,
        Taiwan,
        Tanzania,
        Thailand,
        Togo,
        Tonga,
        Tunisia,
        Turkey,
        Uganda,
        Ukraine,
        UnitedArabEmirates,
        UnitedKingdom,
        UnitedStatesofAmerica,
        Uruguay,
        Uzbekistan,
        VaticanCity,
        Venezuela,
        Vietnam,
        Yemen,
        Zambia,
        Zimbabwe
    }
}


program.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo8
{
    class Program
    {
        static void Main(string[] args)
        {
            GermanShepard max = new GermanShepard();
            max.Origin = Origions.Germany;
            max.Name = "Max";
            max.BirthDate = new DateTime(2017, 10, 10);
            max.Gender = Gender.Male;
            max.Weight = 32.54;
            max.SecurityGuard = false;
            max.Size = Sizes.Large;
            max.Training = TrainingAbility.Easy;
            max.DisplayDogInformation();
            max.Sit(max.Name);
            max.Eat();
            max.SayHi();
        }


    }
}

--------------------------------------------------------------------------------------------------------

movie program

program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MovieNamespace;

namespace AssignmentNo7
{
    class Program
    {
        static void Main(string[] args)
        {
            MovieNamespace.Movie InceptionInstance = new MovieNamespace.Movie();
            MovieNamespace.Movie WildTalesInstance = new MovieNamespace.Movie();

            InceptionInstance.MovieName = "Inception";
            InceptionInstance.Rate = 8.8;
            InceptionInstance.ReleaseDate = new DateTime(2010, 7, 16);

            InceptionInstance.Languages = new Language[3];
            InceptionInstance.Languages[0] = Language.English;
            InceptionInstance.Languages[1] = Language.French;
            InceptionInstance.Languages[2] = Language.Japanese;

            InceptionInstance.Countries = new Country[2];
            InceptionInstance.Countries[0] = Country.UnitedStatesofAmerica;
            InceptionInstance.Countries[1] = Country.UnitedKingdom;

            InceptionInstance.Genres = new Genres[3];
            InceptionInstance.Genres[0] = Genres.Action;
            InceptionInstance.Genres[1] = Genres.Adventure;
            InceptionInstance.Genres[2] = Genres.SciFi;
            
            
            WildTalesInstance.MovieName = "Wild Tales";
            WildTalesInstance.Rate = 8.1;
            WildTalesInstance.ReleaseDate = new DateTime(2014, 8, 21);

            WildTalesInstance.Languages = new Language[1];
            WildTalesInstance.Languages[0] = Language.Spanish;

            WildTalesInstance.Countries = new Country[2];
            WildTalesInstance.Countries[0] = Country.Argentina;
            WildTalesInstance.Countries[1] = Country.Spain;

            WildTalesInstance.Genres = new Genres[3];
            WildTalesInstance.Genres[0] = Genres.Comedy;
            WildTalesInstance.Genres[1] = Genres.Drama;
            WildTalesInstance.Genres[2] = Genres.Thriller;

            InceptionInstance.DisplayMovieInformation();
            WildTalesInstance.DisplayMovieInformation();
        }
    }
}

movie.cs-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieNamespace
{
    struct Movie
    {
        private string movieName;
        private double rate;
        private DateTime releaseDate;
        private Genres[] genres;
        private Language[] languages;
        private Country[] countries;

        public string MovieName
        {
            get { return movieName; }
            set { movieName = value; }
        }

        public double Rate
        {
            get { return rate; }
            set { rate = value; }
        }

        public DateTime ReleaseDate
        {
            get { return releaseDate; }
            set { releaseDate = value; }
        }

        public Language[] Languages
        {
            get { return languages; }
            set { languages = value; }
        }

        public Country[] Countries
        {
            get { return countries; }
            set { countries = value; }
        }

        public Genres[] Genres
        {
            get { return genres; }
            set { genres = value; }
        }

        public void DisplayMovieInformation()
        {
            Console.Write($"Movies : {MovieName}" +
                $"\nRate : {Rate} out of 10" +
                $"\nReleased on: {ReleaseDate.ToShortDateString()}" +
                $"\nLanguages: ");

            for (int i = 0; i < Languages.Length; i++)
            {
                Console.Write(Languages[i]);
                if (i < Languages.Length - 1)
                    Console.Write(", ");
                else
                    Console.WriteLine();
            }
            Console.Write("Countries : ");
            for (int i = 0; i <Countries.Length; i++)
            {
                Console.Write(Countries[i]);
                if (i < Countries.Length - 1)
                    Console.Write(", ");
            }
            Console.Write("\nGenres : ");
            for (int i = 0; i < Genres.Length; i++)
            {
                Console.Write(Genres[i]);
                if (i < Genres.Length - 1)
                    Console.Write(", ");
                else
                    Console.WriteLine();
            }
            Console.WriteLine("---------------------------------------");
        }
    }


    #region Lists

    #region Languages List
    enum Language
    {
        Arabic,
        Azerbaijani,
        Bengali,
        Czech,
        Dutch,
        English,
        French,
        German,
        Greek,
        Hindi,
        Hungarian,
        Italian,
        Japanese,
        Javanese,
        Korean,
        Kurdish,
        Malay,
        Mandarin,
        Persian,
        Polish,
        Portuguese,
        Romanian,
        Russian,
        Spanish,
        Swedish,
        Thai,
        Turkish,
        Ukrainian,
        Urdu,
        Vietnamese,
        Zulu
    }
    #endregion

    #region Countries List
    enum Country
    {
        Afghanistan,
        Albania,
        Algeria,
        Angola,
        Argentina,
        Australia,
        Austria,
        Bahamas,
        Bahrain,
        Bangladesh,
        Belarus,
        Belgium,
        Bolivia,
        Botswana,
        Brazil,
        Brunei,
        Bulgaria,
        BurkinaFaso,
        Burundi,
        Cambodia,
        Cameroon,
        Canada,
        Chad,
        Chile,
        China,
        Colombia,
        Comoros,
        CostaRica,
        Croatia,
        Cuba,
        Cyprus,
        CzechRepublic,
        Denmark,
        Ecuador,
        Egypt,
        ElSalvador,
        Estonia,
        Ethiopia,
        Finland,
        France,
        Gabon,
        Gambia,
        Georgia,
        Germany,
        Ghana,
        Greece,
        Greenland,
        Guatemala,
        Haiti,
        Honduras,
        HongKong,
        Hungary,
        Iceland,
        India,
        Indonesia,
        Iran,
        Iraq,
        Ireland,
        Israel,
        Italy,
        Jamaica,
        Japan,
        Jordan,
        Kazakhstan,
        Kenya,
        Kosovo,
        Kuwait,
        Latvia,
        Lebanon,
        Liberia,
        Libya,
        Liechtenstein,
        Lithuania,
        Luxembourg,
        Macedonia,
        Madagascar,
        Malawi,
        Malaysia,
        Maldives,
        Mali,
        Malta,
        Mauritius,
        Mexico,
        Moldova,
        Monaco,
        Mongolia,
        Montenegro,
        Morocco,
        Mozambique,
        Namibia,
        Nepal,
        Netherlands,
        NewZealand,
        Nicaragua,
        Niger,
        Nigeria,
        NorthKorea,
        Norway,
        Oman,
        Pakistan,
        Palestine,
        Panama,
        Paraguay,
        Peru,
        Philippines,
        Poland,
        Portugal,
        PuertoRico,
        Qatar,
        Romania,
        Russia,
        Rwanda,
        SaudiArabia,
        Senegal,
        Serbia,
        Seychelles,
        SierraLeone,
        Singapore,
        Slovakia,
        Slovenia,
        Somalia,
        SouthAfrica,
        SouthKorea,
        SouthSudan,
        Spain,
        SriLanka,
        Sudan,
        Swaziland,
        Sweden,
        Switzerland,
        Syria,
        Taiwan,
        Tanzania,
        Thailand,
        Togo,
        Tonga,
        Tunisia,
        Turkey,
        Uganda,
        Ukraine,
        UnitedArabEmirates,
        UnitedKingdom,
        UnitedStatesofAmerica,
        Uruguay,
        Uzbekistan,
        VaticanCity,
        Venezuela,
        Vietnam,
        Yemen,
        Zambia,
        Zimbabwe
    }
    #endregion

    #region Genres
    enum Genres
    {
        Action,
        Adventure,
        Animation,
        Biography,
        Comedy,
        Crime,
        Documentary,
        Drama,
        Family,
        Fantasy,
        History,
        Horror,
        Musical,
        Mystery,
        Romance,
        SciFi,
        Sport,
        Thriller,
        War,
        Western
    }
    #endregion
    #endregion
}

------------------------------------------------------------------------------------------------------------

Association
 • It is a relationship between objects.
 • Usually defined as “is-a” or “using” relationship.
 • Both objects have independent life-cycle.
 • Each object owns their actions and will not affect other object.
Aggregation
 • Specialized form of Association.
 • Usually defined as “has-a” relationship.
 • Each object has an independent life-cycle.
 • Ownership between objects.
Composition
 • Specialized form of Aggregation.
 • Usually defined as “part-of” relationship.
 • Child Object has dependent life-cycle.
 • Ownership between objects. 






_______________________________________________________________________________________________________________________________________________________________________________________

debugging-
___________________________

near the numbers in vs code press the red dot to stop before execution of that line 

step over executes line by line 

step into goes to the subfunctions and exectutes line by line

u can right click on the variable to watch

you can laso use debug function using dot operator to keep a view

eg:

Debug.x=10;


 write line if ---------------------

 this will print if the given condition is true

 eg:

 console.WriteLineif(condition,Output);



eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace DebugWriteLine
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            int y = 10;
            Debug.WriteLine("Hello from the debug writeline");
            Debug.WriteLineIf(x == 50,"X = " + x);
            Debug.WriteLine("Y = " + y);
            x = 50;
            y = 100;
            Debug.WriteLineIf(x == 50, "X = " + x);
            Debug.WriteLine("Y = " + y);
            Debug.WriteLine("Program has been terminated");
        }
    }
}









 Documentation-

 if u keep the cursur on the key words like writeline it will show its function like that u can give description for classes and functions using summary tag

 eg:

 //<summary>
 //type ur description here
 //</summary>
 //<param name="prametername">parameter usage</param>

 u can also give parameter description as given above

 more params are given here https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/
 and - https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/recommended-tags

 eg:

 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MethodDescription
{
    class Program
    {
        static void Main(string[] args)
        {
            Dogs max = new Dogs();
            max.Sit();
            
        }
    }
    
    /// <summary>
    /// DogCommands will be the interface for the methods to be applied
    /// </summary>
    interface DogCommands
    {
        void Sit();
        void Sit(string dogName, string trainerName);
    }

    /// <summary>
    /// Class Animal will be a base class for the child classes like Dogs 
    /// </summary>
    class Animal
    {

    }


    class Dogs : Animal, DogCommands
    {
        /// <summary>
        /// Sit method will make the dog sit
        /// </summary>
        public void Sit()
        {

        }
        
        /// <summary>
        ///  Overloaded method will take two parameters of type string
        /// </summary>
        /// <param name="dogName">string used to hold the dog name</param>
        /// <param name="trainerName">string used to hold the trainer name</param>
        public void Sit(string dogName, string trainerName)
        {

        }
    }
}



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



file manuplation and file operation-
_____________________________________________

u need to use a new header file and all header files are said anmespace here so we will also say name space

u need System.IO namespace


syntax an implementation:

/////////////////////////OVER WRITING/////////////////////////////////////////////////////////////

using System.IO;

names fileoperations{
    class Main{
        static void Main(string[] args){
            string file = @"c:\files\name.txt";  //file location is given and stored in a string
            StreamWriter sw = new StreamWriter(file);  //opening that file in overwrite mode
            sw.WriteLine("file is written");
            //other file operations
            sw.Close();//closeing the file
        }
    }
}

// if u didnt create any file this will automatically create the file for you

///////////////////////////////APPPENDING MODE/////////////////////////////////////////////
using System.IO;

names fileoperations{
    class Main{
        static void Main(string[] args){
            string file = @"c:\files\name.txt";  //file location is given and stored in a string
            StreamWriter sw = new StreamWriter(file,true);  //opening that file in appending mode
            sw.WriteLine("file is written");
            //other file operations
            sw.Close();//closeing the file
        }
    }
}


over write will destroy the existing content and re write all new

append will just add the extra data




creation of directory

syntax:

Directory.CreateDirectory(@"location");


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace FilesWrite
{
    class Program
    {
        static void Main(string[] args)
        {
            
            //Directory.CreateDirectory(@"C:\files\males");
            string file = @"C:\files\males\Names.txt";
            StreamWriter sw = new StreamWriter(file,true);
            sw.WriteLine("John");
            sw.WriteLine("Ahmad");

            sw.Close();
        }
    }
}






reading files-

syntax:

SteamReader sr = new SteamReader(filelocation); // the file location can be given as variable string any thing
Console.WriteLine(sr.ReadToEnd()); //toread full file
sr.Close();

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FilesRead
{
    class Program
    {
        static void Main(string[] args)
        {
            string file = @"c:\files\names.txt";
            System.IO.StreamReader sr = new System.IO.StreamReader(file);
            Console.WriteLine(sr.ReadToEnd());
            Console.WriteLine("File ended");
            sr.Close();
        }
    }
}








you can change the color of the console which u print in c#

use this code 

Console.ForegroundColor = ConsoleColor.colorname;

eg:

Console.ForegroundColor = ConsoleColor.blue;



for back gound color 

Console.BackgroundColor = ConsoleColor.white;




default-

u can give empty values by defining it as default

syntax:

datatype variablename = default;

eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DefaultKeyword
{
    class Program
    {
        static void Main(string[] args)
        {
            long longVar = default;
            string stringVar = default;
            DateTime dateVar = default;
            int intVar = default;

            Console.WriteLine(dateVar);
        }
    }
}






C# program for cicer ciper

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo10
{
    class Program
    {
        static void Main(string[] args)
        {
            
        }

         // Auto generated method to perform caesar cipher encryption
        public static char[] Encrypt(string plainText, int shift)
        {
            char[] plainArray = plainText.ToLower().ToCharArray();
            char[] cipherArray = new char[plainArray.Length];

            for (int i = 0; i < plainArray.Length; i++)
            {
                char letter = plainArray[i];
                if (letter != ' ')
                {
                    letter = (char)(letter + shift);
                    if (letter > 'z')
                    {
                        letter = (char)(letter - 26);
                    }
                    else if (letter < 'a')
                    {
                        letter = (char)(letter + 26);
                    }
                    cipherArray[i] = letter;
                }
            }
            return cipherArray;
        }
    }
}

ascii table - http://www.jimprice.com/ascii-0-127.gif



c# program to play with console colors

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace AssignmentNo9
{
    class Program
    {
        #region Main Method
        static void Main(string[] args)
        {
            string userChoose = string.Empty;
            string filePath = string.Empty;
            string fileName = string.Empty;
            string plainText = string.Empty;
            string cipherText = string.Empty;
            int shift = 0;
            StreamWriter sw = default;
            StreamReader sr = default;

            do
            {
                userChoose = WeclcomeMessage();

                if (userChoose.ToLower() == "e")
                {
                    PerformEncryptOperation(out plainText, out cipherText, out shift);
                }
                else if (userChoose.ToLower() == "d")
                {
                    PerformDecryptOperation(out filePath, out fileName, ref cipherText, out shift, ref sr);
                }
                else if (!(userChoose.ToLower() == "x"))
                {
                    ErrorMessage("Invalid input, please try again");
                }
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("----------------------------------------------------");
                Console.WriteLine("\n");
            }
            while (userChoose.ToLower() != "x");
            Console.WriteLine("Thank you for using caesar cipher app.\n\n");
        }
        #endregion

        #region Error Message
        private static void ErrorMessage(string message)
        {
            Console.BackgroundColor = ConsoleColor.White;
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(message);
            
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.Black;
        }
        #endregion

        #region App Message
        private static void AppMessage(string message)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(message);
            Console.ForegroundColor = ConsoleColor.White;
        }
        #endregion

        #region Welcome Message
        private static string WeclcomeMessage()
        {
            string userChoose;
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Welcome to caesar cipher app, choose \n(E) to encrypt \n(D) to decrypt \n(X) to exit\n");
            Console.ForegroundColor = ConsoleColor.White;
            userChoose = Console.ReadLine();
            return userChoose;
        }
        #endregion

        #region Perform Encrypt Operation
        private static void PerformEncryptOperation(out string plainText, out string cipherText, out int shift)
        {
            AppMessage("Welcome to encryption mode \nEnter message to encrypt");
            plainText = Console.ReadLine();
            shift = 0;cipherText = string.Empty;
            if (plainText != "")
            {
                try
                {
                    AppMessage("Enter the shift");
                    shift = int.Parse(Console.ReadLine());

                    if (shift <= 26 && shift > 0)
                    {
                        AppMessage("Cipher is");

                        cipherText = new string(CaesarCipher.Encrypt(plainText, shift));
                        Console.WriteLine(cipherText);
                    }
                    else
                    {
                        ErrorMessage("Enter a number between 1 to 26");
                    }
                }
                catch (Exception e)
                {
                    ErrorMessage(e.Message);
                }
            }
            else
            {
                ErrorMessage("Invalid input");
            }
        }
        #endregion

        #region Perform Decrypt Operation
        private static void PerformDecryptOperation(out string filePath, out string fileName, ref string cipherText, out int shift, ref StreamReader sr)
        {
            shift = 0; fileName = string.Empty;
            AppMessage("Welcome to decryption mode \nEnter the path of file to decrypt");
            filePath = Console.ReadLine();

            if (filePath != "")
            {
                AppMessage("Enter file name");
                fileName = Console.ReadLine();
                if (fileName != "")
                {
                    filePath = filePath + "\\" + fileName;

                    AppMessage("Enter the shift");

                    try
                    {
                        shift = int.Parse(Console.ReadLine());
                        if (shift <= 26 && shift > 0)
                        {
                            sr = new System.IO.StreamReader(filePath);
                            cipherText = sr.ReadToEnd();

                            cipherText = new string(CaesarCipher.Decrypt(cipherText, shift));
                            AppMessage("Cipher is");
                            Console.WriteLine(cipherText);

                            sr.Close();
                        }
                        else
                        {
                            ErrorMessage("Enter a number between 1 to 26");
                        }

                    }
                    catch (Exception e)
                    {
                        ErrorMessage(e.Message);
                    }
                }
                else
                {
                    ErrorMessage("File name cannot be empty");
                }
            }
            else
            {
                ErrorMessage("Path is invalid");
            }
        }
        #endregion
    }

    class CaesarCipher
    {
        #region Caesar Cipher Encryption
        public static char[] Encrypt(string plainText, int shift)
        {
            char[] plainArray = plainText.ToLower().ToCharArray();
            char[] cipherArray = new char[plainArray.Length];

            for (int i = 0; i < plainArray.Length; i++)
            {
                char letter = plainArray[i];
                if (letter != ' ')
                {
                    letter = (char)(letter + shift);
                    if (letter > 'z')
                    {
                        letter = (char)(letter - 26);
                    }
                    else if (letter < 'a')
                    {
                        letter = (char)(letter + 26);
                    }
                    cipherArray[i] = letter;
                }
            }
            return cipherArray;
        }
        #endregion

        #region Caesar Cipher Decryption
        public static char[] Decrypt(string cipherText, int shift)
        {
            char[] cipherArray = cipherText.ToLower().ToCharArray();
            char[] plainArray = new char[cipherText.Length];

            for (int i = 0; i < cipherArray.Length; i++)
            {
                char letter = cipherArray[i];
                if (letter != ' ')
                {
                    letter = (char)(letter - shift);
                    if (letter > 'z')
                    {
                        letter = (char)(letter - 26);
                    }
                    else if (letter < 'a')
                    {
                        letter = (char)(letter + 26);
                    }
                    plainArray[i] = letter;
                }
            }
            return plainArray;
        }
        #endregion
    }
}




What is .Net framework?
It is a component of Windows that includes a virtual execution system
called the (CLR) Common Language Runtime and a unified set of class
libraries. 


Framework Class Libraries
https://msdn.microsoft.com/en-us/library/mt472912.aspx


System
System.Activities
System.Collections
System.Data
System.Diagnostics
System.DirectoryServices
System.Drawing
System.Globalization
System.IO
System.Linq
System.Management
System.Messaging
System.Net
System.Printing
System.Resources
System.Security
System.Speech
System.Text
System.Threading
System.Timers
System.Web
System.Windows




bulding code once ur program is done next step is to build so u will build it in the debug folder and u can see the build button at top 

difference

Build
Build the files that
have been modified
since the last
successful compile
(Incremental)

Re-Build
Clean then build the
solution from scratch,
ignoring any previous
complies made before

Clean
Delete all compiled
files (i.e., EXEs and
DLLs) from the bin/obj
directory.




data types real call

bool System.Boolean
byte System.Byte
sbyte System.SByte
char System.Char
decimal System.Decimal
double System.Double
float System.Single
int System.Int32
uint System.UInt32
long System.Int64
ulong System.UInt64
object System.Object
short System.Int16
ushort System.UInt16
string System.String




Cryptography
Cryptography is a way of storing and transmitting data in a particular form unlike its
normal form
Encryption:
The process of converting information using cryptography. Information that has been converted this way is
called encrypted.
Decryption:
The process of unlocking the encrypted information using cryptographic techniques.
Key:
A secret like a password used to encrypt and decrypt information.




Cryptography


Types of encryption


Symmetrical Encryption:

Encryption and decryption use the same key

data
|
|
▽
Plain text Encryption
|
|
▽
Secret key
|
|
▽
Cipher text Decryption
|
|
▽
Secret key
|
|
▽
Plain text




Asymmetrical Encryption:

Encryption and decryption use different key, a public key and a private key

data
|
|
▽
Plain text Encryption
|
|
▽
Public key
|
|
▽
Cipher text Decryption
|
|
▽
Private key
|
|
▽
Plain text





Caesar Cipher
It is a type of substitution cipher in which each letter in the plaintext is 'shifted' a certain number of places down
the alphabet
 Plain: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
Cipher: X Y Z A B C D E F G H I J K L M N O P Q R S T U V W
Cipher: zlqwhu lv frplqj
Plain: winter is coming




Popular Encryption Algorithms
DES
Triple DES
RSA
BlowFish



DES eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;

namespace CryptographyApp
{
    class Program
    {
        static void Main(string[] args)
        {
            DESCryptoServiceProvider key = new DESCryptoServiceProvider();
            Console.WriteLine("Enter your message: ");
            string plainText = Console.ReadLine();

            string cipherText = Encrypt(plainText, key);

            Console.WriteLine("\nCipher Text: " + Encrypt(plainText,key));
            Console.WriteLine("Plain Text: " + Decrypt(cipherText, key));
        }

        public static string Encrypt(string plainText, SymmetricAlgorithm key)
        {
            MemoryStream ms = new MemoryStream();
            CryptoStream cs = new CryptoStream(ms, key.CreateEncryptor(), CryptoStreamMode.Write);
            StreamWriter sw = new StreamWriter(cs);
            sw.Write(plainText);
            sw.Flush();
            cs.FlushFinalBlock();
            return (Convert.ToBase64String(ms.GetBuffer(),0,(int)ms.Length));
        }

        public static string Decrypt(string cipherText, SymmetricAlgorithm key)
        {
            MemoryStream ms = new MemoryStream(Convert.FromBase64String(cipherText));
            CryptoStream cs = new CryptoStream(ms, key.CreateDecryptor(), CryptoStreamMode.Read);
            StreamReader sr = new StreamReader(cs);
            return sr.ReadToEnd();
        }

    }
}


eg for console colors:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleForegroundColor
{
    class Program
    {
        static void Main(string[] args)
        {
            string greenMessage = "This is the GREEN message";
            string blueMessage = "This is the BLUE message";
            string redMessage = "This is the RED message";

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(greenMessage);
            Console.BackgroundColor = ConsoleColor.White;
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine(blueMessage);
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(redMessage);
            Console.ForegroundColor = ConsoleColor.White;
        }
    }
}






for numbering most  people use , insted of that u can use _ eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitSeparator
{
    class Program
    {
        static void Main(string[] args)
        {
            var distanceToSunFromEarth = 149_600_000;
            Console.WriteLine(distanceToSunFromEarth);
        }
    }
}




C# program for file creation of diff rent languages using enum:

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExerciseFilesCreator
{
    class Program
    {
        static void Main(string[] args)
        {
            StreamWriter sw;
            string language = string.Empty;
            int count = Enum.GetNames(typeof(Languages)).Length;
            for (int i = 0; i < count; i++)
            {
                language =  Enum.GetValues(typeof(Languages)).GetValue(i).ToString();
                Console.WriteLine(language);
                Directory.CreateDirectory(@"C:\Languages");
                Directory.CreateDirectory("C:\\Languages\\" + language);
                sw = new StreamWriter("C:\\Languages\\" + language + "\\log.txt");
                sw.WriteLine("File no " + i + " created on " + DateTime.Now);
                sw.Close();
            }
        }
    }


    enum Languages
    {
        Arabic,
        Azerbaijani,
        Bengali,
        Czech,
        Dutch,
        English,
        French,
        German,
        Greek,
        Hindi,
        Hungarian,
        Italian,
        Japanese,
        Javanese,
        Korean,
        Kurdish,
        Malay,
        Mandarin,
        Persian,
        Polish,
        Portuguese,
        Romanian,
        Russian,
        Spanish,
        Swedish,
        Thai,
        Turkish,
        Ukrainian,
        Urdu,
        Vietnamese,
        Zulu
    }
}


eg program for variable state:


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Debugging
{
    class Program
    {
        static int x = 0;
        static int y = 0;
        static void Main(string[] args)
        {
            x = 2;
            y = 2;
            Console.WriteLine("Inside main");
            ChangeValues();
            x = 10;
            y = 20;
            Console.WriteLine("Inside main again");
        }

        public static void ChangeValues()
        {
            x = 4;
            y = 5;
            Console.WriteLine("Inside change values");
        }

    }
}





coloction -
++++++++++++

1)nongeneric-
=============

this a dynaic way to store the data, the data can be stored irrespective to datatype

there are many types

A)ArrayList

ArrayList
✓ Stores elements of any datatype.
✓ Resizes automatically as you add or remove elements.
✓ Elements can be null or duplicated

syntax and eg:

class Main{
    static void main(){
        //creating

        ArrayList array = new ArrayList();
        
        //adding

        array.Add("data1");
        array.Add("data2");
        array.Add("data3");
        array.Add(4);
        array.Add(5.0d);//d represents decimal
        
        //how to insert inbetween syntax:
        //array.Insert(position,"data7");//to insert data in between
        //remeber it will only insert and append not replace the existing data and postion starts with 0 not 1
        array.Insert(4,"data4");

        foreach (var item in array){
            Console.WriteLine(item); // prints all data one by one
        }
        
        //index
        //u can just call the data by its position like this where 0 is position in array[0] the array is a variable word it can be replaced by anything
        Console.WriteLine(array[0].ToString());

        //capacity
        //you can get the total number of elements present in this array and element is nothing but data
        Console.WriteLine("count is" + array.Count); 

        //sorting
        //to sort there should be array of same datatype else it will not work
        //new array with same data type 
        ArrayList list1 = new ArrayList();
        list1.add(1);
        list1.add(4);
        list1.add(2);
        list1.add(3);
        list1.add(0);

        list1.sort();

        //reverse
        //this will only reverse the existing list not sort it like the down element will come up and up will go down
        list1.Reverse();

        //remove
        //this is used to remove a element
        array.Remove("data2");
        //to remove by position
        array.RemoveAt(2);
        //this will remove the element at postsition 2

        //remove all
        //this will remove all
        array.Clear();
        //u can also remove a range of data
        array.RemoveRange(1,3);
        //this will remove the data from  1-3

        //contains
        //to get to know does it has a specific value
        list1.Contains(1);
        //this will return true if it exist else false

        //getrange
        //this is used to get a range of values like to intailize particular range for other list
        array = list1.getrange(0,3); //0 is starting position and 3 is end

    }
}





pro2______________________________________________________________________________________________________________________________________________________________________________________________________
using System;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArrayListApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating            
            ArrayList array = new ArrayList();
            // Adding 
            array.Add("James");
            array.Add("David");
            array.Add("Charles");
            array.Add("Ahmad");


            Console.WriteLine("At first");
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("---------");
            Console.WriteLine("After insertion");
            Console.WriteLine("Count is " + array.Count);
            array.Insert(2, "Tim");
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            // Index
            Console.WriteLine("---------");
            Console.WriteLine(array[2].ToString());
            // Capacity
            Console.WriteLine("---------");
            Console.WriteLine("Count is " + array.Count);
            // Sorting
            Console.WriteLine("---------");
            array.Sort();            
            Console.WriteLine("After Sorting");
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            // Reversing
            Console.WriteLine("---------");
            array.Reverse();
            Console.WriteLine("After Reversing");
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            // Removing
            Console.WriteLine("---------");
            Console.WriteLine("After Removing");
            //array.Remove("James");
            //array.RemoveAt(2);
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            // Remove all
            Console.WriteLine("---------");
            Console.WriteLine("After Removing some");
            //array.RemoveRange(1, 2);          
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
            // Contains
            Console.WriteLine("---------");
            Console.WriteLine("After Asking if contains");
            Console.WriteLine(array.Contains("James"));
            // GetRange
            ArrayList names = new ArrayList();
            names = array.GetRange(0, 2);

            foreach (var item in names)
            {
                Console.WriteLine(item);
            }
        }
    }
}












B)hash table-
__________________

this is a key value pair organised based on the hash code

value can be any data type

HashTable
✓ Stores key-value pairs of any datatype
✓ Key must be unique and cannot be null.
✓ Value can be null or duplicate.
✓ Value can be of any type.


static void main{

    //creating
    Hashtable hash = new Hashtable();

    //adding
    hash.Add("key","value");
    hash.Add("sony","japan");
    hash.Add("kia","korea");
    hash.Add("benz","german");
    hash.Add("bmw","uk");

    //displaying
    foreach(DictionaryEntry item in hash){
        Console.WriteLine(item.Key+": "+item.Value);
    }

    //capacity
    Console.WriteLine("count is "+ hash.Count);

    //remove
    hash.Remove("kia");
    //the key is used here to remove

    //contains
    if(hash.Contains("sony")){
        //action block
    }
    //this checks all keys

    
    //copy to arraylist
    ArrayList array = new ArrayList(hash.Keys);
    foreach (var item in array){
        Console.WriteLine(item);
    }


}





pro2______________________________________________________________________________________________________________________________________________________________________________________________________



using System;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace HashtableApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            Hashtable hash = new Hashtable();

            // Adding
            hash.Add("Microsoft", "USA");
            hash.Add("Sony", "Japan");
            hash.Add("IKEA", "Sweden");
            hash.Add("Mercedes", "Germany");

            // Displaying

            foreach (DictionaryEntry item in hash)
            {
                Console.WriteLine(item.Key + ": " + item.Value);
            }
            // Capacity

            Console.WriteLine("Count is " + hash.Count);

            // Remove
            Console.WriteLine("------------");
            Console.WriteLine("After Removing");
            //hash.Remove("IKEA");
            foreach (DictionaryEntry item in hash)
            {
                Console.WriteLine(item.Key + ": " + item.Value);
            }
            // Contains
            Console.WriteLine("------------");
            Console.WriteLine("Contains condition");
            if (hash.ContainsValue("China"))
            {
                Console.WriteLine("Yes Japan is included");
            }
            else
            {
                Console.WriteLine("No it is not");
            }
            // Copy to ArrayList
            Console.WriteLine("------------");
            Console.WriteLine("After copying");
            ArrayList array = new ArrayList(hash.Keys);
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }

        }
    }
}









C)sorted list-
___________________________

SortedList
✓ There is generic and non-generic SortedList.
✓ Stores the key-value pairs in ascending order of the key.
✓ Key must be unique and cannot be null.
✓ Value can be null or duplicate.
✓ Value can be of any type.

this also represents a key value pair that are represented in key order

void main(){
    //creation
    SortedList sortedlist = new SortedList();

    //adding
    sortedlist.Add(1,"jan");
    sortedlist.Add(2,"feb");
    sortedlist.Add(3,"mar";
    sortedlist.Add(4,"apr");
    sortedlist.Add(5,"may");
    sortedlist.Add(6,"jun");

    //displaying
    foreach(DictionaryEntry item in sortedlist)
    {
        Console.WriteLine(item.key+"; "+item.Value);
    }

    //or

    for (int i=0;i<sortedlist.Count;i++){
        Console.WriteLine(sortedlist.Getkey(i)+"; "+ sortedlist.GetByIndex(i));
    }

    //Index
    Console.WriteLine(sortedlist[5].ToString());

    //capacity
    Console.WriteLine(sortedlist.Count);

    //remove
    sortedlist.Remove(1);
    //key is used to remove
    
    //contains
    Console.WriteLine(SortedList.ContainsValue('apr'));

    //copy to Arraylist
    Console.WriteLine("now we are inside the array");
    ArrayList array = new ArrayList(SortedList.Values);
    foreach (var item in array){
        Console.WriteLine(item);
    }

}





pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections;

namespace SortedListApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            SortedList sortedList = new SortedList();

            // Adding
            sortedList.Add(1, "Jan");
            sortedList.Add(2, "Feb");
            sortedList.Add(3, "Mar");
            sortedList.Add(4, "Apr");
            sortedList.Add(5, "May");

            // Displaying

            //foreach
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine(item.Key + ": " + item.Value);
            }
            //for
            for (int i = 0; i < sortedList.Count; i++)
            {
                Console.WriteLine(sortedList.GetKey(i) +": "+ sortedList.GetByIndex(i));
            }

            // Index
            Console.WriteLine(sortedList[5].ToString());

            // Capacity
            Console.WriteLine(sortedList.Count);

            // Remove

            //sortedList.Remove(1);
            foreach (DictionaryEntry item in sortedList)
            {
                Console.WriteLine(item.Key + ": " + item.Value);
            }
            // Contains
            Console.WriteLine(sortedList.ContainsValue("Apr"));

            // Copy to ArrayList
            Console.WriteLine("Now we are inside the array list");
            ArrayList array = new ArrayList(sortedList.Values);
            foreach (var item in array)
            {
                Console.WriteLine(item);
            }
        }
    }
}






pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericSortedList
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            SortedList list = new SortedList(); // non generic sortedlist
            SortedList<string, string> phoneBook = new SortedList<string, string>(); // generic sortedlist

            // Adding
            phoneBook.Add("Jack", "823456789");
            phoneBook.Add("Willy", "944556789");
            phoneBook.Add("Charles", "123456744");
            phoneBook.Add("Jennifer", "623456784");
            phoneBook.Add("James", "010101023");

            // Displaying
            foreach (var item in phoneBook)
            {
                Console.WriteLine(item.Key +", the mobile no is "+ item.Value);
            }

            // Index
            phoneBook["Jack"] = "123456789";
            Console.WriteLine(phoneBook["Jack"]);
            // TryGetValue
            phoneBook.TryGetValue("James", out string number);
            Console.WriteLine(number);
            // Remove
            Console.WriteLine("------------");
            Console.WriteLine("After Removing"); 
            phoneBook.Remove("Willy");
            phoneBook.RemoveAt(1);
            foreach (var item in phoneBook)
            {
                Console.WriteLine(item.Key);
            }
            // Remove all
            Console.WriteLine(phoneBook.Count);
            //phoneBook.Clear();
            //Console.WriteLine(phoneBook.Count);
            // Contains 
            Console.WriteLine(phoneBook.ContainsValue("010101024"));
        }
    }
}



stacks-
___________

Stacks
Stack represents a last-in first-out (LIFO) collection of object.
Push Pop

void main(){
    //creating
    Stack stack = new Stack();

    //adding
    stack.Push("david");
    stack.Push("basha");
    stack.Push("emmy");
    stack.Push("varisu");

    //removing
    stack.pop()
    //due to it follows the lifo last in first out the recently addded data will be removed in this case varisu will be removed

}



pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Stacks
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating 
            Stack stack = new Stack();

            // Adding
            stack.Push("David");
            stack.Push("Emmy");
            stack.Push("Jack");
            stack.Push("Emma");

            // Removing

            Console.WriteLine(stack.Pop());
            Console.WriteLine(stack.Pop());
            Console.WriteLine(stack.Pop());
            Console.WriteLine(stack.Pop());
        }
    }
}






queues - ________

Queues
Queue represents a first-in first-out (FIFO) collection of object.
Enqueue Dequeue

___________________________

enque means in

deque means out

and this works on the model first in first out so the value which is entered first is called out first 

eg : people waiting in a queues

syntax:

void main(){
     //creating
    Queue queue = new Queue();

    //adding

    queue.Enqueue("calvin");
    queue.Enqueue("tom");
    queue.Enqueue("baba")

    //printing

    foreach (var item in queue){
        Console.WriteLine(item);
    }
    
    //removing

    queue.Dequeue();


}

pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Queues
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            Queue queue = new Queue();
            // Adding
            queue.Enqueue("Cavin");
            queue.Enqueue("Tom");
            queue.Enqueue("Emma");

            foreach (var item in queue)
            {
                Console.WriteLine(item);
            }

            // Removing
            Console.WriteLine(queue.Dequeue());
            Console.WriteLine(queue.Dequeue());
            Console.WriteLine(queue.Dequeue());

        }
    }
}





bit array-
__________________

this type of array is usually created when the vlues are ment to be stored in binary

BitArray
Represent a compact array of bit values, which are represented as Booleans

void main(){
    
    //creating 

    //normal array diclaration

    bool[] boolArray = new bool[4];
    boolArray[0] = false;
    boolArray[1] = false;
    boolArray[2] = false;
    boolArray[3] = true;


    BitArray firstarray = new BitArray(4); //here 4 is maximum index value of the array aka size of the array
    BitArray secondarray = new BitArray(boolArray);//no need to redifine the vlues of the array
    BitArray thirdarray = new BitArray();
    BitArray forearray = new BitArray();
    BitArray fivearray = new BitArray();


    //setting value

    firstarray.set(0,false);
    firstarray.set(1,false);
    firstarray.set(2,false);
    firstarray.set(3,true);

    foreach (var item in firstarray){
        Console.WriteLine(item);
    }

    //AND - OR - NOT

    //here both firstarray and secondarray is equal

    firstarray.set(2,true);

    BitArray result= new BitArray(4);
    
    result = firstarray.And(secondarray);
    Console.WriteLine("\n----------------------------------------------------\nAND operation\n")
    foreach (var item in result){
        Console.WriteLine(item);
    }

    result = firstarray.Or(secondarray);
    Console.WriteLine("\n----------------------------------------------------\nOR operation\n")
    foreach (var item in result){
        Console.WriteLine(item);
    }

    result = firstarray.Not();
    Console.WriteLine("\n----------------------------------------------------\nNOT operation\n")
    foreach (var item in result){
        Console.WriteLine(item);
    }
    //not takes only one array as the input

}



pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BitArrayApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            bool[] boolArray = new bool[4];
            boolArray[0] = true;
            boolArray[1] = true;
            boolArray[2] = false;
            boolArray[3] = false;

            BitArray firstArray = new BitArray(4);
            BitArray secondArray = new BitArray(boolArray);

            // Setting value
            firstArray.Set(0, false);
            firstArray.Set(1, false);
            firstArray.Set(2, false);
            firstArray.Set(3, false);

            foreach (var item in secondArray)
            {
                Console.WriteLine(item);
            }

            // AND - OR - NOT

            BitArray result = new BitArray(4);
            //result = firstArray.And(secondArray);
            //Console.WriteLine("AND");
            //foreach (var item in result)
            //{
            //    Console.WriteLine(item);
            //}

            //result = firstArray.Or(secondArray);
            //Console.WriteLine("OR");
            //foreach (var item in result)
            //{
            //    Console.WriteLine(item);
            //}


            result = firstArray.Not();
            Console.WriteLine("Not");
            foreach (var item in result)
            {
                Console.WriteLine(item);
            }


        }
    }
}








Generic data collections:
___________________________

Collection is a group of related objects.
Collections
Arrays Collections
✓ Collections provide a more flexible way to work with groups of objects
✓ Collections are enhancement to the arrays. 


Non-generic
Each element can represent a value of a different type
Elements can be added or removed at runtime
The size is not fixed
System.Collections
Easier to write code


Generic
 Allows defining a class or method with type as a parameter.
Use it if your collection contains elements of only one data type.
Enforces type safety, which means that no other data type can be added to it.
System.Collections.Generic
A little bit harder to write code



List<T>/IList<T>-
___________________________

List<T>
List<T> collection is the same as an ArrayList except that List<T> is a generic collection
✓ Stores elements of the specified type.
✓ It grows and shrinks automatically.
✓ Can store multiple null and duplicate elements.
✓ Can be accessed using indexer, for loop or foreach statement.
✓ It is ideal for storing and retrieving large number of elements.

these are special type of list generic list so any datatype at intial cannot be changed later

it grows and strinks as the allocation

multiple and null elements can be stored and duplicate also

can be access using the index by for or foreach

large number of data can be easily stored

void main(){
    List<string> firstlist = new List<string>();
    //(or)
    IList<string> secondlist = new List<string>();

    //adding

    firstlist.Add("england");
    firstlist.Add("hungary");
    firstlist.Add("india");
    firstlist.Add("chile");
    firstlist.Add("china");

    //displaying
    foreach (var item in firstlist){
        Console.writeLine(item);
    }

    //index

    firstlist[2] = "hindustan"; //this how the index is used

    //capacity
    Console.WriteLine("count is "+ firstlist.count);

    //sorting

    firstlist.Sort();

    //reversing
    firstlist.Reverse();

    //removing

    firstlist.Remove("china");
    firstlist.RemoveAt(0);
    firstlist.RemoveRange(0,3);

    //remove all

    firstlist.Clear();

    //does it contains

    firstlist.Contains("hindustan");

    //getrange

    secondlist = firstlist.GetRange(0,2);


}


pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ListApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating    
            List<string> firstList = new List<string>();
            IList<string> secondList = new List<string>();
            // Adding 
            firstList.Add("England");
            firstList.Add("Hungary");
            firstList.Add("China");
            firstList.Add("Germany");
            firstList.Add("Egypt");
            // Displaying
            foreach (var item in firstList)
            {
                Console.WriteLine(item);
            }
            // Index
            firstList[2] = "South Korea";
            //Console.WriteLine(firstList[2]);
            foreach (var item in firstList)
            {
                Console.WriteLine(item);
            }
            // Capacity
            Console.WriteLine("Count is " + firstList.Count);
            // Sorting
            Console.WriteLine("After Sorting...");
            firstList.Sort();
            foreach (var item in firstList)
            {
                Console.WriteLine(item);
            }
            // Reversing
            //Console.WriteLine("After Reversing...");
            firstList.Reverse();
            //foreach (var item in firstList)
            //{
            //    Console.WriteLine(item);
            //}
            // Removing
            Console.WriteLine("------------");
            Console.WriteLine("After Removing...");
            firstList.Remove("Germany");
            firstList.RemoveAt(0);
            foreach (var item in firstList)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("Count now is " + firstList.Count);
            // Remove all
            //firstList.Clear();
            // Contains
            Console.WriteLine("------------");
            Console.WriteLine(firstList.Contains("Egypt"));
            // GetRange
            secondList = firstList.GetRange(0, 3);
            Console.WriteLine("Now we are in the second list");
            foreach (var item in secondList)
            {
                Console.WriteLine(item);
            }
        }
    }
}



dictonary-
__________________

void main(){
    
    //creation

    Dictionary<int,string> names = new Dictionary<int,string>();
    //these are nothing but the datatype where key and vlaue is represented here the key is used to call the value
    //here the key is represented as int and value is in string

    //add
    name.Add(1,"moscow");
    name.Add(2,"rome");
    name.Add(3,"london");
    name.Add(4,"mardrid");
    name.Add(5,"berlin");
    name.Add(6,"rome");
    name.Add(7,"paris");


    //or

    Dictionary<int,string> names2 = new Dictionary<int,string>(){
        {1,"james"},
        {2,"amy"},
        {3,"shopie"}
    };


    //no two keys should be same 

    //display 

    for (int i=1;i < name.Count,i++){
        Console.WriteLine(name[name.Keys.ElementAt(i)]);//this can be helpful when the key is other datatype
        //(or)
        Console.WriteLine(name[i]);
    }

    //or

    foreach (var item in name){
        Console.WriteLine(item.key);
    }

    //or

    name.TryGetValue("4",out string result); // here the result is a varible which assigns the value 
    Console.WriteLine(result);

    //index

    //here the index is represneted by the key value so 
    Console.WriteLine(name[2]);

    //remove

    name.Remove(4);

    //remove all

    name.Clear();

    //contains

    Console.WriteLine(name.ContainsKey(5));
    console.writeLine(name.ContainsValue("halva"))




}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DictionaryApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating
            Dictionary<string, string> capitals = new Dictionary<string, string>();

            // Creating with initialization
            Dictionary<int, string> names = new Dictionary<int, string>()
            {
                { 1,"James"},
                { 2,"Jack"},
                { 3,"Emma"},
            };
            foreach (var item in names)
            {
                Console.WriteLine(item.Value);
            }
            // Add
            capitals.Add("Russia", "Moscow");
            capitals.Add("Italy", "Rome");
            capitals.Add("England", "London");
            capitals.Add("Spain", "Madrid");
            capitals.Add("Germany", "Berlin");
            // Displaying
            //foreach (var item in capitals)
            //{
            //    Console.WriteLine(item.Key);
            //}
            for (int i = 0; i < capitals.Count; i++)
            {
                Console.WriteLine(capitals[capitals.Keys.ElementAt(i)]);
            }
            // Index
            Console.WriteLine("--------");
            capitals["Italy"] = "Venice";
            Console.WriteLine(capitals["Italy"]);

            //Capacity

            // Try get value
            capitals.TryGetValue("Russia", out string result);
            if(result != null)
                Console.WriteLine("Result is " + result);
            // Remove
            capitals.Remove("Italy");
            Console.WriteLine("--------");
            Console.WriteLine("After removing");
            for (int i = 0; i < capitals.Count; i++)
            {
                Console.WriteLine(capitals[capitals.Keys.ElementAt(i)]);
            }
            Console.WriteLine(capitals.Count);
            // Remove all
            //capitals.Clear();
            Console.WriteLine(capitals.Count);
            // Contains
            Console.WriteLine(capitals.ContainsKey("France"));
        }
    }
}





Generic sorted list-
___________________________

Generic : SortedList
Represents a collection of key-value pairs that are sorted in ascending order of key.
✓ There is generic and non-generic SortedList.
✓ The key must be unique and cannot be null
✓ The value can be null or duplicate.
✓ Generic SortedList stores keys and values of specified data types.

void main(){
    
    //creating

    SortedList list = new SortedList(); //or
    SortedList<string,string> phonebook = new SortedList<string,string>();  //this is similar to dictonary

    //adding

    phonebook.Add("jack","123");
    phonebook.Add("jill","456");
    phonebook.Add("baba","789");
    phonebook.Add("naidu","741");
    phonebook.Add("majama","852");
    phonebook.Add("beedu","963");

    //displaying

    foreach (var item in phonebook){
        Console.WriteLine(item.key + item.Value);
    }

    //index

    Console.WriteLine(phonebook[jack]);

    //trygetvalue

    phonebook.TryGetValue("jack",out string number);
    Console.WriteLine(number);

    //remove

    phonebook.Remove('jill');
    phonebook.RemoveAt(1)

    //remove all

    phonebook.Clear();

    //contains

    Console.WriteLine(phonebook.ContainsKey("beedu"));
    Console.WriteLine(phonebook.ContainsValue("6969"))

}




Generic sorted Dicttionary - 
_____________________________________________

Generic : SortedDictionary
✓ SortedList uses less memory than SortedDictionary.
✓ SortedDictionary has faster insertion and removal operations for unsorted data.
✓ If the list is populated all at once from sorted data, SortedList is faster than
SortedDictionary

fasht but takes more memory

void main(){
    SortedDictionary<int,string> color = new SortedDictionary<int,string>();
    color.Add(4,"Blue");
    color.Add(1,"red");
    color.Add(2,"green");
    color.Add(8,"yellow");
    color.Add(10,"reder");
    color.Add(11,"cyan");

    foreach (var item in color){
        Console.WriteLine(item.Value);
    }

    colors[2]= "pink";

    //it prints sorted list with value if u want u can also prnt key it sortes the list by key value
}







SortedDictionary<TKey,TValue> Class
Reference
Definition
Namespace:
System.Collections.Generic
Assembly:
System.Collections.dll
Represents a collection of key/value pairs that are sorted on the key.

C#

Copy
public class SortedDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary
Type Parameters
TKey
The type of the keys in the dictionary.

TValue
The type of the values in the dictionary.

Inheritance
Object
SortedDictionary<TKey,TValue>
Implements
ICollection<KeyValuePair<TKey,TValue>>  IDictionary<TKey,TValue>  IEnumerable<KeyValuePair<TKey,TValue>>  IEnumerable<T>  IReadOnlyCollection<KeyValuePair<TKey,TValue>>  IReadOnlyDictionary<TKey,TValue>  ICollection  IDictionary  IEnumerable
Examples
The following code example creates an empty SortedDictionary<TKey,TValue> of strings with string keys and uses the Add method to add some elements. The example demonstrates that the Add method throws an ArgumentException when attempting to add a duplicate key.

The example uses the Item[] property (the indexer in C#) to retrieve values, demonstrating that a KeyNotFoundException is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.

The example shows how to use the TryGetValue method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the ContainsKey method to test whether a key exists before calling the Add method.

The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the Keys property and the Values property.

Finally, the example demonstrates the Remove method.

C#

Copy
using System;
using System.Collections.Generic;

public class Example
{
    public static void Main()
    {
        // Create a new sorted dictionary of strings, with string
        // keys.
        SortedDictionary<string, string> openWith =
            new SortedDictionary<string, string>();

        // Add some elements to the dictionary. There are no
        // duplicate keys, but some of the values are duplicates.
        openWith.Add("txt", "notepad.exe");
        openWith.Add("bmp", "paint.exe");
        openWith.Add("dib", "paint.exe");
        openWith.Add("rtf", "wordpad.exe");

        // The Add method throws an exception if the new key is
        // already in the dictionary.
        try
        {
            openWith.Add("txt", "winword.exe");
        }
        catch (ArgumentException)
        {
            Console.WriteLine("An element with Key = \"txt\" already exists.");
        }

        // The Item property is another name for the indexer, so you
        // can omit its name when accessing elements.
        Console.WriteLine("For key = \"rtf\", value = {0}.",
            openWith["rtf"]);

        // The indexer can be used to change the value associated
        // with a key.
        openWith["rtf"] = "winword.exe";
        Console.WriteLine("For key = \"rtf\", value = {0}.",
            openWith["rtf"]);

        // If a key does not exist, setting the indexer for that key
        // adds a new key/value pair.
        openWith["doc"] = "winword.exe";

        // The indexer throws an exception if the requested key is
        // not in the dictionary.
        try
        {
            Console.WriteLine("For key = \"tif\", value = {0}.",
                openWith["tif"]);
        }
        catch (KeyNotFoundException)
        {
            Console.WriteLine("Key = \"tif\" is not found.");
        }

        // When a program often has to try keys that turn out not to
        // be in the dictionary, TryGetValue can be a more efficient
        // way to retrieve values.
        string value = "";
        if (openWith.TryGetValue("tif", out value))
        {
            Console.WriteLine("For key = \"tif\", value = {0}.", value);
        }
        else
        {
            Console.WriteLine("Key = \"tif\" is not found.");
        }

        // ContainsKey can be used to test keys before inserting
        // them.
        if (!openWith.ContainsKey("ht"))
        {
            openWith.Add("ht", "hypertrm.exe");
            Console.WriteLine("Value added for key = \"ht\": {0}",
                openWith["ht"]);
        }

        // When you use foreach to enumerate dictionary elements,
        // the elements are retrieved as KeyValuePair objects.
        Console.WriteLine();
        foreach( KeyValuePair<string, string> kvp in openWith )
        {
            Console.WriteLine("Key = {0}, Value = {1}",
                kvp.Key, kvp.Value);
        }

        // To get the values alone, use the Values property.
        SortedDictionary<string, string>.ValueCollection valueColl =
            openWith.Values;

        // The elements of the ValueCollection are strongly typed
        // with the type that was specified for dictionary values.
        Console.WriteLine();
        foreach( string s in valueColl )
        {
            Console.WriteLine("Value = {0}", s);
        }

        // To get the keys alone, use the Keys property.
        SortedDictionary<string, string>.KeyCollection keyColl =
            openWith.Keys;

        // The elements of the KeyCollection are strongly typed
        // with the type that was specified for dictionary keys.
        Console.WriteLine();
        foreach( string s in keyColl )
        {
            Console.WriteLine("Key = {0}", s);
        }

        // Use the Remove method to remove a key/value pair.
        Console.WriteLine("\nRemove(\"doc\")");
        openWith.Remove("doc");

        if (!openWith.ContainsKey("doc"))
        {
            Console.WriteLine("Key \"doc\" is not found.");
        }
    }
}

/* This code example produces the following output:

An element with Key = "txt" already exists.
For key = "rtf", value = wordpad.exe.
For key = "rtf", value = winword.exe.
Key = "tif" is not found.
Key = "tif" is not found.
Value added for key = "ht": hypertrm.exe

Key = bmp, Value = paint.exe
Key = dib, Value = paint.exe
Key = doc, Value = winword.exe
Key = ht, Value = hypertrm.exe
Key = rtf, Value = winword.exe
Key = txt, Value = notepad.exe

Value = paint.exe
Value = paint.exe
Value = winword.exe
Value = hypertrm.exe
Value = winword.exe
Value = notepad.exe

Key = bmp
Key = dib
Key = doc
Key = ht
Key = rtf
Key = txt

Remove("doc")
Key "doc" is not found.
 */


pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SortedDictionary
{
    class Program
    {
        static void Main(string[] args)
        {
            SortedDictionary<int, string> colors = new SortedDictionary<int, string>();
            colors.Add(4, "Blue");
            colors.Add(2, "Yellow");
            colors.Add(1, "Orange");
            colors.Add(5, "Black");
            colors.Add(3, "White");

            foreach (var item in colors)
            {
                Console.WriteLine(item.Value);
            }

            colors[2] = "Purple";

            foreach (var item in colors)
            {
                Console.WriteLine(item.Value);
            }

            Console.WriteLine("After Removing");
            colors.Remove(1);
                foreach (var item in colors)
            {
                Console.WriteLine(item.Value);
            }

            colors.Clear();
            
        }
    }
}




stacks generic-
_______________________________________________________________________________________________________________________________________________________________________________________

Stacks
Stack represents a last-in first-out (LIFO) collection of objects.
Push Pop

it uses LIFO (last in first out)

void main(){
    Stack<string> ram = new Stack<string>();

    ram.Push("eam");
    ram.Push("sate");
    ram.Push("babu");
    ram.Push("bema");
    ram.Push("mugil");

    foreach (var item in ram){
        Console.WriteLine(item);
    }

    //top disply

    Console.WriteLine(ram.Peek());

}




pro2______________________________________________________________________________________________________________________________________________________________________________________________________
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericStacks
{
    class Program
    {
        static void Main(string[] args)
        {
            Stack<string> Ram = new Stack<string>();

            Ram.Push("Visual Studio");
            Ram.Push("Photoshop");
            Ram.Push("Google Chrome");
            Ram.Push("NotePad");
            Ram.Push("Excel");

            Console.WriteLine("What is on the top is " + Ram.Peek());
            Ram.Pop();
            Ram.Pop();
            Console.WriteLine("What is on the top is " + Ram.Peek());
            foreach (var item in Ram)
            {
                Console.WriteLine(item);
            }
        }
    }
}






generic queue-
__________________

Queues
Queue represents a first-in first-out (FIFO) collection of objects.
Enqueue Dequeue

same as the queue but with datatype

void main(){
    Queue<DateTime> arrivel = new Queue<DateTime>();

    arrivel.enque(new DateTime(2017,01,01));
    arrivel.enque(new DateTime(2018,01,01));
    arrivel.enque(new DateTime(2019,01,01));
    arrivel.enque(new DateTime(2020,01,01));

    Console.WriteLine("At the top" + arrivel.Peek()); //displays the first data

    foreach (var item in arrivel){
        Console.WriteLine(item);
    }

    arrivel.Dequeue();
}

//samea as stack but with same datatype




pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericQueues
{
    class Program
    {
        static void Main(string[] args)
        {
            Queue<DateTime> arrivals = new Queue<DateTime>();

            arrivals.Enqueue(new DateTime(2017, 01, 01));
            arrivals.Enqueue(new DateTime(2016, 10, 27));
            arrivals.Enqueue(new DateTime(2018, 07, 02));

            Console.WriteLine("At the top " + arrivals.Peek());
            Console.WriteLine("--------");
            foreach (var item in arrivals)
            {
                Console.WriteLine(item);
            }

            arrivals.Dequeue();
            arrivals.Dequeue();

            Console.WriteLine("At the top " + arrivals.Peek());
            Console.WriteLine("--------");
            foreach (var item in arrivals)
            {
                Console.WriteLine(item);
            }
        }
    }
}






key value pair - 
__________________

KeyValuePair
KeyValuePair stores two values together. It is a single generic struct

keyvaluepair(){
var loc = new List<KeyValuePair<string,string>>();

loc.Add(new KeyValuePair<string,string>("russia","moscow"));
loc.Add(new KeyValuePair<string,string>("sweden","blockhome"));
loc.Add(new KeyValuePair<string,string>("chennai","tnagar"));
loc.Add(new KeyValuePair<string,string>("chaid","republic"));

loc.RemoveAt(1); //removes russia 

foreach (var item in loc){
    Console.WriteLine(item.loc);
}

//returing as a function object

public static KeyValuePair<string,string> main(){
    string fname="tony";
    string lname="stark";

    return new KeyValuePair<string,string>(fname,lname);

}

//priinting from main function

Console.WriteLine(main());
Console.WriteLine(main().Key);
Console.WriteLine(main().Value);

}



pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KeyValuePairApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var capitals = new List<KeyValuePair<string,string>>();

            capitals.Add(new KeyValuePair<string, string>("Russia", "Moscow"));
            capitals.Add(new KeyValuePair<string, string>("Sweden", "Stockholm"));
            capitals.Add(new KeyValuePair<string, string>("Portual", "Lisbon"));
            capitals.Add(new KeyValuePair<string, string>("Japan", "Tokoyo"));

            capitals.RemoveAt(1);

            foreach (var item in capitals)
            {
                Console.WriteLine(item.Key);
            }

            Console.WriteLine(GetFirstAndLastName().Value);
        }

        public static KeyValuePair<string,string> GetFirstAndLastName()
        {
            string firstName = "Tony";
            string lastName = "Stark";

            return new KeyValuePair<string, string>(firstName,lastName);
        }


    }
}





name value collection-
___________________________

void main(){
    //creating

    NameValueCollection sities = new NameValueCollection();

    //adding

    sities.Add("german","germani");
    sities.Add("parak","prank");
    sities.Add("bhai","india");
    sities.Add("mc","chin");
    sities.Add("bc","bak");

    //display

    foreach(string item in sities){
        Console.WriteLine(sities[item]);
    }

    //set

    sities.set("parak","prank");

    //contains

    Console.WriteLine(sities.HashKeys());

    //remove

    sities.Remove("germany");

    //Remove all

    sities.Clear();
}



pro2______________


using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NameValueCollectionApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creating 
            NameValueCollection cities = new NameValueCollection();
            // Adding 
            cities.Add("Germany", "Berlin");
            cities.Add("Germany", "Hamburg");
            cities.Add("Germany", "Frankfurt");
            cities.Add("Italy", "Rome");
            cities.Add("Italy", "Milan");
            // Displaying
            foreach (string item in cities)
            {
                Console.Write(item + ": ");
                Console.WriteLine(cities[item]);
            }
            // Set
            cities.Set("Italy", "Venice");
            foreach (string item in cities)
            {
                Console.Write(item + ": ");
                Console.WriteLine(cities[item]);
            }
            // Contains
            //cities.Clear();
            //Console.WriteLine(cities.HasKeys());
            // Remove
            cities.Remove("Italy");
            foreach (string item in cities)
            {
                Console.Write(item + ": ");
                Console.WriteLine(cities[item]);
            }
            // Remove all

        }
    }
}




generic class - 
___________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericClassesApp
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * Empire State : 381m, 443m, 365000t, NY
             * Burj Khalifa : 828m, 830m, 450000t, Dubai
             * Eiffel Tower : 300m, 324,  7300t  , Paris 
             */
            Buildings<int> empireState = new Buildings<int>();
            empireState.Name = "Empire State";
            empireState.City = "New York";
            empireState.Height = 443;
            empireState.Weight = 365000;

            Console.WriteLine("Name " + empireState.Name);
            Console.WriteLine("City " + empireState.City);
            Console.WriteLine("Height " + empireState.Height);
            Console.WriteLine("Weight " + empireState.Weight);


            Buildings<double> burjKhalifa = new Buildings<double>();
            burjKhalifa.Name = "Burj Khalifa";
            burjKhalifa.City = "Dubai";
            burjKhalifa.Height = 830;
            burjKhalifa.Weight = 450000;

            Console.WriteLine("-------------");
            Console.WriteLine("Name " + burjKhalifa.Name);
            Console.WriteLine("City " + burjKhalifa.City);
            Console.WriteLine("Height " + burjKhalifa.Height);
            Console.WriteLine("Weight " + burjKhalifa.Weight);

            Buildings<float> eiffelTower = new Buildings<float>();
            eiffelTower.Name = "Eiffel Tower";
            eiffelTower.City = "Paris";
            eiffelTower.Height = 324;
            eiffelTower.Weight = 7300;
        }
    }

    class Buildings<T>
    {
        private string name;
                
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        private string city;

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        private T height;

        public T Height
        {
            get { return height; }
            set { height = value; }
        }

        private T weight;

        public T Weight
        {
            get { return weight; }
            set { weight = value; }
        }




    }
}



pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericClassesApp
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * Empire State : 381m, 443m, 365000t, NY
             * Burj Khalifa : 828m, 830m, 450000t, Dubai
             * Eiffel Tower : 300m, 324,  7300t  , Paris 
             */
            Buildings<int> empireState = new Buildings<int>();
            empireState.Name = "Empire State";
            empireState.City = "New York";
            empireState.Height = 443;
            empireState.Weight = 365000;

            Console.WriteLine("Name " + empireState.Name);
            Console.WriteLine("City " + empireState.City);
            Console.WriteLine("Height " + empireState.Height);
            Console.WriteLine("Weight " + empireState.Weight);


            Buildings<double> burjKhalifa = new Buildings<double>();
            burjKhalifa.Name = "Burj Khalifa";
            burjKhalifa.City = "Dubai";
            burjKhalifa.Height = 830;
            burjKhalifa.Weight = 450000;

            Console.WriteLine("-------------");
            Console.WriteLine("Name " + burjKhalifa.Name);
            Console.WriteLine("City " + burjKhalifa.City);
            Console.WriteLine("Height " + burjKhalifa.Height);
            Console.WriteLine("Weight " + burjKhalifa.Weight);

            Buildings<float> eiffelTower = new Buildings<float>();
            eiffelTower.Name = "Eiffel Tower";
            eiffelTower.City = "Paris";
            eiffelTower.Height = 324;
            eiffelTower.Weight = 7300;
        }
    }

    class Buildings<T>
    {
        private string name;
                
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        private string city;

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        private T height;

        public T Height
        {
            get { return height; }
            set { height = value; }
        }

        private T weight;

        public T Weight
        {
            get { return weight; }
            set { weight = value; }
        }




    }
}

pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * 1. (The Lord of the Rings: The Fellowship of the Ring) (19 Dec 2001) (8.8) (Peter Jackson)
             * 2. (The Lord of the Rings: The Two Towers) (18 Dec 2002) (8.7) (Peter Jackson)
             * 3. (The Lord of the Rings: The Return of the King) (8.9) (17 Dec 2003) 
             * -------------------------------------------------------------------------------------
             * 1. (Batman Begins) (15 Jun 2005) (8.3) (Christopher Nolan)
             * 2. (The Dark Knight) (18  Jul 2008) (9.0) (Christopher Nolan)
             * 3. (The Dark Knight Rises) (20 Jul 2012) (8.4) (Christopher Nolan)
             */

            var firstList = new List<Movies<double, DateTime>>();
            var secondList = new List<Movies<float, int>>();

            var darkKnight1 = new Movies<float, int>();
            darkKnight1.MovieName = "Batman Begins";
            darkKnight1.Director = "Christopher Nolan";
            darkKnight1.Rate = 8.3f;
            darkKnight1.ReleaseDate = 2005;

            var darkKnight2 = new Movies<float, int>();
            darkKnight2.MovieName = "The Dark Knight";
            darkKnight2.Director = "Christopher Nolan";
            darkKnight2.Rate = 9.0f;
            darkKnight2.ReleaseDate = 2008;

            var darkKnight3 = new Movies<float, int>();
            darkKnight3.MovieName = "The Dark Knight Rises";
            darkKnight3.Director = "Christopher Nolan";
            darkKnight3.Rate = 8.4f;
            darkKnight3.ReleaseDate = 2012;

            var lordofTheRings1 = new Movies<double,DateTime>();
            lordofTheRings1.MovieName = "The Lord of the Rings: The Fellowship of the Ring";
            lordofTheRings1.Director = "Peter Jackson";
            lordofTheRings1.Rate = 8.8;
            lordofTheRings1.ReleaseDate = new DateTime(2001, 12, 19);

            var lordofTheRings2 = new Movies<double, DateTime>();
            lordofTheRings2.MovieName = "The Lord of the Rings: The Two Towers";
            lordofTheRings2.Director = "Peter Jackson";
            lordofTheRings2.Rate = 8.7;
            lordofTheRings2.ReleaseDate = new DateTime(2002, 12, 18);

            var lordofTheRings3 = new Movies<double, DateTime>();
            lordofTheRings3.MovieName = "The Lord of the Rings: The Return of the King";
            lordofTheRings3.Director = "Peter Jackson";
            lordofTheRings3.Rate = 8.9;
            lordofTheRings3.ReleaseDate = new DateTime(2003, 12, 17);


            firstList.Add(lordofTheRings1);
            firstList.Add(lordofTheRings2);
            firstList.Add(lordofTheRings3);

            secondList.Add(darkKnight1);
            secondList.Add(darkKnight2);
            secondList.Add(darkKnight3);
        }
    }

    class Movies<T, U>
    {
        private string movieName;
            
        public string MovieName
        {
            get { return movieName; }
            set { movieName = value; }
        }

        private string director;

        public string Director
        {
            get { return director; }
            set { director = value; }
        }

        private U releaseDate;

        public U ReleaseDate
        {
            get { return releaseDate; }
            set { releaseDate = value; }
        }

        private T rate;

        public T Rate
        {
            get { return rate; }
            set { rate = value; }
        }



    }
}




C# Generics
Generic means the general form, not specific. In C#, generic means not specific to a particular data type.

C# allows you to define generic classes, interfaces, abstract classes, fields, methods, static methods, properties, events, delegates, and operators using the type parameter and without the specific data type. A type parameter is a placeholder for a particular type specified when creating an instance of the generic type.

A generic type is declared by specifying a type parameter in an angle brackets after a type name, e.g. TypeName<T> where T is a type parameter.

Generic Class
Generic classes are defined using a type parameter in an angle brackets after the class name. The following defines a generic class.

Example: Define Generic Class
class DataStore<T>
{
    public T Data { get; set; }
}
Above, the DataStore is a generic class. T is called type parameter, which can be used as a type of fields, properties, method parameters, return types, and delegates in the DataStore class. For example, Data is generic property because we have used a type parameter T as its type instead of the specific data type.

 Note
It is not required to use T as a type parameter. You can give any name to a type parameter. Generally, T is used when there is only one type parameter. It is recommended to use a more readable type parameter name as per requirement like TSession, TKey, TValue etc. Learn more about Type Parameter Naming Guidelines
You can also define multiple type parameters separated by a comma.

Example: Generic Class with Multiple Type Parameters
class KeyValuePair<TKey, TValue>
{
    public TKey Key { get; set; }
    public TValue Value { get; set; }
}
Instantiating Generic Class
You can create an instance of generic classes by specifying an actual type in angle brackets. The following creates an instance of the generic class DataStore.

DataStore<string> store = new DataStore<string>();
Above, we specified the string type in the angle brackets while creating an instance. So, T will be replaced with a string type wherever T is used in the entire class at compile-time. Therefore, the type of Data property would be a string.

The following figure illustrates how generics works.

C# Generics
You can assign a string value to the Data property. Trying to assign values other than string will result in a compile-time error.

DataStore<string> store = new DataStore<string>();
store.Data = "Hello World!";
//store.Data = 123; //compile-time error
You can specify the different data types for different objects, as shown below.

Example: Generic class
DataStore<string> strStore = new DataStore<string>();
strStore.Data = "Hello World!";
//strStore.Data = 123; // compile-time error

DataStore<int> intStore = new DataStore<int>();
intStore.Data = 100;
//intStore.Data = "Hello World!"; // compile-time error

KeyValuePair<int, string> kvp1 = new KeyValuePair<int, string>();
kvp1.Key = 100;
kvp1.Value = "Hundred";

KeyValuePair<string, string> kvp2 = new KeyValuePair<string, string>();
kvp2.Key = "IT";
kvp2.Value = "Information Technology";
Generic Class Characteristics
A generic class increases the reusability. The more type parameters mean more reusable it becomes. However, too much generalization makes code difficult to understand and maintain.
A generic class can be a base class to other generic or non-generic classes or abstract classes.
A generic class can be derived from other generic or non-generic interfaces, classes, or abstract classes.
Generic Fields
A generic class can include generic fields. However, it cannot be initialized.

Example: Generic Field
class DataStore<T>
{
    public T data;
}
The following declares a generic array.

Example: Generic Array
class DataStore<T>
{
    public T[] data = new T[10];
}
Generic Methods
A method declared with the type parameters for its return type or parameters is called a generic method.

Example: Generic Methods
class DataStore<T>
{
    private T[] _data = new T[10];
    
    public void AddOrUpdate(int index, T item)
    {
        if(index >= 0 && index < 10)
            _data[index] = item;
    }

    public T GetData(int index)
    {
        if(index >= 0 && index < 10)
            return _data[index];
        else 
            return default(T);
    }
}
Above, the AddorUpdate() and the GetData() methods are generic methods. The actual data type of the item parameter will be specified at the time of instantiating the DataStore<T> class, as shown below.

Example: Generic Methods
DataStore<string> cities = new DataStore<string>();
cities.AddOrUpdate(0, "Mumbai");
cities.AddOrUpdate(1, "Chicago");
cities.AddOrUpdate(2, "London");

DataStore<int> empIds = new DataStore<int>();
empIds.AddOrUpdate(0, 50);
empIds.AddOrUpdate(1, 65);
empIds.AddOrUpdate(2, 89);
The generic parameter type can be used with multiple parameters with or without non-generic parameters and return type. The followings are valid generic method overloading.

Example: Generic Method Overloading
public void AddOrUpdate(int index, T data) { }
public void AddOrUpdate(T data1, T data2) { }
public void AddOrUpdate<U>(T data1, U data2) { }
public void AddOrUpdate(T data) { }
A non-generic class can include generic methods by specifying a type parameter in angle brackets with the method name, as shown below.

Example: Generic Method in Non-generic Class
class Printer
{
    public void Print<T>(T data)
    {
        Console.WriteLine(data);
    }
}

Printer printer = new Printer();
printer.Print<int>(100);
printer.Print(200); // type infer from the specified value
printer.Print<string>("Hello");
printer.Print("World!"); // type infer from the specified value
Advantages of Generics
Generics increase the reusability of the code. You don't need to write code to handle different data types.
Generics are type-safe. You get compile-time errors if you try to use a different data type than the one specified in the definition.
Generic has a performance advantage because it removes the possibilities of boxing and unboxing.






Tuples-
___________

tuples can be used to store many datatypes

Tuples
A tuple is a data structure that has a specific number and sequence of elements
For example a person’s income
person income
2017
income
2016
income
2015
John 50,000 60,000 70,000
.NET Framework directly supports tuples with one to seven elements.
But can create tuples of eight or more elements by nesting tuple objects.

void main(){
    //creation
    var emp = new Tuple<int,string,string,DateTime,bool>(100,"spacex","aropce",new DateTime(2017,10,15),true,)
    Console.WriteLine(emp.Item1);
    Console.WriteLine(emp.Item2);
    Console.WriteLine(emp.Item3);
    Console.WriteLine(((DateTime)(emp.Item4).ToShortDateString()));
    Console.WriteLine(emp.Item5);

    //or

    var studentinfo = Tuple.Create(5,"john","abrahim",new DateTime(2003,10,27));
    Console.WriteLine(studentinfo.Item1);
    Console.WriteLine(studentinfo.Item2);
    Console.WriteLine(studentinfo.Item3);
    Console.WriteLine(studentinfo.Item4);

}



pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TuplesApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var empInfo = new Tuple<int, string, string, DateTime, bool>(100, "Jack", "William", new DateTime(2017, 10, 15), true);
            Console.WriteLine(empInfo.Item1);
            Console.WriteLine(empInfo.Item2);
            Console.WriteLine(empInfo.Item3);
            Console.WriteLine(((DateTime)(empInfo.Item4)).ToShortDateString());
            Console.WriteLine(empInfo.Item5);

            var studentInfo = Tuple.Create(5, "John", "Cavin", new DateTime(2003, 10, 27));
            Console.WriteLine(studentInfo.Item1);
            Console.WriteLine(studentInfo.Item2);
            Console.WriteLine(studentInfo.Item3);
            Console.WriteLine(studentInfo.Item4);
        }
    }
}




nested tuple - 
___________________________

this is tuple inside the tuple

void main(){
    //creation

    var emp = new Tuple<int,string,Tuple<decimal,int>>(10,"asd",Tuple.Create(2000m,500));
    Console.WriteLine(emp.Rest.item1);//this is to acess the tuple inside the tuple
}



pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedTuples
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * 1.int    : employee number
             * 2.string : first name
             * 3.string : last name
             * 4.string : address
             * 5.string : city
             * 6.string : job title
             * 7.string : nationality
             * 8.tuple  : last 5 salaries
             */

            var employeeInfo = new Tuple<int, string, string, string, string, string, string, Tuple<decimal, decimal, decimal, decimal, decimal>>
                (105, "James", "Watson", "", "", "", "", Tuple.Create(8000m, 3000m, 4000m, 5000m, 5000m));

            Console.WriteLine("Employee name is "+ employeeInfo.Item2);
            Console.WriteLine("Last 5 salaries");
            Console.WriteLine(employeeInfo.Rest.Item1);
            Console.WriteLine(employeeInfo.Rest.Item2);
            Console.WriteLine(employeeInfo.Rest.Item3);
            Console.WriteLine(employeeInfo.Rest.Item4);
            Console.WriteLine(employeeInfo.Rest.Item5);
        }
    }
}




how to call tuples as an argument in a function
_____________________________________________________________________________

void main (){
    var aria = Tuple.Create(12,"asd","asd");
    var sansa = Tuple.Create(11,"bahubali","maheshmati");
    Dipinfo(aria);
    Dipinfo(sansa);
    Dipinfo(retin());
}

//passing

void Dipinfo(Tuple<int,string,string> perinfo){
    Console.WriteLine(perinfo.Item1);
    Console.WriteLine(perinfo.Item2);
    Console.WriteLine(perinfo.Item3);
}

//returning

public static Tuple<int,string,string> retin(){
    var info = Tuple.Create(44,"baba"."naidu");
    return info;
}


pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TuplesWithMethods
{
    class Program
    {
        static void Main(string[] args)
        {
            var aria = Tuple.Create(12, "Aria", "Stark", "Winterfell");
            DisplayInformation(aria);
            var sansa = Tuple.Create(18, "Sansa", "Stark", "Winterfell");
            DisplayInformation(sansa);
            Console.WriteLine("------------------");
            Console.WriteLine(GetInformation().Item1);
            Console.WriteLine(GetInformation().Item2);
            Console.WriteLine(GetInformation().Item3);
            Console.WriteLine(GetInformation().Item4);

        }

        public static void DisplayInformation(Tuple<int,string,string,string> personInfo)
        {
            Console.WriteLine(personInfo.Item1);
            Console.WriteLine(personInfo.Item2);
            Console.WriteLine(personInfo.Item3);
            Console.WriteLine(personInfo.Item4);
        }

        public static Tuple<int, string, string, string> GetInformation()
        {
            var info = Tuple.Create(25, "Rob", "Stark", "Winterfell");

            return info;
        }
    }
}




value tuples-
__________________

these are tuple where no Tuple key word is used

void main(){
    //creation and print
    (int,string)name = (1,"ronaldo")
    Console.WriteLine(name.Item1);
    Console.WriteLine(name.Item2);
    
    //or

    (int playerno,string playername) player = (1,"messi")
    Console.WriteLine(player.playerno);
    Console.WriteLine(player.playername);

    //or

    var player = (1,"baba naidu");
    Console.WriteLine(player.Item1);
    Console.WriteLine(player.Item2);

    //or

    var player = (plno:1,plname:"shejumping");
    Console.WriteLine(player.plno);
    Console.WriteLine(player.plname);

}

pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ValueTupleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Install-Package "System.ValueTuple"

            int x = 0;

            (int playerNo, string playerName, int playerGoals) ronaldo = (7, "Ronaldo", 55);
            Console.WriteLine(ronaldo.playerNo);
            Console.WriteLine(ronaldo.playerName);
            Console.WriteLine(ronaldo.playerGoals);
            Console.WriteLine();

            var messi = (playerNo:10, playerName:"Messi", playerGoals:60);
            Console.WriteLine(messi.playerNo);
            Console.WriteLine(messi.playerName);
            Console.WriteLine(messi.playerGoals);
            Console.WriteLine();

            

        }
    }
}



nested value tuples-
___________________________

void main(){
    var playeropp = (plno:1,plname:"shejumping");
    var player = (plno:2,plname:"putin",plopp:playeropp);
    Console.WriteLine(player.plno);
    Console.WriteLine(player.plname);
    Console.WriteLine(player.plopp.plno);
    Console.WriteLine(player.plopp.plname);//tuple inside the tuple
}



pro2______________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NestedValueTuple
{
    class Program
    {
        static void Main(string[] args)
        {
            var ronaldoGoals = (Year2017:64,Year2016:60,Year2015:50,Year2014:55);
            var ronaldo = (playerNo: 7, playerName: "Ronaldo", playerGoals:ronaldoGoals);

            Console.WriteLine(ronaldo.playerNo);
            Console.WriteLine(ronaldo.playerName);
            Console.WriteLine(ronaldo.playerGoals.Year2017);
            Console.WriteLine(ronaldo.playerGoals.Year2016);
            Console.WriteLine(ronaldo.playerGoals.Year2015);
            Console.WriteLine(ronaldo.playerGoals.Year2014);
        }
    }
}





value tuple with functions aka methods-
_____________________________________________ 

void main(){
    var ronaldo = (plno:7,plname:"ronaldo");
    var giggs = (plno:10,plname:"giggs");

    disp(ronaldo);
    disp(giggs);
    disp(dipfuc());

    void disp((int plno,string plname) player){
        Console.WriteLine(player.plno);
        Console.WriteLine(player.plname);
    }

    //declaring a function with the return data type as this tuple
    (int,str) dipfuc(){
        var messi = (10,"messi");
        return messi
    }

}

pro2-
________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ValueTuplesWithMethods
{
    class Program
    {
        static void Main(string[] args)
        {
            var ronaldo = (7, "Ronaldo", 60);
            var giggs = (10, "Giggs", 40);

            DisplayPlayerInformation(ronaldo);
            DisplayPlayerInformation(giggs);

            DisplayPlayerInformation(DisplayPlayerInformation());
        }

        public static void DisplayPlayerInformation((int playerNo, string playerName, int playerGoal) player)
        {
            Console.WriteLine(player.playerNo);
            Console.WriteLine(player.playerName);
            Console.WriteLine(player.playerGoal);
            Console.WriteLine("-------------------");
        }

        public static (int, string, int) DisplayPlayerInformation()
        {
            var messi = (10, "Messi", 60);
            return messi;
        }
    }
}







egcode -

_______________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo11
{
    class Program
    {
        static void Main(string[] args)
        {
            //Assignment No 11
            var playersList = new List<Tuple<int, string, int>>();
            AddPlayer(Tuple.Create(7, "Ronaldo", 55), ref playersList);
            AddPlayer(Tuple.Create(17, "Rooney", 55), ref playersList);
            AddPlayer(Tuple.Create(10, "Messi", 55), ref playersList, 0);

            RemovePlayer(1, ref playersList);

            foreach (var player in playersList)
            {
                Console.WriteLine(player.Item1);
                Console.WriteLine(player.Item2);
                Console.WriteLine(player.Item3);
                Console.WriteLine("---------");
            }
        }

        public static void AddPlayer(Tuple<int, string, int> player, ref List<Tuple<int, string, int>> list)
        {
            list.Add(player);
        }

        public static void AddPlayer(Tuple<int, string, int> player, ref List<Tuple<int, string, int>> list, int index)
        {
            list.Insert(index, player);
        }

        public static void RemovePlayer(int index, ref List<Tuple<int, string, int>> list)
        {
            list.RemoveAt(index);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TuplesExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            var employeesInformation = new List<Tuple<int, string, string, DateTime>>();
            employeesInformation.Add(new Tuple<int, string, string, DateTime>(3, "Zack", "Peter", new DateTime(2017, 11, 25)));
            employeesInformation.Add(Tuple.Create(1, "Adam", "Green", new DateTime(2015, 01, 01)));
            employeesInformation.Add(Tuple.Create(4, "John", "Smith", new DateTime(2016, 10, 25)));
            employeesInformation.Add(Tuple.Create(2, "Emma", "Watson", new DateTime(2017, 10, 25)));

            Console.WriteLine("Before sorting");
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }

            Console.WriteLine("\nAfter sorting");
            employeesInformation.Sort();
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }

            Console.WriteLine("\nAfter reversing");
            employeesInformation.Reverse();
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }


        }
    }
}


________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TuplesExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            var employeesInformation = new List<Tuple<int, string, string, DateTime>>();
            employeesInformation.Add(new Tuple<int, string, string, DateTime>(3, "Zack", "Peter", new DateTime(2017, 11, 25)));
            employeesInformation.Add(Tuple.Create(1, "Adam", "Green", new DateTime(2015, 01, 01)));
            employeesInformation.Add(Tuple.Create(4, "John", "Smith", new DateTime(2016, 10, 25)));
            employeesInformation.Add(Tuple.Create(2, "Emma", "Watson", new DateTime(2017, 10, 25)));

            Console.WriteLine("Before sorting");
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }

            Console.WriteLine("\nAfter sorting");
            employeesInformation.Sort();
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }

            Console.WriteLine("\nAfter reversing");
            employeesInformation.Reverse();
            foreach (var employee in employeesInformation)
            {
                Console.WriteLine($"{employee.Item1},{employee.Item2},{employee.Item3},{employee.Item4}");
            }


        }
    }
}




________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo13
{
    class Program
    {
        static void Main(string[] args)
        {
            var empInfo = new Tuple<string, string, string, string, string, string, string,
    Tuple<decimal, decimal, decimal, decimal, decimal, decimal, decimal,
    Tuple<int, int, int, int, int>>>("", "", "", "", "", "", "",
    new Tuple<decimal, decimal, decimal, decimal, decimal, decimal, decimal, Tuple<int, int, int, int, int>>
    (0m, 1m, 2m, 3m, 4m, 5m, 6m, Tuple.Create(100, 200, 300, 400, 500)));

            Console.WriteLine(empInfo.Rest.Rest.Item5);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo14
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Clubs> ronaldoClubs = new List<Clubs>();
            ronaldoClubs.Add(Clubs.ManchesterUnited);
            ronaldoClubs.Add(Clubs.RealMadrid);

            List<Clubs> rooneyClubs = new List<Clubs>();
            rooneyClubs.Add(Clubs.Everton);
            rooneyClubs.Add(Clubs.ManchesterUnited);

            var listofPlayers = new List<(int playerNo, string playerName, int playerGoals, List<Clubs> clubs, Countries country)>();

            listofPlayers.Add((7, "Ronaldo", 55, ronaldoClubs, Countries.Portugal));
            listofPlayers.Add((10, "Rooney", 35, rooneyClubs, Countries.UnitedKingdom));

            foreach (var player in listofPlayers)
            {
                Console.Write($"\n" +
                    $"Player no : {player.playerNo} \nPlayer name : {player.playerName} " +
                    $"\nPlayer goals : {player.playerGoals} \nCountry : {player.country} \nClubs : ");

                foreach (var club in player.clubs)
                {
                    Console.Write(club + "  ");
                }
                Console.WriteLine("\n___________________________");
            }
        }
    }

    enum Clubs
    {
        RealMadrid,
        Barcelona,
        ManchesterUnited,
        Chelsea,
        Arsenal,
        NewcastleUnited,
        Everton,
        Schalke,
        InterMilan,
        ASRoma,
        TottenhamHotspur,
        AtleticoMadrid,
        BorussiaDortmund,
        ManchesterCity,
        Juventus,
        ParisSaintGermain,
        ACMilan,
        Liverpool,
        BayernMunich

    }

    enum Countries
    {
        Afghanistan,
        Albania,
        Algeria,
        Angola,
        Argentina,
        Australia,
        Austria,
        Bahamas,
        Bahrain,
        Bangladesh,
        Belarus,
        Belgium,
        Bolivia,
        Botswana,
        Brazil,
        Brunei,
        Bulgaria,
        BurkinaFaso,
        Burundi,
        Cambodia,
        Cameroon,
        Canada,
        Chad,
        Chile,
        China,
        Colombia,
        Comoros,
        CostaRica,
        Croatia,
        Cuba,
        Cyprus,
        CzechRepublic,
        Denmark,
        Ecuador,
        Egypt,
        ElSalvador,
        Estonia,
        Ethiopia,
        Finland,
        France,
        Gabon,
        Gambia,
        Georgia,
        Germany,
        Ghana,
        Greece,
        Greenland,
        Guatemala,
        Haiti,
        Honduras,
        HongKong,
        Hungary,
        Iceland,
        India,
        Indonesia,
        Iran,
        Iraq,
        Ireland,
        Israel,
        Italy,
        Jamaica,
        Japan,
        Jordan,
        Kazakhstan,
        Kenya,
        Kosovo,
        Kuwait,
        Latvia,
        Lebanon,
        Liberia,
        Libya,
        Liechtenstein,
        Lithuania,
        Luxembourg,
        Macedonia,
        Madagascar,
        Malawi,
        Malaysia,
        Maldives,
        Mali,
        Malta,
        Mauritius,
        Mexico,
        Moldova,
        Monaco,
        Mongolia,
        Montenegro,
        Morocco,
        Mozambique,
        Namibia,
        Nepal,
        Netherlands,
        NewZealand,
        Nicaragua,
        Niger,
        Nigeria,
        NorthKorea,
        Norway,
        Oman,
        Pakistan,
        Palestine,
        Panama,
        Paraguay,
        Peru,
        Philippines,
        Poland,
        Portugal,
        PuertoRico,
        Qatar,
        Romania,
        Russia,
        Rwanda,
        SaudiArabia,
        Senegal,
        Serbia,
        Seychelles,
        SierraLeone,
        Singapore,
        Slovakia,
        Slovenia,
        Somalia,
        SouthAfrica,
        SouthKorea,
        SouthSudan,
        Spain,
        SriLanka,
        Sudan,
        Swaziland,
        Sweden,
        Switzerland,
        Syria,
        Taiwan,
        Tanzania,
        Thailand,
        Togo,
        Tonga,
        Tunisia,
        Turkey,
        Uganda,
        Ukraine,
        UnitedArabEmirates,
        UnitedKingdom,
        UnitedStatesofAmerica,
        Uruguay,
        Uzbekistan,
        VaticanCity,
        Venezuela,
        Vietnam,
        Yemen,
        Zambia,
        Zimbabwe
    }
}


________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo12
{
    class Program
    {
        static void Main(string[] args)
        {
            /*
             * 1. (The Lord of the Rings: The Fellowship of the Ring) (19 Dec 2001) (8.8) (Peter Jackson)
             * 2. (The Lord of the Rings: The Two Towers) (18 Dec 2002) (8.7) (Peter Jackson)
             * 3. (The Lord of the Rings: The Return of the King) (8.9) (17 Dec 2003) 
             * -------------------------------------------------------------------------------------
             * 1. (Batman Begins) (15 Jun 2005) (8.3) (Christopher Nolan)
             * 2. (The Dark Knight) (18  Jul 2008) (9.0) (Christopher Nolan)
             * 3. (The Dark Knight Rises) (20 Jul 2012) (8.4) (Christopher Nolan)
             */

            var firstList = new List<Movies<double, DateTime>>();
            var secondList = new List<Movies<float, int>>();

            var darkKnight1 = new Movies<float, int>();
            darkKnight1.MovieName = "Batman Begins";
            darkKnight1.Director = "Christopher Nolan";
            darkKnight1.Rate = 8.3f;
            darkKnight1.ReleaseDate = 2005;

            darkKnight1.Genres = new List<Genres>();
            darkKnight1.Genres.Add(Genres.Action);
            darkKnight1.Genres.Add(Genres.Drama);
            darkKnight1.Genres.Add(Genres.Thriller);

            var darkKnight2 = new Movies<float, int>();
            darkKnight2.MovieName = "The Dark Knight";
            darkKnight2.Director = "Christopher Nolan";
            darkKnight2.Rate = 9.0f;
            darkKnight2.ReleaseDate = 2008;


            darkKnight2.Genres = new List<Genres>();
            darkKnight2.Genres.Add(Genres.Action);
            darkKnight2.Genres.Add(Genres.Drama);
            darkKnight2.Genres.Add(Genres.Thriller);

            var darkKnight3 = new Movies<float, int>();
            darkKnight3.MovieName = "The Dark Knight Rises";
            darkKnight3.Director = "Christopher Nolan";
            darkKnight3.Rate = 8.4f;
            darkKnight3.ReleaseDate = 2012;

            darkKnight3.Genres = new List<Genres>();
            darkKnight3.Genres.Add(Genres.Action);
            darkKnight3.Genres.Add(Genres.Drama);
            darkKnight3.Genres.Add(Genres.Thriller);
            darkKnight3.Genres.Add(Genres.Mystery);

            var lordofTheRings1 = new Movies<double, DateTime>();
            lordofTheRings1.MovieName = "The Lord of the Rings: The Fellowship of the Ring";
            lordofTheRings1.Director = "Peter Jackson";
            lordofTheRings1.Rate = 8.8;
            lordofTheRings1.ReleaseDate = new DateTime(2001, 12, 19);

            var lordofTheRings2 = new Movies<double, DateTime>();
            lordofTheRings2.MovieName = "The Lord of the Rings: The Two Towers";
            lordofTheRings2.Director = "Peter Jackson";
            lordofTheRings2.Rate = 8.7;
            lordofTheRings2.ReleaseDate = new DateTime(2002, 12, 18);

            var lordofTheRings3 = new Movies<double, DateTime>();
            lordofTheRings3.MovieName = "The Lord of the Rings: The Return of the King";
            lordofTheRings3.Director = "Peter Jackson";
            lordofTheRings3.Rate = 8.9;
            lordofTheRings3.ReleaseDate = new DateTime(2003, 12, 17);

            firstList.Add(lordofTheRings1);
            firstList.Add(lordofTheRings2);
            firstList.Add(lordofTheRings3);

            secondList.Add(darkKnight1);
            secondList.Add(darkKnight2);
            secondList.Add(darkKnight3);

            Show(firstList);
            Show(secondList);
        }

        public static void Show<T, V>(List<Movies<T, V>> list)
        {
            foreach (var item in list)
            {
                Console.WriteLine("Movies name : " + item.MovieName);
                Console.WriteLine("Movie rate : " + item.Rate);
                Console.WriteLine("Release date : " + item.ReleaseDate);
                Console.WriteLine("Director : " + item.Director);
                if (!(item.Genres is null))
                {
                    if (item.Genres.Count > 0)
                    {
                        Console.Write("Genres : ");
                        foreach (var genre in item.Genres)
                        {
                            Console.Write(genre + " ");
                        }
                    }
                }
                Console.WriteLine("\n____________________________\n");
            }
        }
    }

    class Movies<T, U>
    {
        private string movieName;

        public string MovieName
        {
            get { return movieName; }
            set { movieName = value; }
        }

        private string director;

        public string Director
        {
            get { return director; }
            set { director = value; }
        }

        private U releaseDate;

        public U ReleaseDate
        {
            get { return releaseDate; }
            set { releaseDate = value; }
        }

        private T rate;

        public T Rate
        {
            get { return rate; }
            set { rate = value; }
        }

        private List<Genres> genres;

        public List<Genres> Genres
        {
            get { return genres; }
            set { genres = value; }
        }


    }

    enum Genres
    {
        Action,
        Adventure,
        Animation,
        Biography,
        Comedy,
        Crime,
        Documentary,
        Drama,
        Family,
        Fantasy,
        History,
        Horror,
        Musical,
        Mystery,
        Romance,
        SciFi,
        Sport,
        Thriller,
        War,
        Western
    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo15
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Employees> listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };
            
        }
    }

    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ListofAnimalsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals dog = new Animals();
            dog.Name = "Roy";

            Animals cat = new Animals();
            cat.Name = "Koky";

            Animals elephant = new Animals();
            elephant.Name = "Fofy";

            List<Animals> list = new List<Animals>();
            list.Add(dog);
            list.Add(cat);
            list.Add(elephant);

            foreach (var item in list)
            {
                item.SayHi();
            }

        }
    }

    class Animals
    {
        private string name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public void SayHi()
        {
            Console.WriteLine("Hello my name is " + name);
        }

        public void Feed()
        {
            Console.WriteLine(name + " is now eating");
        }

    }
}


________________________________________________________________________________________________________________________________________________________________________________________________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace AnimalsAndTrainersExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals dog = new Animals();
            dog.Name = "Max";

            Animals cat = new Animals();
            cat.Name = "Lucy";

            Animals elephant = new Animals();
            elephant.Name = "Fofy";

            Trainers john = new Trainers();
            john.TrainerName = "John Jackson";

            ArrayList list = new ArrayList();
            list.Add(dog);
            list.Add(cat);
            list.Add(elephant);
            list.Add(john);

            foreach (var item in list)
            {
                if (typeof(Animals) == item.GetType())
                {
                    ((Animals)item).SayHi();
                    ((Animals)item).Feed();
                }
                else
                {
                    ((Trainers)item).SayHi();
                }
                
            }
        }
    }


    struct Animals
    {
        private string name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public void SayHi()
        {
            Console.WriteLine("Hello my name is " + name);
        }

        public void Feed()
        {
            Console.WriteLine(name + " is now eating");
        }

    }

    struct Trainers
    {
        private string trainerName;

        public string TrainerName
        {
            get { return trainerName; }
            set { trainerName = value; }
        }

        public void SayHi()
        {
            Console.WriteLine("Hello I am the new trainer");
        }

    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________






recursive methods-
___________________________

a function calling itself untill a conditions is satisfied

Recursive methods
Recursive methods : means a method calling itself.
• Recursive method calls itself a number of times until a specific condition happens.
• Recursive method has parameters and each time it calls itself it has a new parameter values.

A factorial is a function that multiplies a number by every number below it.
1! = 1
2! = 2(1) = 2
3! = 3(2)(1) = 6
4! = 4(3)(2)(1) = 24
5! = 5(4)(3)(2)(1) = 120

What is .Net framework?
It is a component of Windows that includes a virtual execution system
called the (CLR) Common Language Runtime and a unified set of class
libraries.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RecursiveMethodsApp
{
    class Program
    {
        static void Main(string[] args)
        {
            int number = 5;

            Console.WriteLine("Non recursive way");
            Console.WriteLine(FactorialNonRecursive(number));

            Console.WriteLine("Recursive way");
            Console.WriteLine(Factorial(number));
        }

        //Non-Recursive way
        public static int FactorialNonRecursive(int n)
        {
            if (n == 0)
                return 1;
            int value = 1;
            for (int i = n; i > 0; i--)
            {
                value *= i;
                Console.WriteLine(i);
            }
            return value;
        }

        // Recursive way
        public static int Factorial(int n)
        {
            if (n == 0)
                return 1;
            return n * Factorial(n - 1);
        }
    }
}




pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace RecursiveMethodsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            string path = string.Empty;
            path = @"C:\Files";
            Console.WriteLine(path);
            DisplayFolders(path, 0);

        }

        public static void DisplayFolders(string path, int indent)
        {
            foreach (var folder in Directory.GetDirectories(path))
            {
                Console.WriteLine($"{new string(' ',indent)} {Path.GetFileName(folder)}");
                DisplayFolders(folder, indent + 2);
            }
        }
    }

}





optional parameter -
_____________________________________________

these types of parameters are optional and any default values can be defined

syntax:

void func(int oppvar=0)

if u called the function it can use the default value of the argument value 



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OptionalArguments
{
    class Program
    {
        static void Main(string[] args)
        {
            DisplayPlayerInformation(7, "Ronaldo", 60,"Portugal","Real Madrid");
            Console.WriteLine("----------");
            DisplayPlayerInformation(10, "Messi");
        }

        public static void DisplayPlayerInformation(int no , string name, int goals = 0 ,string country = "",string club = "")
        {
            Console.WriteLine("Hi from the first method");
            Console.WriteLine(no);
            Console.WriteLine(name);
            Console.WriteLine(goals);
            Console.WriteLine(country);
            Console.WriteLine(club);
        }

        public static void DisplayPlayerInformation(int no, string name, int goals)
        {
            Console.WriteLine("Hi from the overloaded method");
            Console.WriteLine(no);
            Console.WriteLine(name);
            Console.WriteLine(goals);
        }
    }
}





named argument-
__________________

these areguments are passed with the names of the argument variable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NamedArguments
{
    class Program
    {
        static void Main(string[] args)
        {
            DisplayPlayerInformation(country: "Portugal", playerName: "Ronaldo", playerGoals: 55, playerNo: 7);
        }

        public static void DisplayPlayerInformation(int playerNo, string playerName, int playerGoals,string country = "Unknown")
        {
            Console.WriteLine(playerNo);
            Console.WriteLine(playerName);
            Console.WriteLine(playerGoals);
            Console.WriteLine(country);
        }
    }
}



generic arguments-
___________________________

if any argument that is undefined as T then that argument can take any data type this type of argument is called generic argument

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericArguments
{
    class Program
    {
        static void Main(string[] args)
        {
            DisplayInfo("John");
            DisplayInfo(2);
            DisplayInfo(2.5);
            DisplayInfo(DateTime.Now);

            var playerInfo = (7, "Ronaldo", 55);
            DisplayInfo(playerInfo);
        }

        public static void DisplayInfo<T>(T info)
        {
            Console.WriteLine(info);
        }
    }
}





params -
__________________

this used to passs a bunch of strings or any data without defining as a array to a array

Params

Create a method the takes an array (using params) of any datatype and display
the items inside of this array


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ParamsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            LoopThroughArray(10, 50, 25, 3);

            LoopThroughArray("Ahmad", "Ned", "Emma");

            LoopThroughArray(DateTime.Now, new DateTime(2017, 10, 10));
        }

        public static void LoopThroughArray<T>(params T[] items)
        {
            foreach (var item in items)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("-------------");
        }
    }
}







local functions and the nested functions-
_____________________________________________

creation of function inside the function is a local function and this is also a nested function

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LocalFunctions
{
    class Program
    {
        static void Main(string[] args)
        {
            PerformMathOperations(1, 2, 3,4);
            PerformMathOperations(5, 20);
        }

        public static void PerformMathOperations(params int[] numbers)
        {
            Console.WriteLine("Add = " + AddNumbers());
            int AddNumbers()
            {
                int result = 0;
                foreach (var number in numbers)
                {
                    result = result + number;
                }
                return result;
            }

            Console.WriteLine("Multi = " + MultiNumebrs());
            int MultiNumebrs()
            {
                int result = 1;
                foreach (var number in numbers)
                {
                    result = result * number;
                }
                return result;
            }
            Console.WriteLine("----------");
        }
        
    }
}








extention methods-
___________________________

"this" is the key word used here and if u see this method is use to send a variuable as an argument without beign passed u can send the value with the help of "." operator.

it can be also used for the operator overloading and variable overloading

Extension methods
Extension methods enable you to add methods to existing types without modifying the original type.
int x = 0;
CompareTo
Equals
GetHashCode
GetType
ToString
• An extension method is defined as static method but it is called like as instance method.
• Must be created inside a static class.
• The first parameter specifies which type the method operates on, and it is preceded by the "this" keyword.
• An extension method having the same name and signature like as an instance method will never be called
since it has low priority than instance method.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExtensionMethods
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            Console.WriteLine(x.IsGreater(10));

            string text = "100";
            Console.WriteLine(text.IsNumber());
        }       
    }

    static class MyCustomExtension
    {
        public static bool IsGreater(this int value, int number)
        {
            return value > number;
        }

        public static bool IsNumber(this string text)
        {
            return int.TryParse(text, out int result);
        }
    }

}






pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExtensionMethodExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime myDate = new DateTime(2000, 11, 1);
            Console.WriteLine(myDate.MyCustomFormat());
        }
    }

    static class MyExtensions
    {
        public static string MyCustomFormat(this DateTime date)
        {
            return string.Format("{0:dddd dd \nMMMM yyyy}", date);
        }
    }
}













stopwatch-
__________________

the time unit can be printed induvialy like taking off the extra milli seconds from the seconds like 

2 seconds and 450 milliseconds 

milli seconds print 450 but total milliseconds print 2450 so if u want to disply the total then use the oprations like 

totalmesurement unit eg - totalmiliseconds,TotalSeconds
else for ignoring the total subrated from the whole next time unit use the exact word - miliseconds,seconds etc .......

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace StopWatchApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();
            Loop(200_000_000);
            watch.Stop();

            Console.WriteLine("Milliseconds " + watch.Elapsed.Milliseconds);
            Console.WriteLine("Total Milliseconds " + watch.Elapsed.TotalMilliseconds);
            Console.WriteLine("Total Seconds " + watch.Elapsed.TotalSeconds);
            Console.WriteLine("Seconds " + watch.Elapsed.Seconds);

            Console.WriteLine(watch.Elapsed.Ticks);
        }

        public static void Loop(long number)
        {
            for (long i = 0; i < number; i++)
            {

            }
            Console.WriteLine("Process done.");
        }
    }
}


DateTime.Ticks Property-
___________________________

Definition
Namespace:
System
Assembly:
System.Runtime.dll
Gets the number of ticks that represent the date and time of this instance.

C#

Copy
public long Ticks { get; }
Property Value
Int64
The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.

Examples
The following example uses the Ticks property to display the number of ticks that have elapsed since the beginning of the twenty-first century and to instantiate a TimeSpan object. The TimeSpan object is then used to display the elapsed time using several other time intervals.

C#

Copy

Run
DateTime centuryBegin = new DateTime(2001, 1, 1);
DateTime currentDate = DateTime.Now;

long elapsedTicks = currentDate.Ticks - centuryBegin.Ticks;
TimeSpan elapsedSpan = new TimeSpan(elapsedTicks);

Console.WriteLine("Elapsed from the beginning of the century to {0:f}:",
                   currentDate);
Console.WriteLine("   {0:N0} nanoseconds", elapsedTicks * 100);
Console.WriteLine("   {0:N0} ticks", elapsedTicks);
Console.WriteLine("   {0:N2} seconds", elapsedSpan.TotalSeconds);
Console.WriteLine("   {0:N2} minutes", elapsedSpan.TotalMinutes);
Console.WriteLine("   {0:N0} days, {1} hours, {2} minutes, {3} seconds",
                  elapsedSpan.Days, elapsedSpan.Hours,
                  elapsedSpan.Minutes, elapsedSpan.Seconds);

// This example displays an output similar to the following:
//
// Elapsed from the beginning of the century to Thursday, 14 November 2019 18:21:
//    595,448,498,171,000,000 nanoseconds
//    5,954,484,981,710,000 ticks
//    595,448,498.17 seconds
//    9,924,141.64 minutes
//    6,891 days, 18 hours, 21 minutes, 38 seconds
Remarks
A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond (see TicksPerMillisecond) and 10 million ticks in a second.

The value of this property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001 in the Gregorian calendar, which represents MinValue. It does not include the number of ticks that are attributable to leap seconds. If the DateTime object has its Kind property set to Local, its ticks represent the time elapsed time since 12:00:00 midnight, January 1, 0001 in the local time as specified by the current time zone setting. If the DateTime object has its Kind property set to Utc, its ticks represent the time elapsed time since 12:00:00 midnight, January 1, 0001 in the Coordinated Universal Time. If the DateTime object has its Kind property set to Unspecified, its ticks represent the time elapsed time since 12:00:00 midnight, January 1, 0001 in the unknown time zone.

In general, the ticks represent the time according to the time zone specified by the Kind property.



delegates-
__________________


these are nothing but the reference variable for the function and this can also be overloaded 

see its as simple as giving a new name for the existing function with out modifing it 

Delegates
A delegate is a reference type variable that holds the reference to a method. Which means
delegates allow methods to be passed as parameters.

Create a delegate that takes a dictionary (int, string) as a parameter and display the content of the
dictionary 





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Delegates
{
    // void delegate with no argument
    public delegate void PlayerInfoDel();

    // void delegate with one string argument
    public delegate void PlayerInfoWithNameDel(string playerName);

    // void delegate with one string argument and one int
    public delegate void PlayerInfoNameWithGoalsDel(string name, int goals);

    // string delegate with one int argument 
    public delegate string PlayerBasedOnNumber(int number);

    class Program
    {
        static void Main(string[] args)
        {
            PlayerInfoDel ronaldinho = new PlayerInfoDel(DisplayInformation);
            ronaldinho();

            PlayerInfoWithNameDel playerName = new PlayerInfoWithNameDel(DisplayInformation);
            playerName("Messi");

            PlayerInfoNameWithGoalsDel newPlayer = new PlayerInfoNameWithGoalsDel(DisplayInformation);
            newPlayer("Ronaldo", 60);
            newPlayer("Rooney", 25);

            PlayerBasedOnNumber number = new PlayerBasedOnNumber(DisplayInformation);
            Console.WriteLine(number(8));
            Console.WriteLine(number(10));
        }

        public static void DisplayInformation()
        {
            Console.WriteLine("Information about player : Ronaldinho from brazil");
        }

        public static void DisplayInformation(string playerName)
        {
            Console.WriteLine("Information about player : " + playerName);
        }

        public static void DisplayInformation(string playerName, int goals)
        {
            Console.WriteLine("Information about player : " + playerName + " and he score " + goals + " goals");
        }

        public static string DisplayInformation(int number)
        {
            string playerName = string.Empty;
            switch (number)
            {
                case 7: playerName = "Ronaldo"; break;
                case 8: playerName = "Iniesta"; break;
                case 10: playerName = "Messi"; break;
                default:  break;
            }
            return playerName;
        }
    }
}


// this method is smart it can identfy the function based on the no of arguments passed in






//you can print function method and arguments by console 

Console.WriteLine(functionname.Method);

use item.ParameterType.Name to get the arguments  

eg:

foreach(var item in functionname.Method.GetParameters()){
    Console.WriteLine($"{item.ParameterType.Name},{item.Name},{item.Position},{item.IsOptional},{item.DefautValue}");
    //                      type of data         variable name  position        is optional         default value
}


eg:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoreAboutDelegates
{
    // void delegate with one string argument and one int
    public delegate void PlayerInformationWithGoals(string playerName, int playerGoals);

    // string delegate with one int argument and one string
    public delegate string PlayerInformationBasedOnNumberAndClub(int playerNo,string club, string country = "Unknown");


    class Program
    {
        static void Main(string[] args)
        {            
            PlayerInformationWithGoals playerOne = new PlayerInformationWithGoals(DisplayInformation);            
            PlayerInformationBasedOnNumberAndClub playerTwo = new PlayerInformationBasedOnNumberAndClub(DisplayInformation);

            //playerOne("Ronaldo", 50);
            //playerTwo(7, "Real Madrid","Portugal");

            Console.WriteLine(playerTwo.Method);

            foreach (var item in playerTwo.Method.GetParameters())
            {
                Console.WriteLine($"{item.ParameterType.Name}, {item.Name}, {item.Position}, {item.IsOptional}, {item.DefaultValue} ");
            }
        }


        public static void DisplayInformation(string playerName, int goals)
        {
            Console.WriteLine("Information about player : " + playerName + " and he score " + goals);
        }

        public static string DisplayInformation(int number,string club,string country = "Unknown")
        {
            // Some logic goes in here
            Console.WriteLine("Hi...");
            return string.Empty;
        }
    } 
}



delegates vs direct calls_
___________________________

much faster  (depends on the size of the code)
can pass many values

speed test :

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DelegatesVsDirectCalls
{
    public delegate void DoSomethingDelegate();

    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch watchOne = new Stopwatch();
            Stopwatch watchTwo = new Stopwatch();
            DoSomethingDelegate taskOne = new DoSomethingDelegate(DoSomething);

            // Using delegates 
            Console.WriteLine("Delegate Method \n--------------");
            watchOne.Start();
            taskOne();
            watchOne.Stop();
            var elapsedOne = watchOne.Elapsed;
            Console.WriteLine(Math.Round(elapsedOne.TotalSeconds, 2));

            // Using direct calls
            Console.WriteLine("\nDirect Method\n--------------");
            watchTwo.Start();
            DoSomething();
            watchTwo.Stop();
            var elapsedTwo = watchTwo.Elapsed;
            Console.WriteLine(Math.Round(elapsedTwo.TotalSeconds, 2));

            Console.WriteLine("\nDelegates saved you " + Math.Round((elapsedTwo.TotalMilliseconds-elapsedOne.TotalMilliseconds),4) + " milliseconds ");
            Console.WriteLine("Delegates saved you " + Math.Round((elapsedTwo.TotalSeconds - elapsedOne.TotalSeconds),4) + " seconds ");
        }

        public static void DoSomething()
        {
            double number = 8.543231;
            List<double> list = new List<double>();
            for (double i = 0; i < 60_000_000; i++)
            {
               number += i+DateTime.Now.Second;
                list.Add(number);
            }
            list.Reverse();
        }
    }
}



delecate eg code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DelegateExercise
{
    public delegate void DisplayPlayer(Dictionary<int, string> players);

    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, string> listofPlayers = new Dictionary<int, string>();
            listofPlayers.Add(7, "Ronaldo");
            listofPlayers.Add(10, "Messi");
            listofPlayers.Add(8, "Iniesta");

            DisplayPlayer player = new DisplayPlayer(DisplayPlayerInfo);
            player(listofPlayers);
            
        }

        public static void DisplayPlayerInfo(Dictionary<int,string> players)
        {
            foreach (var player in players)
            {
                Console.WriteLine($"Player no : {player.Key}, Player name : {player.Value}");
            }
        }
    }

}






Multicaste Delegate-
___________________________

the delecates can be used to call  mutiple functions at once with a help of single delecate variable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MulticastDelegate
{
    public delegate void SayHiDelegate();

    class Program
    {
        static void Main(string[] args)
        {
            SayHiDelegate sayHi = null;

            sayHi = new SayHiDelegate(SayHiEnglish);
            sayHi += new SayHiDelegate(SayHiSpanish);
            sayHi += new SayHiDelegate(SayHiJapanese);
            sayHi += new SayHiDelegate(SayHiItalian);
            sayHi += new SayHiDelegate(SayHiGerman);
            sayHi += new SayHiDelegate(SayHiArabic);

            sayHi();
        }

        // Say hi in English
        public static void SayHiEnglish()
        {
            Console.WriteLine("Hi there.");
        }

        // Say hi in Spanish
        public static void SayHiSpanish()
        {
            Console.WriteLine("Hola.");
        }

        // Say hi in Italian
        public static void SayHiItalian()
        {
            Console.WriteLine("Ciao.");
        }

        // Say hi in German
        public static void SayHiGerman()
        {
            Console.WriteLine("Hallo.");
        }

        // Say hi in Arabic (مرحباً)
        public static void SayHiArabic()
        {
            Console.WriteLine("Marhabaan.");
        }

        // Say hi in Japanese (こんにちは)
        public static void SayHiJapanese()
        {
            Console.WriteLine("Kon'nichiwa");
        }
    }
}








generic delecate-
___________________________

this type of delicate dont ahve data type it will be <T>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericDelegates
{
    public delegate T DisplayInfo<T>(T value);

    class Program
    {
        static void Main(string[] args)
        {
            DisplayInfo<int> myNumber = new DisplayInfo<int>(DisplayValue);
            Console.WriteLine(myNumber(100));

            DisplayInfo<double> myDoubleNumber = new DisplayInfo<double>(DisplayValue);
            Console.WriteLine(myDoubleNumber(3.5));

            DisplayInfo<DateTime> myDate = new DisplayInfo<DateTime>(DisplayValue);
            Console.WriteLine(myDate(new DateTime(2010,2,28)));
        }

        public static T DisplayValue<T>(T value)
        {
            Console.WriteLine("Now we are accessing variable of type " + value.GetType().Name);
            return value;
        }
    }
}







Anonymous methods-0
___________________________

this is method which is only represented by a delecate variable so this doesnt has own function name

Anonymous methods
Anonymous method is a method without a name. It is defined using the delegate keyword and can be
assigned to a delegate instance. 





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AnonymousMethods
{
    delegate void DisplayInfo();
    delegate void DisplayInfoBasedOnNumber(int number);

    class Program
    {
        static void Main(string[] args)
        {
            DisplayInfo normalDelegate = new DisplayInfo(GetInformation);
            normalDelegate();

            DisplayInfoBasedOnNumber oneParameterDelegate = new DisplayInfoBasedOnNumber(GetInformation);
            oneParameterDelegate(100);

            Console.WriteLine("----------------------\n");

            DisplayInfo normalDelegateAnonymous = delegate { Console.WriteLine("Hi from the anonymous method"); };
            normalDelegateAnonymous();

            DisplayInfoBasedOnNumber oneParameterDelegateAnonymous = 
                delegate (int x) { Console.WriteLine("Hi from the anonymous method which takes one int parameter " + x); };
            oneParameterDelegateAnonymous(150);

            //anonymous method represented using delecate

        }

        public static void GetInformation()
        {
            // Some logic goes in here
            Console.WriteLine("Delegate with no parameter");
        }

        public static void GetInformation(int x)
        {
            // Some logic goes in here
            Console.WriteLine("Delegate with one parameter : " + x);
        }
    }
}




pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LambdaExpression
{
    delegate void DisplayMessage();
    delegate int Multiply(int n);    

    class Program
    {
        static void Main(string[] args)
        {
            Multiply MultiplyNumber = delegate (int n) { { return n * 3; } };
            Console.WriteLine(MultiplyNumber(30));


            DisplayMessage Message = delegate { Console.WriteLine("Hi from the anonymous method"); };
            Message();
            
        }
    }
}




lambda expression-
___________________________

=> is used to represent a function

Lambda expressions
Lambda Expression is a shorter way of representing anonymous method.
Lambda expressions use this => 





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LambdaExpression
{
    delegate void DisplayMessage();
    delegate int Multiply(int n);    

    class Program
    {
        static void Main(string[] args)
        {
            //Multiply MultiplyNumber = delegate (int n) { { return n * 3; } };
            Multiply MultiplyNumber = n => n * 3;
            Console.WriteLine(MultiplyNumber(30));


            //DisplayMessage Message = delegate { Console.WriteLine("Hi from the anonymous method"); };
            DisplayMessage Message = () => Console.WriteLine("Hi from the lambda expression");
            Message();
            
        }
    }
}







list.where-
__________________

this function is used to make seperate sub list with a condition with the lambda function

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LambdaWithGenericList
{
    class Program
    {
        static void Main(string[] args)
        {
            List<int> list = new List<int>();

            list.Add(5); list.Add(8); list.Add(6); list.Add(15);
            list.Add(7); list.Add(2); list.Add(1); list.Add(12);

            var oddList = list.Where(n => n % 2 != 0).ToList();
            var evenList = list.Where(n => n % 2 == 0).ToList();

            Console.WriteLine("Odd Numebrs");
            foreach (var item in oddList)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine();
            Console.WriteLine("Even Numbers");
            foreach (var item in evenList)
            {
                Console.WriteLine(item);
            }
        }
    }
}





generic delecate function-
___________________________


Generic delegate : Func
Func is a built-in generic delegate, it has up to 16 parameters.
Func has one out parameter.
The last parameter is considered as an out parameter.
Func delegate type must return a value.





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FuncDelegate
{
    class Program
    {
        static void Main(string[] args)
        {
            Func<int, int, int> funcOne = AddTwoNumbers;
            Console.WriteLine(AddTwoNumbers(3, 10));

            Func<int> funcTwo = AddTwoNumbers;
            Console.WriteLine(funcTwo()); 
            
        }

        public static int AddTwoNumbers(int x, int y)
        {
            return x + y;
        }

        public static int AddTwoNumbers()
        {
            int z = 0;
            int x = 5;
            int y = 5;

            z = x + y;

            return z;
        }

    }
}






generic delecate action-
___________________________ 


Generic delegate : Action
Action delegate is the same as Func delegate except that the Action delegate doesn't return a value 

they dont return a value






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ActionDelegate
{
    class Program
    {
        static void Main(string[] args)
        {
            Action<int> actionOne = DisplayInformation;
            actionOne(16);

            Action actionTwo = DisplayInformation;
            actionTwo();
        }

        public static void DisplayInformation(int number)
        {
            Console.WriteLine("Daniele De Rossi number is " + number);
        }

        public static void DisplayInformation()
        {
            Console.WriteLine("Gabriel Batistuta");
        }
    }
}






generic delecate predicate-
_____________________________________________

it takes one parameter ad returns a bool value

Generic delegate : Predicate
Predicate delegate is the same as Action delegate and Func delegate. But it must take one input
parameter and returns a boolean value






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PredicateDelegate
{
    class Program
    {
        static void Main(string[] args)
        {
            Predicate<int> checkIfAvailable = isAdmin;

            Console.WriteLine(checkIfAvailable(50)); 
        }

        public static bool isAdmin(int empNo)
        {
            if (empNo == 10)
                return true;
            else
                return false;
        }
    }
}





program using action for anonyomous and LambdaExpression-
_____________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ActionWithAnonymousAndLambda
{
    class Program
    {
        public static void Main()
        {
            string name = "Jack";

            // Action
            Action<string> Message = ShowMessage;
            Message(name);

            // Anonymous method
            name = "John";
            Action<string> anonymousMethod = delegate (string myName) { Console.WriteLine($"Hi, how are you today, {myName}?"); };
            anonymousMethod(name);

            // Lambda expression
            name = "Sandra";
            Action<string> lambdaExpression = x => Console.WriteLine($"Hi, how are you today, {x}?");
            lambdaExpression(name);

        }

        public static void ShowMessage(string name)
        {
            Console.WriteLine($"Hi, how are you today, {name}?");
        }
    }
}






events-
_________


Events
Events are just a user action such as mouse clicks, key pressed and many other more
The events are declared and raised in a class and associated with the event handlers using
delegates within the same class or some other class.

Publisher
is an object that contains
the definition of the event
and the delegate

Subscriber
is an object that accepts the
event and provides an event
handler








using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Events
{
    public delegate void myDelegate(string name);

    class Program
    {
        public event myDelegate myEvent;

        public Program()
        {
            myEvent += new myDelegate(SayHiEnglish);
            myEvent += new myDelegate(SayHiArabic);
            myEvent += new myDelegate(SayHiItalian);
        }

        static void Main(string[] args)
        {
            Program prog = new Program();
            prog.myEvent("Jack");
        }

        public void SayHiEnglish(string name)
        {
            Console.WriteLine("Hi " + name);
        }

        public void SayHiArabic(string name)
        {
            Console.WriteLine("Marhaaban " + name);
        }

        public void SayHiItalian(string name)
        {
            Console.WriteLine("Caio " + name);
        }
    }
}





pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoreEvents
{
    class Program
    {
        static void Main(string[] args)
        {
            Football info = new Football();
            info.DisplayClub("Manchester United", "England");
            info.DisplayPlayerInformation("Ronaldo", "Real Madrid"); 
        }
    }

    class Football
    {
        private DisplayInformation displayInfoInstance;

        public Football()
        {
            displayInfoInstance = new DisplayInformation();
            displayInfoInstance.DisplayDateAfterEvent += DisplayInfoInstance_DisplayDateAfterEvent;
            displayInfoInstance.DisplayMessageBeforeEvent += DisplayInfoInstance_DisplayMessageBeforeEvent;
            
        }

        private void DisplayInfoInstance_DisplayMessageBeforeEvent()
        {
            Console.WriteLine("Program is about to display information...");
        }

        private void DisplayInfoInstance_DisplayDateAfterEvent()
        {
            Console.WriteLine("Information has been displayed on " + DateTime.Now.ToShortTimeString());
        }

        public void DisplayClub(string club, string country)
        {
            displayInfoInstance.DisplayClub(club, country);
        }

        public void DisplayPlayerInformation(string name, string club)
        {
            displayInfoInstance.DisplayPlayer(name, club);
        }
    }

    class DisplayInformation
    {

        public delegate void DisplayDateAfterDelegate();
        public delegate void DisplayMessageBeforeDelegate();

        public event DisplayDateAfterDelegate DisplayDateAfterEvent;
        public event DisplayMessageBeforeDelegate DisplayMessageBeforeEvent;

        public void DisplayClub(string clubName, string country)
        {
            DisplayMessageBeforeEvent();
            Console.WriteLine($"{clubName} from {country}");
            DisplayDateAfterEvent(); Console.WriteLine();
        }

        public void DisplayPlayer(string playerName, string clubName)
        {
            DisplayMessageBeforeEvent();
            Console.WriteLine($"{playerName} plays for {clubName}");
            DisplayDateAfterEvent();
        }
    }
}






timers-
__________

h0w to run programs repeted with time or run at a particular time

here is how timers come

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace TimerApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Timer timer = new Timer();
            timer.Elapsed += OnEachSecond;
            timer.Interval = 500;
            timer.Enabled = true;

            Console.WriteLine("Press (x) to exit");
            while (Console.Read() != 'x') ;
        }

        private static void OnEachSecond(object sender, ElapsedEventArgs e)
        {
            Console.WriteLine("Yes it is working " + DateTime.Now.ToLongTimeString());
        }
    }
}






exprtession bodied members-
_____________________________________________

this is used to short the function using lambda symbol

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExpressionbodiedMembers
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(AddTwoNumbersFaster(5, 10));
            SayHi();
            Animals dog = new Animals();
            dog.Name = "Max";
            Console.WriteLine(dog.Name);
        }

        public static void SayHi() => Console.WriteLine("Welcome back Walter");

        public static int AddTwoNumbersFaster(int x, int y) => x + y;

        public static int AddTwoNumbers(int x, int y)
        {
            return x + y;
        }
    }

    class Animals
    {
        public Animals() => Console.WriteLine("A new animal has been created!");
        

        private int age;
        public int Age
        {
            get { return age; }
            set { age = value; }
        }

        private string name;
        public string Name
        {
            get => name;
            set => name = value;
        }

    }
}









other pros-
_____________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo17
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "lord of the rings";
            Console.WriteLine(name.CapitalizeFirstLetter());
        }
    }

    public static class MyExtensions
    {
        public static string CapitalizeFirstLetter(this string value)
        {
            char[] letters = value.ToLower().ToCharArray();
            if (letters.Length >= 1)
            {
                if (char.IsLower(letters[0]))
                {
                    letters[0] = char.ToUpper(letters[0]);
                }
            }
            for (int i = 1; i < letters.Length; i++)
            {
                if (letters[i - 1] == ' ')
                {
                    if (char.IsLower(letters[i]))
                    {
                        letters[i] = char.ToUpper(letters[i]);
                    }
                }
            }
            return new string(letters);
        }
    }
}










________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo16
{
    class Program
    {
        static void Main(string[] args)
        {
            ShowAllFoldersUnder(@"c:\files", 0);
        }

        private static void ShowAllFoldersUnder(string path, int indent)
        {
            foreach (string folder in Directory.GetDirectories(path))
            {
                files(folder, indent); // assignment
                Console.WriteLine("{0}{1}", new string(' ', indent), Path.GetFileName(folder) +" : created on ("+ File.GetCreationTime(folder)+")");
                ShowAllFoldersUnder(folder, indent + 2);
            }
        }

        // Assignment
        public static void files(string folder, int indent)
        {
            string[] dirs = Directory.GetFiles(folder);
            //Console.WriteLine("The number of files starting with c is {0}.", dirs.Length);
            foreach (string dir in dirs)
            {
                //Console.WriteLine(dir,indent+3);
                Console.WriteLine("{0}{1}", new string(' ', indent), dir + " : created on (" + File.GetCreationTime(dir)+")");
            }
        }
    }
}


________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo18
{
    public delegate void MathDelegate(int x,int y);

    class Program
    {
        static void Main(string[] args)
        {
            MathDelegate performMathOperations = null;
            performMathOperations += Add;
            performMathOperations += Multiply;
            performMathOperations += Divide;
            performMathOperations += Substract;
            performMathOperations += Remainder;

            performMathOperations(20,3);
        }

        public static void Add(int x, int y) => Console.WriteLine($"{x} + {y} = " + (x + y));
        public static void Multiply(int x, int y) => Console.WriteLine($"{x} * {y} = " + (x * y));
        public static void Divide(int x, int y) => Console.WriteLine($"{x} / {y} = " + ((double)x / (double)y));
        public static void Substract(int x, int y) => Console.WriteLine($"{x} - {y} = " + (x - y));
        public static void Remainder(int x, int y) => Console.WriteLine($"{x} % {y} = " + (x % y));
    }
}




nullable types-
__________________

null is a value that can be defined for any data type if u dont wana define the data type should be presented with ?

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NullableTypes
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime? myDate = null;
            Console.WriteLine(myDate);

            int? number = null;
            Console.WriteLine(number);
            //number = 5;

            int numberTwo = 10;
            
            Console.WriteLine( number ?? numberTwo);

            string firstName = null;
            firstName = "John";

            string message = null;
            message= "first name is null";

            Console.WriteLine(firstName ?? message);

        }
    }
}

// ?? is used for if the variable is null use this variable
// eg checknull ?? ifnull
// if checknull == null the ifnull will take its place






conditional operator (ternary operator)-
_____________________________________________

this is like miniform of if condition 

syntax:

condition ? execute on true : execute on false;





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConditionalOperator
{
    class Program
    {
        static void Main(string[] args)
        {
            //if (IsAdmin())
            //{
            //    Console.WriteLine("yes he is an admin");
            //}
            //else
            //{
            //    Console.WriteLine("Not an admin");
            //}

            Console.WriteLine( IsAdmin() ? "Yes an admin" : "No not an admin" );
            
        }

        public static bool IsAdmin()
        {
            return false;
        }
    }
}




pro2______________________________________________________________________________________________________________________________________________________________________________________________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConditionalOperatorExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int number = int.Parse(Console.ReadLine());
            Console.WriteLine( number % 2 == 0 ? "Even Number" : "Odd Number");
        }
    }
}






safe navigation operator-
___________________________

used to check wheather the variable is null the synatax is half og conditional operator

syntax:
int? nullvariable;
nullable = class?.variable

if the variable is null it will return null else it will give a value




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SafeNavigationOperator
{
    class Program
    {
        static void Main(string[] args)
        {
            Cars bmwM3 = new Cars();
            bmwM3.Brand = "BMW";
            bmwM3.Model = "M3";
            bmwM3.Price = 60_000;

            Cars mercedesAmgGt = new Cars();
            mercedesAmgGt.Brand = "Mercedes";
            mercedesAmgGt.Model = "AMG GT";
            mercedesAmgGt.Price = 150_000;

            Cars porscheCarreraGT = new Cars();
            porscheCarreraGT.Brand = "Porsche";
            porscheCarreraGT.Model = "Carrera GT";
            porscheCarreraGT.Price = 500_000;

            Cars ferrariEnzo = new Cars();
            //ferrariEnzo.Brand = "Ferrari";
            //ferrariEnzo.Model = "Enzo";
            //ferrariEnzo.Price = 2_500_000;

            Console.WriteLine("Car Information");
            Cars.DisplayCarDetails(bmwM3);
            Cars.DisplayCarDetails(porscheCarreraGT);
            Cars.DisplayCarDetails(mercedesAmgGt);
            Cars.DisplayCarDetails(ferrariEnzo);


            List<Cars> listofCars = new List<Cars>();
            //List<Cars> listofCars = null;
            listofCars.Add(bmwM3);
            listofCars.Add(mercedesAmgGt);
            listofCars.Add(porscheCarreraGT);
            //listofCars.Add(ferrariEnzo);

            int? count = 0;
            count = listofCars?.Count;
            Console.WriteLine(count);
        }
    }

    class Cars
    {
        private string carBrand;
        private string carModel;
        private decimal carPrice;

        public string Model
        {
            get => carModel;
            set => carModel = value;
        }
        public string Brand
        {
            get => carBrand;
            set => carBrand = value;
        }
        public decimal Price
        {
            get => carPrice;
            set => carPrice = value;
        }

        public static void DisplayCarDetails(Cars car)
        {
            //if (car.Brand != null)
            //    Console.WriteLine(car.Brand);
            //if (car.Model != null)
            //    Console.WriteLine(car.Model);
            //if (car.Price != null)
            //    Console.WriteLine(car.Price);

            Console.WriteLine(car?.Brand);
            Console.WriteLine(car?.Model);
            Console.WriteLine(car?.Price);


            Console.WriteLine("--------------");
        }
    }
}









LINQ-
________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQMethodSyntax
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>(); 
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees,"All Employees");

            //Salary is greater than or equal to 6000 and age greater than 40
            filteredList = listOfEmployees.Where(e => e.Salary >= 6000 && e.Age > 40).ToList();

            //Salary is greater than or equal to 6000 and age greater than 40 or salary is greater than or equal 8000
            filteredList = listOfEmployees.Where(e => e.Salary >= 6000 && e.Age > 40 || e.Salary >= 8000).ToList();

            //foreach (var employee in listOfEmployees)
            //{
            //    if (employee.Salary >= 6000 && employee.Age >= 40)
            //        Console.WriteLine(employee.FirstName);
            //}

            foreach (var employee in filteredList)
            {
                Console.WriteLine(employee.FirstName);
            }
            Console.WriteLine();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQMethodSyntax
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message)
        {
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                Console.Write($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }

    }
}









pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQMethodSyntaxExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>();
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees, "All Employees");

            //Last apparisal less than 8 and salary greater than  4000
            filteredList = listOfEmployees.Where(e => e.Salary > 4000 && e.Appraisal[0] < 8).ToList();
            Employees.DisplayWithApparisal(filteredList, "Employees : last apparisal less than 8 and salary greater than 4000");


            Console.WriteLine();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQMethodSyntaxExercise
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message)
        {
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                Console.Write($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }
    }
}







LINQ using Query syntax-
___________________________

this is almost same as the sql Query

Introduction to LINQ
LINQ stands for Language-Integrated Query, it is a query syntax used to bridges the
gap between the world of objects and the world of data.
LINQ to Objects
LINQ to DataSet
LINQ to XML
LINQ to Entities
LINQ to SQL
Method Syntax
Query Syntax 

Introduction to LINQ
Jack Steven, 5000, 35
Debora Watson, 10000, 45
Claire Adam, 7500, 32
Michael Rob, 3500, 22
Matthew Forest, 4500, 28
Charles Kris, 8000, 27
Robert Wilson, 8000, 28
Emma Brooks, 6000, 23
Jennifer Blake, 3000, 38
Terry Loyd, 9000, 49
Adam Spencer, 7000, 33
Stacy Shelton, 4000, 25

eg:

foreach (var employee in employees)
{
if(employee.Salary>=6000 && employee.Age>=40)
        Console.WriteLine(employee.Name);
}


Familiar language: you don’t have to learn a new query language for each type of data source or data format.
Less coding: It reduces the amount of code comparing to the normal approach.
Readable code: LINQ makes the code more readable.
Standardization: The same LINQ syntax can be used to query multiple data sources.

pro_________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQuerySyntax
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>();
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees, "All Employees");


            //Salary is greater than or equal to 6000 and age greater than 40
            filteredList = (from emp in listOfEmployees
                            where emp.Salary >= 6000 && emp.Age > 40
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Salary higher than 6000 and age above 40");

            //Salary is greater than or equal to 6000 and age greater than 40 or salary is greater than or equal 8000
            filteredList = (from emp in listOfEmployees
                            where emp.Salary >= 6000 && emp.Age > 40 || emp.Salary >= 8000
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Salary higher than 6000 and age above 40 or salary greater than 8000");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQuerySyntax
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message)
        {
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                Console.Write($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }

    }
}










pro2______________________________________________________________________________________________________________________________________________________________________________________________________



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQuerySyntaxExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>();
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees, "All Employees");


            //Apparisal less than 8 and salary greater than  4000
            filteredList = (from emp in listOfEmployees
                            where emp.Salary > 4000 && emp.Appraisal[0] < 8
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Employees with apprisal less than 8 and salary higher than 4000");
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQuerySyntaxExercise
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message)
        {
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                Console.Write($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }

    }
}











sorting data with linq-
___________________________

u will use orderby to sort 

syntax:
orderby variable_name

this will do in accending order

syntax:
orderby variable_name decending

this will do in decending order

u can also sort on 2 variables

syntax:
orderby variable_name, variable_name2






making quries with methods(function) using linq-
_____________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQueriesWithMethods
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>();
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees, "Before Sorting");

            Employees.DisplayWithApparisal(SortEmployees(listOfEmployees),"After Sorting");


        }


        public static List<Employees> SortEmployees(List<Employees> employees)
        {
            var list = from emp in employees
                       orderby emp.Age descending
                       select emp;
            return list.ToList();
        }
        
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQQueriesWithMethods
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message)
        {
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                Console.Write($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }

    }
}






time span operations-
___________________________

see web for more operations

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TimeSpanApp
{
    class Program
    {
        static void Main(string[] args)
        {
            TimeSpan ts = new TimeSpan(26,10,15);
            Console.WriteLine(ts.TotalHours);

            ts = ts.Add(new TimeSpan(0, 0, 30));
            Console.WriteLine(ts);

            DateTime myDateOne = new DateTime(1990, 10, 30);
            DateTime myDateTwo = new DateTime(2017, 10, 30);

            TimeSpan sub = myDateTwo - myDateOne;
            sub = myDateTwo.Subtract(myDateOne);
            Console.WriteLine(sub.TotalDays/365.25);
        }
    }
}
// this just finds the no of days between two dates







multithreading-
__________________


Sequential programming
All the programs that we were developing are sequential programs each has a
• Beginning
• Execution sequence
• End
Single thread
A thread is a single sequential flow of control within a program. 

Introduction to multithreading
Multithreading
is a type of execution model that allows multiple threads to exist within the process and they
execute independently but share their process resources
Visual Studio
Responding to
keystrokes Checking Syntax Displaying Intellisense Offering Solutions for
errors
Thread 1 Thread 2 Thread 3 Thread 4

Advantages of multithreading

Responsiveness: multithreading allow an application to remain responsive.
Faster execution: multithreaded applications operate faster on computers that have multiple CPUs.
Lower resource consumption: multithreaded applications can handle multiple requests simultaneously using fewer resources.
Better system utilization : multithreaded applications can be doing different tasks at the same time not in a sequential order.

Disadvantages of multithreading

Complexity: Increases the complexity of your application.
Difficulty to write code: because you are place each task on a separate independent thread.
Difficulty to debug code: because the application will not work in a sequential way anymore.
Difficulty to test code: for the same previous two reasons.
Potential deadlocks : when two or more threads are blocking each other.

Critical Section

is a section of code that needs to be executed without being interpreted.
For example
• A user trying to reserve the last ticket available on a plane.
• One thread is opening a file and another thread is writing in the file
Race Condition
Occurs when two or more threads try to manipulate a shared resource concurrently and outcome of the execution depends on
the particular order in which the access takes place.
To avoid race conditions, the execution of critical sections must be mutually exclusive 


system.Threading is required

syntax:

Thread threadname = new Thread(new ThreadStart(method name or function name));
threadname.start()



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace CreatingThreads
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread t1 = new Thread(new ThreadStart(SayHiEnglish));
            t1.Name = "Thread Number 1 (English)";
            t1.Start();

            Thread t2 = new Thread(new ThreadStart(SayHiSpanish));
            t2.Name = "Thread Number 2 (Spanish)";
            t2.Start();
        }

        public static void SayHiEnglish()
        {
            Console.WriteLine("Starting to execute " + Thread.CurrentThread.Name);
            for (int i = 0; i < 50; i++)
            {
                Console.WriteLine(i + " Hi...");
            }
        }

        public static void SayHiSpanish()
        {
            Console.WriteLine("Starting to execute " + Thread.CurrentThread.Name);
            for (int i = 0; i < 50; i++)
            {
                Console.WriteLine(i + " Hola...");
            }
        }




    }
}





Management of thread-
___________________________

u  can join the thread u can rename it if u join it both program will run in same thread

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ManagingThreads
{
    class Program
    {
        static Thread t1;
        static Thread t2;
        static void Main(string[] args)
        {
            t1 = new Thread(new ThreadStart(SayHiEnglish));
            t1.Name = "Thread Number 1 (English)";
            t1.Start();

            t2 = new Thread(new ThreadStart(SayHiSpanish));
            t2.Name = "Thread Number 2 (Spanish)";
            t2.Start();
        }

        public static void SayHiEnglish()
        {
            Console.WriteLine("Starting to execute " + Thread.CurrentThread.Name);
            
            for (int i = 0; i < 50; i++)
            {
                //Thread.Sleep(1000);
                //if (i == 31)
                //{
                //    Console.WriteLine(Thread.CurrentThread.Name + " is about to be aborted");
                //    t1.Abort();
                //}
                Console.WriteLine(i + " Hi...");
            }
        }

        public static void SayHiSpanish()
        {
            Console.WriteLine("Starting to execute " + Thread.CurrentThread.Name);
            for (int i = 0; i < 50; i++)
            {
                t1.Join();
                //Thread.Sleep(new TimeSpan(0, 0, 1));
                Console.WriteLine(i + " Hola...");
            }
        }




    }
}


pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ThreadsExercise1
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread t1 = new Thread(new ThreadStart(() => Console.WriteLine("Hello from lambda expression")));
            t1.Start();
        }
    }
}



pro2______________________with anonymous method________________________________________________________________________________________________________________________________________________________________________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ThreadsExercise2
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread t1 = new Thread(new ThreadStart(delegate ()
            {
                for (int i = 0; i < 10; i++)
                {
                    Console.WriteLine("Hello from the anonymous method assigned to the t1 thread");
                }
            }));
            t1.Start();
        }
    }
}




Multithreading 

In computer architecture, multithreading is the ability of a central processing unit (CPU) or a single core in a multi-core processor to execute multiple processes or threads concurrently, appropriately supported by the operating system. This approach differs from multiprocessing, as with multithreading the processes and threads share the resources of a single or multiple cores: the computing units, the CPU caches, and the translation lookaside buffer (TLB).

Where multiprocessing systems include multiple complete processing units, multithreading aims to increase utilization of a single core by using thread-level as well as instruction-level parallelism. As the two techniques are complementary, they are sometimes combined in systems with multiple multithreading CPUs and in CPUs with multiple multithreading cores.



Advantages
If a thread gets a lot of cache misses, the other threads can continue taking advantage of the unused computing resources, which may lead to faster overall execution as these resources would have been idle if only a single thread were executed. Also, if a thread cannot use all the computing resources of the CPU (because instructions depend on each other's result), running another thread may prevent those resources from becoming idle.

Disadvantages
Multiple threads can interfere with each other when sharing hardware resources such as caches or translation lookaside buffers (TLBs). As a result, execution times of a single thread are not improved but can be degraded, even when only one thread is executing, due to lower frequencies or additional pipeline stages that are necessary to accommodate thread-switching hardware.

Overall efficiency varies; Intel claims up to 30% improvement with its Hyper-Threading Technology, while a synthetic program just performing a loop of non-optimized dependent floating-point operations actually gains a 100% speed improvement when run in parallel. On the other hand, hand-tuned assembly language programs using MMX or AltiVec extensions and performing data prefetches (as a good video encoder might) do not suffer from cache misses or idle computing resources. Such programs therefore do not benefit from hardware multithreading and can indeed see degraded performance due to contention for shared resources.

Multithreading in C#
Threading enables your C# program to perform concurrent processing so that you can do more than one operation at a time. For example, you can use threading to monitor input from the user, perform background tasks, and handle simultaneous streams of input. Threads have the following properties: Threads enable your program to perform concurrent processing. The .NET Framework System.Threading namespace makes using threads easier. Threads share the application's resources. For more information, see Using Threads and Threading. By default, a C# program has one thread. However, auxiliary threads can be created and used to execute code in parallel with the primary thread. These threads are often called worker threads. Worker threads can be used to perform time-consuming or time-critical tasks without tying up the primary thread. For example, worker threads are often used in server applications to fulfill incoming requests without waiting for the previous request to be completed. Worker threads are also used to perform "background" tasks in desktop applications so that the main thread--which drives user interface elements--remains responsive to user actions. Threading solves problems with throughput and responsiveness, but it can also introduce resource-sharing issues such as deadlocks and race conditions. Multiple threads are best for tasks that require different resources such as file handles and network connections. Assigning multiple threads to a single resource is likely to cause synchronization issues, and having threads frequently blocked when waiting for other threads defeats the purpose of using multiple threads. A common strategy is to use worker threads to perform time-consuming or time-critical tasks that do not require many of the resources used by other threads. Naturally, some resources in your program must be accessed by multiple threads. For these cases, the System.Threading namespace provides classes for synchronizing threads. These classes include Mutex, Monitor, Interlocked, AutoResetEvent, and ManualResetEvent. You can use some or all these classes to synchronize the activities of multiple threads, but some support for threading is supported by the C# language. For example, the Lock Statement provides synchronization features through implicit use of Monitor.



pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace WithMultithreading
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread t1 = new Thread(new ThreadStart(delegate ()
            {
                Console.WriteLine("Process 1 started");
                Console.WriteLine("Process 1 is running");
                for (long i = 0; i < 2_500_000_000; i++)
                {}
                Console.WriteLine("Process 1 has been completed \n");
            }));
            t1.Start();

            Thread t2 = new Thread(new ThreadStart(delegate ()
            {
                Console.WriteLine("Process 2 started");
                Console.WriteLine("Process 2 is running");
                for (long i = 0; i < 5_000_000_000; i++)
                {}
                Console.WriteLine("Process 2 has been completed \n");
            }));
            t2.Start();

            Thread t3 = new Thread(new ThreadStart(delegate ()
            {
                Thread.Sleep(1);
                Console.WriteLine("What is your name?");
                string name = Console.ReadLine();
                Console.WriteLine("Hello " + name + " welcome back");
            }));
            t3.Start();
        }
    }
}





parameterized thread-
___________________________

u are only allowed to pass the object,u cannot pass the value direcetly it converst to object so u can parse it as a required datatype


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ParameterizedThreadApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Helper helper = new Helper();
            Thread t1 = new Thread(new ParameterizedThreadStart(helper.Loop));
            t1.Start(500);
        }
    }

    class Helper
    {
        public void Loop(object number)
        {
            for (int i = 0; i < int.Parse(number.ToString()); i++)
            {
                Console.WriteLine(i);
            }
        }
    }

}









dead lock or lock keyword-
___________________________

Deadlocks and lock keyword

Deadlock occurs when a thread enters a waiting state because a requested system resource is held by another waiting thread,
which in turn is waiting for another resource held by another waiting threat.

Resource A and resource B are used by process X and process Y
X starts to use A
X and Y try to start using B
Y gets B first
Y needs to use A
A is locked by X, which is waiting for Y

Lock keyword will ensure that one thread is executing a piece of code at one time. Which means
that one thread does not enter a critical section of code while another thread is in that critical
section.

lock() is a method that is used and this allows only one thread to access the critical session at a time





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace Deadlocks
{
    class Program
    {
        static void Main(string[] args)
        {
            Files file = new Files();
            Thread[] threads = new Thread[10];

            for (int i = 0; i < 10; i++)
            {
                threads[i] = new Thread(new ParameterizedThreadStart(file.Write));
                threads[i].Start($"c:\\accounts{i}.txt");
            }
        }
    }

    class Files
    {
        public Object thisLock = new Object();
        public void Write(object path)
        {
            lock(thisLock)
            {
                // some logic of writing in files goes in where
                Console.WriteLine("Writing in " + path);
                Thread.Sleep(2000);
                Console.WriteLine("Writing process has been completed");
            }
        }

        public void Read(object path)
        {
            lock (thisLock)
            {
                // some logic of writing in files goes in where
                Console.WriteLine("Reading from " + path);
                Thread.Sleep(1000);
                Console.WriteLine("Reading process has been completed");
            }
        }
    }
}








monitor-
__________

u could add a lock to a particular object with the monitor method
lock is shortcut of monitor but in monitor u can control a single part of the whole function and have precise control

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace MonitorClassApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Files file = new Files();
            Thread[] threads = new Thread[10];

            for (int i = 0; i < 10; i++)
            {
                threads[i] = new Thread(new ParameterizedThreadStart(file.Write));
                threads[i].Start($"c:\\accounts{i}.txt");
            }
        }
    }

    class Files
    {
        public void Write(object path)
        {
            Monitor.Enter(path);
            try
            {
                // some logic of writing in files goes in where
                Console.WriteLine("Writing in " + path);
                Thread.Sleep(2000);
                Console.WriteLine("Writing process has been completed");
            }
            finally
            {
                Monitor.Exit(path);
            }
        }

        public void Read(object path)
        {
            // some logic of reading files goes in where
            Console.WriteLine("Reading from " + path);
            Thread.Sleep(1000);
            Console.WriteLine("Reading process has been completed\n");
        }
    }
}






What is the difference between Monitor and Lock in C#?

CsharpServer Side ProgrammingProgramming

Both Monitor and lock provides a mechanism that synchronizes access to objects. lock is the shortcut for Monitor.Enter with try and finally.

Lock is a shortcut and it's the option for the basic usage. If we need more control to implement advanced multithreading solutions using TryEnter() Wait(), Pulse(), & PulseAll() methods, then the Montior class is your option.

Example for Lock −

Example
class Program{
static object _lock = new object();
static int Total;
public static void Main(){
   AddOneHundredLock();
   Console.ReadLine();
}
public static void AddOneHundredLock(){
   for (int i = 1; i <= 100; i++){
      lock (_lock){
         Total++;
      }
   }
}
Example for Monitor −

Example
class Program{
   static object _lock = new object();
   static int Total;
   public static void Main(){
      AddOneHundredMonitor();
      Console.ReadLine();
   }
   public static void AddOneHundredMonitor(){
      for (int i = 1; i <= 100; i++){
         Monitor.Enter(_lock);
         try{
            Total++;
         }
         finally{
            Monitor.Exit(_lock);
         }
      }
   }
}





mutex-
___________

Mutex
Mutex (mutual exclusion) object is used to synchronize access to a protected resource.

A mutex's scope is system-wide, while the monitor's scope and lock’s scope
is application-wide.

this provides the synchronise access to the resource by achiving the mutual exclusion

this can be used without try or finally

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace MutexApp
{
    class Program
    {
        private static Mutex mut = new Mutex();
        static void Main(string[] args)
        {
            for (int i = 0; i < 5; i++)
            {
                Thread newThread = new Thread(new ThreadStart(delegate ()
                {
                    for (int d = 0; d < 2; d++)
                    {
                        UseResource();
                    }
                }));
                newThread.Name = String.Format("(Thread no. {0})", i + 1);
                newThread.Start();
            }
        }

        private static void UseResource()
        {
            Console.WriteLine("{0} is requesting the mutex",Thread.CurrentThread.Name);
            mut.WaitOne();

            Console.WriteLine("{0} has entered the critical section",Thread.CurrentThread.Name);
            Thread.Sleep(10000);
            Console.WriteLine("{0} is leaving the critical section",Thread.CurrentThread.Name);

            mut.ReleaseMutex();
            Console.WriteLine("{0} has released the mutex",Thread.CurrentThread.Name);
        }
    }
}




semaphore -
__________________


Semaphore
Limits the number of threads that can access a resource or pool of resources concurrently.


this allows us to manage and have a count how many threads can enter the critical section 

What is the critical section?
The critical section refers to the segment of code where processes access shared resources, such as common variables and files, and perform write operations on them. Since processes execute concurrently, any process can be interrupted mid-execution.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace SemaphoreApp
{
    class Program
    {
        private static Semaphore semaphore = new Semaphore(2, 2);
        static void Main(string[] args)
        {
            for (int i = 0; i < 3; i++)
            {
                Thread newThread = new Thread(new ThreadStart(delegate ()
                {
                    for (int d = 0; d < 1; d++)
                    {
                        UseResource();
                    }
                }));
                newThread.Name = String.Format("(Thread no. {0})", i + 1);
                newThread.Start();
            }
        }

        private static void UseResource()
        {
            Console.WriteLine("{0} is requesting to enter",Thread.CurrentThread.Name);
            semaphore.WaitOne();

            Console.WriteLine("{0} has entered the critical section",Thread.CurrentThread.Name);
            Thread.Sleep(10000);
            Console.WriteLine("{0} is leaving the critical section",Thread.CurrentThread.Name);

            semaphore.Release();
            Console.WriteLine("{0} has left the critical section",Thread.CurrentThread.Name);
        }
    }
}




Synchronise and Asynchronise programs-
_____________________________________________



Introduction to asynchronous programming

Synchronous Programming

Single Threaded 
Multi-Threaded

Asynchronous Programming

Single Threaded 
Multi-Threaded






Synchronous Programming

Single Threaded

Multi-Threaded

Thread 1 → Task 1 → Task 2 → Task 3 → Task 4

Multi-Threaded : Multiple threads which are performing different tasks simultaneously .

Thread 1 → Task 1
Thread 2 → Task 2
Thread 3 → Task 3






Introduction to asynchronous programming


Asynchronous Programming
Single Threaded Multi-Threaded
Thread 1 Task 1 Task 2 Task 3 Task 1
Multi-Threaded : Multiple threads performing different tasks and have the ability to pause in the middle and start
executing another tasks.
Thread 1
Thread 2
Thread 3
Task 2 Task 4
Task 1 Task 2 Task 3 Task 1 Task 2 Task 4
Task 5 Task 3 Task 7 Task 5 Task 8 Task 9
Task 7 Task 6 Task 9 Task 4 Task 8 Task 6










Task-
________


Tasks

Synchronous model means two or more tasks are running at the same time and it is possible
that one may block another. 

Asynchronous model means two or more operations are running in different contexts (thread)
so that they can run concurrently and do not block each other.

Task represents an asynchronous operation.


task represents a Asynchronise operation in c# this is type of multithreading of 2 independent tasks

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace TasksApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Task task = new Task(new Action(SayHi));
            task.Start();

            Task task2 = new Task(delegate ()
            {
                Console.WriteLine("Task 2 is starting");
                Console.WriteLine("Task 2 is running");
                Console.WriteLine("Hi there from task 2");
                Thread.Sleep(7000);
                Console.WriteLine("Task 2 is complete");
            });
            task2.Start();

            Task task3 = new Task(() =>
            {
                Console.WriteLine("Task 3 is starting");
                Console.WriteLine("Task 3 is running");
                Console.WriteLine("Hi there from task 3");
                Thread.Sleep(7000);
                Console.WriteLine("Task 3 is complete");
            });
            task3.Start();

            Console.WriteLine("What is your name");
            var name = Console.ReadLine();
            Console.WriteLine("Welcome back " + name);

            Console.ReadLine();
        }

        public static void SayHi()
        {
            Console.WriteLine("Task 1 is starting");
            Console.WriteLine("Task 1 is running");
            Console.WriteLine("Hi there from task 1");
            Thread.Sleep(5000);
            Console.WriteLine("Task 1 is complete");
        }
    }
}



passing parameters in the tasks-
_____________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace TasksWithParameters
{
    class Program
    {
        static void Main(string[] args)
        {
            Task task1 = new Task(new Action<object>(SayHi), "Jennifer");
            task1.Start();

            Task task2 = new Task(delegate (object name)
            {
                Console.WriteLine("Welcome back " + name);
            }, "Ahmad");
            task2.Start();

            Task task3 = new Task(n => { Console.WriteLine("Welcome back " + n); }, "Jack");
            task3.Start();

            Console.ReadLine();
        }

        public static void SayHi(object name)
        {
            Console.WriteLine("Welcome back " + name);
        }
    }
}





return in tasks-
__________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TasksWithReturnValue
{
    class Program
    {
        static void Main(string[] args)
        {
            Task<int> task = new Task<int>(()=>
            {
                int result = 0;
                for (int i = 1; i <= 4; i++)
                {
                    result += i;
                    Console.WriteLine(i);
                }
                return result;
            });
            task.Start();
            Console.WriteLine(task.Result);
            Console.ReadLine();
        }
    }
}



checking the status of the task-
_____________________________________________




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Timers;

namespace CheckingTasksStatus
{
    class Program
    {
        static Timer timer;
        static Task task;
        static void Main(string[] args)
        {
            task = new Task(() =>
            {
                for (int i = 1; i <= 500; i++)
                {
                    Console.WriteLine(i);
                }
            });
            task.Start();

            timer = new Timer();
            timer.Elapsed += CheckTheTask; // it runs the bottom funtion until the timer is stoped
            timer.Interval = 100; //checks at a interval
            timer.Enabled = true; // the timer is on

            Console.ReadLine();
        }

        private static void CheckTheTask(object sender, ElapsedEventArgs e)
        {
            if (task.Status == TaskStatus.Running) // TaskStatus is a inbuild funtion used to verify the running state
            {
                Console.WriteLine("Task is running.....");
            }
            else if (task.Status == TaskStatus.RanToCompletion)
            {
                Console.WriteLine("Task is complete");
                timer.Enabled = false;   //timer is off
            }
        }
    }
}




cancelling tasks-
___________________________


Cancelling tasks
CancellationTokenSource object, which provides a cancellation token through its token property
and sends a cancellation message by calling the Cancel method.
CancellationToken which indicates whether cancellation is requested.


u need a token pointing the task and this can be any task or method and u can also cancell based on the time


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace CancellingTasks
{
    class Program
    {
        static void Main(string[] args)
        {
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
            CancellationToken token = cancellationTokenSource.Token;

            Task task = new Task(() =>
            {
                for (int i = 0; i < 100000; i++)
                {
                    if (token.IsCancellationRequested) //token is used to point the task to be cancelled
                    {
                        Console.WriteLine("Task is cancelled!");
                        return;
                    }
                    else
                    {
                        Console.WriteLine(i + 1);
                    }
                }
                Console.WriteLine("Task is Complete!");
            });

            task.Start();

            //Thread.Sleep(3000);
            //cancellationTokenSource.Cancel();   // this cancel the task directly
            cancellationTokenSource.CancelAfter(5000); // it cancels the task after 5sec

            Console.ReadLine();
        }
    }
}





waiting for other taskes-(using tasks)
___________________________

the other tasks can be put on hold (wait) using ".wait()" function

to make it wait for all tasks to complete use "Task.WaitAll(tasks)" the whole program will wait untill the mentioned tasks are not overloaded

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace WaitingForTasks
{
    class Program
    {
        static void Main(string[] args)
        {
            Task t1 = new Task(() =>
            {
                Console.WriteLine("Task 1 started");
                Console.WriteLine("Task 1 running...\n");
                Thread.Sleep(8000);
                Console.WriteLine("Task 1 finished!");
            });
            t1.Start();
            t1.Wait();

            Task t2 = new Task(() =>
            {
                Console.WriteLine("Task 2 started");
                Console.WriteLine("Task 2 running...\n");
                Thread.Sleep(6000);
                Console.WriteLine("Task 2 finished!");
            });
            t2.Start();
            t2.Wait();

            Task t3 = new Task(() =>
            {
                Console.WriteLine("Task 3 started");
                Console.WriteLine("Task 3 running...\n");
                Thread.Sleep(2000);
                Console.WriteLine("Task 3 finished!");
            });
            t3.Start();

            Task.WaitAll(t3);
        }
    }
}



task run -
__________________

used to run a task with out intialization or a insitance

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TaskRunApp
{
    class Program
    {
        static void Main(string[] args)
        {
            SayHiTask();

            AddNumbersTask(10, 2, 12);

            Console.ReadLine();
        }

        private static Task SayHiTask()
        {
            return Task.Run(() =>
            {
                Console.WriteLine("Hi there from the task");
            });
        }

        public static Task AddNumbersTask(params int[] numbers) //witrh arguments
        {
            return Task.Run(() =>
            {
                Console.WriteLine("Add numbers task started...");
                int result = 0;
                foreach (var number in numbers)
                {
                    result += number;
                }
                Console.WriteLine("Total = " + result);
            });
        }
    }
}





Async and Await-
__________________



Async and Await are the two keywords that help us to program asynchronously. An async keyword is a method that performs asynchronous tasks such as fetching data from a database, reading a file, etc, they can be marked as “async”. Whereas await keyword making  “await” to a statement means suspending the execution of the async method it is residing in until the asynchronous task completes. After suspension, the control goes back to the caller method. Once the task completes, the control comes back to the states where await is mentioned and executes the remaining statements in the enclosing method.

Let us see the behavior of the code with and without async and await operators.

Synchronous Programming:
In general, the code executes sequentially i.e statements are executed one after the other.  Let us take a small example of a school that has classes 11 and 12. 

The first thing school does is start the assembly which might be having morning prayer, pledge, daily updates, etc
After the assembly, teachings begin for class 11 & class 12.
In our synchronous code below, we will be using the Stopwatch to record the execution time taken by the code.  We have three methods in which Thread.Sleep(n) is specified to simulate that these methods take some time to run.

Example 1:

// C# program 
using System;
using System.Threading;
public class GFG{
  
    static void Main(string[] args)
        {
  
            Demo();
            Console.ReadLine();
  
        }
        public static void Demo() {
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            StartSchoolAssembly();
            TeachClass12();
            TeachClass11();
            watch.Stop();
            Console.WriteLine($"Execution Time: 
                              {watch.ElapsedMilliseconds} ms");
              
        }
          
          
        public static void StartSchoolAssembly()
        {
            Thread.Sleep(8000);
            Console.WriteLine("School Started");
        }
  
  
        public static void TeachClass12()
        {
            Thread.Sleep(3000);
            Console.WriteLine("Taught class 12");
  
        }
  
        public static void TeachClass11()
        {
            Thread.Sleep(2000);
            Console.WriteLine("Taught class 11");
  
        }
    
}





Asynchronous Programming:
Using asynchronous programming indicates that a method can execute without waiting for another method to complete. Using async and await, we can run the methods above parallelly.

Example 2:

// C# program for async and await
using System;
using System.Threading;
using System.Threading.Tasks;
  
public class GFG{
  
    static void Main(string[] args)
        {
  
            Demo();
            Console.ReadLine();
  
        }
  
        public static void Demo() {
            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
  
            var task1 = StartSchoolAssembly();
            var task2 = TeachClass12();
            var task3 = TeachClass11();
  
  
            Task.WaitAll(task1, task2, task3);
            watch.Stop();
            Console.WriteLine($"Execution Time:
                              {watch.ElapsedMilliseconds} ms");
              
        }
          
          
        public static async Task StartSchoolAssembly()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(8000);
                Console.WriteLine("School Started");
            });
        }
  
  
        public static async Task TeachClass12()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(3000);
                Console.WriteLine("Taught class 12");
            });
              
  
        }
  
        public static async Task TeachClass11()
        {
            await Task.Run(() =>
            {
                Thread.Sleep(2000);
                Console.WriteLine("Taught class 11");
            });
              
  
        }
    
}



Notice that these methods above have run parallelly and the execution time taken will be the same as the time taken by StartSchoolAssembly() as this is the method that is taking the longest time.

Do we really want this output? How can we start teaching classes 11 and 12 without starting the school assembly? Let us wait for the school assembly to finish irrespective of how long it is taking and later the teaching for classes 11 and 12 can begin.

Here task1 represents the school assembly. Therefore let us use the await keyword to wait for the school assembly task to finish.

Example 3:

// C# program for await keyword
using System;
using System.Threading;
using System.Threading.Tasks;
  
public class GFG
{
  
    static void Main(string[] args)
    {
  
        Demo();
        Console.ReadLine();
  
    }
  
    public static async void Demo()
    {
        var watch = new System.Diagnostics.Stopwatch();
        watch.Start();
  
        var task1 = StartSchoolAssembly();
        await task1;
        var task2 = TeachClass12();
        var task3 = TeachClass11();
  
  
        Task.WaitAll(task1, task2, task3);
        watch.Stop();
        Console.WriteLine($"Execution Time: 
                          {watch.ElapsedMilliseconds} ms");
  
    }
  
  
    public static async Task StartSchoolAssembly()
    {
        await Task.Run(() =>
        {
            Thread.Sleep(8000);
            Console.WriteLine("School Started");
        });
    }
  
  
    public static async Task TeachClass12()
    {
        await Task.Run(() =>
        {
            Thread.Sleep(3000);
            Console.WriteLine("Taught class 12");
        });
  
  
    }
  
    public static async Task TeachClass11()
    {
        await Task.Run(() =>
        {
            Thread.Sleep(2000);
            Console.WriteLine("Taught class 11");
        });
  
  
    }
  
}



 

Notice that the TeachClass12() and TeachClass11() execute only after the StartSchoolAssembly() completes. The school assembly takes 8 seconds to complete. Class 11 finishes the class soon as it takes only 2 seconds. Class 12 finishes a bit late as it takes 3 seconds. Therefore the total execution time is 8s + 3s = 11s.



async and await program -------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace AsyncAwaitApp
{
    class Program
    {
        static string processConnectToDatabase = "(Connecting to database)";
        static string processGetDataFromDatabase = "(Getting data from database)";

        static void Main(string[] args)
        {
            Console.WriteLine("First we are inside the main method.");
            RunProcess(1, 1_000_000);
            
           var dbTask = ConnectToDatabaseProcessAndGetData();
           Console.WriteLine("Back to the main method.");
            if (dbTask.Status == TaskStatus.RanToCompletion)
                Console.WriteLine($"Process {processConnectToDatabase} is completed.");
            else
                Console.WriteLine($"Process {processConnectToDatabase} is NOT completed.");

            RunProcess(2, 1_000_000);
            RunProcess(3, 1_000_000);
            RunProcess(4, 1_000_000);

            Console.ReadLine();
        }
        
        public static async Task ConnectToDatabaseProcessAndGetData()
        {
            Console.WriteLine($"\nControl is with process {processConnectToDatabase}.");
            Console.WriteLine($"Process {processConnectToDatabase} has started.");
            Console.WriteLine($"Process {processConnectToDatabase} is running...");
            await Task.Run(() =>
            {
                Console.WriteLine("Start executing process in the await section.");
                Thread.Sleep(7000);
                RunProcess(10, 100000);
                Console.WriteLine("\nProcess in the await section is complete!");
            });
            Console.WriteLine($"\nProcess {processConnectToDatabase} is complete!");
            Console.WriteLine($"Control is with process {processGetDataFromDatabase} again");
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine("Getting data..... " + i);
            }
            Console.WriteLine($"Process {processGetDataFromDatabase} is complete!");
        }


        private static void RunProcess(int processNumber, int processLoopCondition)
        {
            Console.WriteLine("\nControl is with process " + processNumber);
            Console.WriteLine($"Process ({processNumber}) has started.");
            Console.WriteLine($"Process ({processNumber}) is running...");
            for (int i = 1; i <= processLoopCondition; i++)
            {
            }
            Console.WriteLine($"Process ({processNumber}) is complete!");
            Console.WriteLine("\nControl is back to main method.");
        }
    }
}






concurrent collection-
___________________________




BlockingCollection<T>
ConcurrentBag<T>
ConcurrentDictionary<TKey,T>
ConcurrentStack<T>
ConcurrentQueue<T>


Provides several thread-safe collection classes that should be used in place of the corresponding types in the
System.Collections and System.Collections.Generic namespaces whenever multiple threads are accessing the collection
concurrently.






Introduction

The .NET framework offers some collection classes specifically used in multithreading. These collections are internally used synchronization hence we can call them thread safe collections. These collections can be accessed by multiple threads at a time hence they are called .

Here is the list of  in C# 4.0

ConcurrentStack<T>
ConcurrentQueue<T>
BlockingCollection<T>
ConcurrentBag<T>
ConcurrentDictionary<TKey,T>
Let’s discuss ConcurrentCollections in detail,

ConcurrentStack<T>: This is thread-safe last-in-first-out collection.

Difference between Stack and Concurrent Stack

Sr. No

Stack<T>

ConcurrentStack<T>

1

Not thread-safe

Thread-safe

2

Stack has Pop method

ConcurrentStaick has TryPop method

3

Can add single item at a time.

Can add multiple item at a time.

4

Can remove single item at a time

Can remove multiple item at a time.

5

Add item using Push method

Add item using or PushRange method

6

Remove item using Pop method

Remove item using TryPop or TryPopRange method.

Push: Add item at top of ConcurrentStack.

PushRange: Tries to add multiple items at top of ConcurrentStack.

TryPeek: Tries to return last item from ConcurrentStack.

TryPop: Tries to pop and return last item from ConcurrentStack.

ConcurrentQueue<T>: This is thread-safe first-in-first-out collection.

Difference between Queue and ConcurrentQueue

Sr. No

Queue<T>

ConcurrentQueue<T>

1

Not thread-safe

Thread-safe

2

Queue has Enqueue and Dequeue methods

ConcurrentQueue has Enqueue and TryDequeue methods

3

Can add single item at a time.

Can add multiple item at a time.

4

Can remove single item at a time

Can remove multiple item at a time.

Enqueue: Add item to end of ConcurrentQueue.

TryDequeue: Tries to remove and return first item from ConcurrentQueue.

TryPeek: Return first item from ConcurrentQueue.

BlockingCollection<T> 

This collection is thread-safe for adding and removing data. You can set maximum upper limit to add items in this collection. Removing an item from     the collection can be blocked until item becomes available. 

Add: Add item into BlockingCollection.

Take: Removes item from BlockingCollection .

TryAdd: Tries to add item into BlockingCollection.

TryTake: Tries to remove item from BlockingCollection.

ConcurrentBag<T>

ConcurrentBag is thread-safe collection. This collection is like just at bag or heap of objects. It has not ordering and it allow duplicate items.

ConCurrentBag has mainly three methods.

Add: Add item into ConcurrentBag collection.

TryTake: Tries to remove and return item from ConcurrentBag.

TryPeek: Tries to return item from ConcurrentBag.

ConcurrentDictionary<TKey,T>

Concurrent dictionary is thread-safe collection. It is used to store key-value pair in multi-threaded environment.

Add: Add item into concurrent dictionary.

Remove: Remove item from concurrent dictionary.

Update: Update existing item in concurrent dictionary.

TryUpdate: This method check whether item is exist or not before update.

AddOrUpdate: This method add item into concurrent dictionary if that object does not exist.

GetOrAdd: This method return current value in dictionary if it exist otherwise add as new value.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Threading;

namespace ConcurrentBagApp
{
    class Program
    {
        static void Main(string[] args)
        {
            ConcurrentBag<int> bag = new ConcurrentBag<int>();

            Thread t1 = new Thread(() =>
            {
                Console.WriteLine("Thread (1) has started");
                for (int i = 1; i <= 10; i++)
                {
                    Console.WriteLine("Thread (1) added number " + i);
                    bag.Add(i);
                }
                Console.WriteLine("Thread (1) is complete!");
            });

            Thread t2 = new Thread(() =>
            {
                t1.Join();//checks whether the task 1 is completed or not
                Console.WriteLine("Thread (2) has started");
                for (int i = 11; i <= 25; i++)
                {
                    Console.WriteLine("Thread (2) added number " + i);
                    bag.Add(i);
                }
                Console.WriteLine("Thread (2) is complete!");
            });

            Thread t3 = new Thread(() =>
            {
                t1.Join();//checks whether the task 1 is completed or not
                t2.Join();//checks whether the task 2 is completed or not
                Console.WriteLine("Thread (3) has started");
                foreach (var item in bag)
                {
                    Console.WriteLine(item);
                }
                Console.WriteLine("Thread (3) is complete!");
            });

            t1.Start();
            t2.Start();
            t3.Start();
        }
    }
}








other programs--------------
________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace AssignmentNo22
{
    class Program
    {
        static void Main(string[] args)
        {
            ConcurrentStack<int> stack = new ConcurrentStack<int>();
            int threadThreeAccessCounter = 0;
            int threadFourAccessCounter = 0;

            Thread t1 = new Thread(() =>
            {
                for (int i = 1; i <= 10; i++)
                {
                    stack.Push(i);
                }
            });
            t1.Start();

            Thread t2 = new Thread(() =>
            {
                for (int i = 11; i <= 20; i++)
                {
                    stack.Push(i);
                }
            });
            t2.Start();

            Thread t3 = new Thread(() =>
            {
                int stackValue = 0;
                foreach (int item in stack)
                {
                    stack.TryPop(out stackValue);
                    if (stackValue != 0)
                    {
                        Console.WriteLine("Now Thread (3) is accessing " + stackValue );
                        threadThreeAccessCounter++;
                    }

                }
            });
            t3.Start();

            Thread t4 = new Thread(() =>
            {
                int stackValue = 0;
                foreach (int item in stack)
                {
                    stack.TryPop(out stackValue);
                    if (stackValue != 0)
                    {
                        Console.WriteLine("Now Thread (4) is accessing " + stackValue );
                        threadFourAccessCounter++;
                    }
                }
            });
            t4.Start();

            Thread.Sleep(10);
            Console.WriteLine("\nThread (3) accessed " + threadThreeAccessCounter);
            Console.WriteLine("Thread (4) accessed " + threadFourAccessCounter);
        }
    }
}


________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace AssignmentNo20
{
    class Program
    {
        static void Main(string[] args)
        {            
            SayHi hi = new SayHi(); string name = "Ahmad"; int count = 2;
            List<Thread> listofThreads = new List<Thread>();

            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiEnglish(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiKorean(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiFrench(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiGreek(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiHindi(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiRussian(name, count))));
            listofThreads.Add(new Thread(new ThreadStart(() => hi.SayHiSwedish(name, count))));

            foreach (var thread in listofThreads)
            {
                thread.Start();
            }
        }
    }

    class SayHi
    {
        public void SayHiEnglish(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Hi " + name);
            }
        }

        public void SayHiKorean(string name,int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Annyeong " + name);
            }
        }
        public void SayHiFrench(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Salut " + name);
            }
        }

        public void SayHiGreek(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Geia " + name);
            }            
        }

        public void SayHiHindi(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Namaste " + name);
            }
        }

        public void SayHiRussian(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Zdravstvuy " + name);
            }            
        }

        public void SayHiSwedish(string name, int count)
        {
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Hej " + name);
            }
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace AssignmentNo21
{
    class Program
    {
        static Task t1;
        static Task t2;
        static void Main(string[] args)
        {
            int loopConditionCount = 10;
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
            CancellationToken token = cancellationTokenSource.Token;

            Task t1 = new Task(() =>
            {
                int max = 0;
                for (int i = 1; i <= loopConditionCount; i++)
                {
                    if (token.IsCancellationRequested)
                        break;
                    else
                    {
                        Console.WriteLine($"Task One run number {i} ");
                        max = i;
                    }
                }
                Console.WriteLine();
                if (max == loopConditionCount)
                    Console.WriteLine("TASK ONE IS COMPLETE!");
                else
                {
                    Console.WriteLine("Task One is cancelled");
                    Console.WriteLine("Task One Maximum " + max);
                }
                cancellationTokenSource.Cancel();
            });

            t2 = new Task(() =>
            {
                int max = 0;
                for (int i = 1; i <= loopConditionCount; i++)
                {
                    if (token.IsCancellationRequested)
                        break;
                    else
                    {
                        Console.WriteLine($"Task Two run number {i} ");
                        max = i;
                    }
                }
                Console.WriteLine();
                if (max == loopConditionCount)
                    Console.WriteLine("TASK TWO IS COMPLETE!");
                else
                {
                    Console.WriteLine("Task Two is cancelled");
                    Console.WriteLine("Task Two Maximum " + max);
                }
                cancellationTokenSource.Cancel();
            });

            t1.Start();
            t2.Start();

            Task.WaitAll(t1, t2);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________________________

program.cs------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo19
{
    class Program
    {
        static void Main(string[] args)
        {
            var filteredList = new List<Employees>();
            var listOfEmployees = new List<Employees>
            {
                new Employees { EmployeeID=1150, FirstName="Jack",LastName="Steven", Salary=5000m, Age=35,Appraisal = new List<int>{7,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Debora",LastName="Watson", Salary=10000m, Age=45,Appraisal = new List<int>{9,9,8,9,8} },
                new Employees { EmployeeID=1150, FirstName="Claire",LastName="Adam", Salary=7500m, Age=32,Appraisal = new List<int>{9,7,8,9,7} },
                new Employees { EmployeeID=1150, FirstName="Michael",LastName="Rob", Salary=3500m, Age=22,Appraisal = new List<int>{6,7,8,7,7} },
                new Employees { EmployeeID=1150, FirstName="Matthew",LastName="Forest", Salary=4500m, Age=28,Appraisal = new List<int>{7,7,6,6,7} },
                new Employees { EmployeeID=1150, FirstName="Charles",LastName="Kris", Salary=8000m, Age=27,Appraisal = new List<int>{8,9,7,8,8} },
                new Employees { EmployeeID=1150, FirstName="Robert",LastName="Wilson", Salary=8000m, Age=28,Appraisal = new List<int>{8,9,8,9,9} },
                new Employees { EmployeeID=1150, FirstName="Emma",LastName="Brooks", Salary=6000m, Age=23,Appraisal = new List<int>{8,6,9,9,7} },
                new Employees { EmployeeID=1150, FirstName="Jennifer",LastName="Blake", Salary=3000m, Age=38,Appraisal = new List<int>{6,7,7,6,6} },
                new Employees { EmployeeID=1150, FirstName="Terry",LastName="Loyd", Salary=9000m, Age=49,Appraisal = new List<int>{9,9,9,8,7} },
                new Employees { EmployeeID=1150, FirstName="Adam",LastName="Spencer", Salary=7000m, Age=33,Appraisal = new List<int>{8,8,8,6,7} },
                new Employees { EmployeeID=1150, FirstName="Stacy",LastName="Shelton", Salary=4000m, Age=25,Appraisal = new List<int>{8,7,8,6,7} }
            };

            Employees.DisplayWithApparisal(listOfEmployees, "All Employees", true);

            // New
            //Salary is greater than or equal to 6000 and age greater than 40
            filteredList = (from emp in listOfEmployees
                            where emp.Salary >= 6000 && emp.Age > 40
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Salary is greater than or equal to 6000 and age greater than 40", true);

            //Salary is greater than or equal to 6000 and age greater than 40 or salary is greater than or equal 8000
            filteredList = (from emp in listOfEmployees
                            where emp.Salary >= 6000 && emp.Age > 40 || emp.Salary >= 8000
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Salary is greater than or equal to 6000 and age greater than 40 or salary is greater than or equal 8000", true);

            //Exercise
            //Apparisal less than 8 and salary greater than  4000
            filteredList = (from emp in listOfEmployees
                            where emp.Salary > 4000 && emp.Appraisal[0] < 8
                            select emp).ToList();
            Employees.DisplayWithApparisal(filteredList, "Apparisal less than 8 and salary greater than 5000", true);
            //
        }
    }
}

employees.cs------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo19
{
    class Employees
    {
        private int employeeID;
        private string firstName;
        private string lastName;
        private decimal salary;
        private int age;
        private List<int> appraisal;

        public int EmployeeID
        {
            get { return employeeID; }
            set { employeeID = value; }
        }
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }
        public decimal Salary
        {
            get { return salary; }
            set { salary = value; }
        }
        public int Age
        {
            get { return age; }
            set { age = value; }
        }
        public List<int> Appraisal
        {
            get { return appraisal; }
            set { appraisal = value; }
        }

        public static void Display(List<Employees> employees)
        {
            foreach (var employee in employees)
            {
                Console.WriteLine($"{employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}");
            }
            Console.WriteLine("\n--------\n");
        }

        public static void DisplayWithApparisal(List<Employees> employees, string message, bool displayCount)
        {
            int index = 0;
            if (displayCount)
                Console.WriteLine($"Found ({employees.Count}) employees");
            if (message != string.Empty)
            {
                Console.WriteLine(message);
                Console.WriteLine("----------------------------------------------------");
            }
            foreach (var employee in employees)
            {
                index++;
                Console.Write($"{index}) {employee.FirstName} {employee.LastName}, {employee.Salary}, {employee.Age}, last 5 apparisals |");
                foreach (var app in employee.Appraisal)
                {
                    Console.Write(app + "|");
                }
                Console.WriteLine();
            }
            Console.WriteLine("\n");
        }

    }
}







working with the speech syntazier-
_____________________________________________

speach syntazier is a exter nal module to download it to download this external module use visual studio create the new project right click on the reference in the solution explorer tab right side

after clicking click on "add new reference " serch for "System.Speech" press ok it will automatically download nad install it


do add this line in the program before using this module 

using System.Speech.Synthesis

speakAsync speaks asynchronously -

speak speaks in order of the program - 

u can also create the audio output to store in a file using "setoutputtowavefile"

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Speech.Synthesis;

namespace SpeechSynthesizerApp
{
    class Program
    {
        static void Main(string[] args)
        {
            SpeechSynthesizer robot = new SpeechSynthesizer();

            robot.SelectVoiceByHints(VoiceGender.Female); // setting the voice of the speaker default is male
            robot.Volume = 50;
            robot.Rate = 2;
            robot.SpeakAsync("Hello, What is your name?");
            Console.WriteLine("Hello, What is your name?");
            var name = Console.ReadLine();
            robot.SpeakAsync("Hello " + name);
            Console.WriteLine("Hello " + name);

            Console.ReadLine();

            robot.SetOutputToWaveFile(@"c:\sounds\app.wav"); //output file location the out put will be recored after this line only

            robot.Speak("Application is complete, please visit us again");
        }
    }
}





pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Speech.Synthesis;

namespace SpeakMethodExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "Wilson";
            name.Speak();
        }
    }

    static class Extensions
    {
        public static void Speak(this string objectToSpeak)
        {
            SpeechSynthesizer robot = new SpeechSynthesizer();
            robot.Speak(objectToSpeak);
        }
    }
}








starting and stopping the process using c#-
_____________________________________________

this is used to start the external application 


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace StartingAndStoppingProcess
{
    class Program
    {
        static void Main(string[] args)
        {
            Process.Start("Notepad.exe");
            Process.Start(@"C:\");
            Process.Start("chrome.exe");
            Process.Start("devenv.exe");
            Process.Start("https://www.google.com");
            


            Process[] notepads = Process.GetProcessesByName("notepad"); //used to kill multiple instance of notepad
            foreach (var process in notepads)
            {
                process.Kill();
            }
        }
    }
}


pro2______________________________________________________________________________________________________________________________________________________________________________________________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace StartingAndStoppingProcess
{
    class Program
    {
        static void Main(string[] args)
        {
            Process.Start("Notepad.exe");


            Process.GetProcessesByName("notepad")[0].Kill(); // to kill a single process


        }
    }
}




pro2______________________________________________________________________________________________________________________________________________________________________________________________________

notepad activity-
-----------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NotePadExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            System.IO.File.WriteAllText(@"C:\Files\notepadExercise.txt", "Hello from the notepad exercise");
            System.Diagnostics.Process.Start(@"C:\Files\notepadExercise.txt");
        }
    }
}








multidimensional array-
___________________________





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultidimensionalArrays
{
    class Program
    {
        static void Main(string[] args)
        {
            string[,] Array2D = new string[3, 2];
            Array2D[0, 0] = "Item 00";
            Array2D[0, 1] = "Item 01";
            Array2D[1, 0] = "Item 10";
            Array2D[1, 1] = "Item 11";
            Array2D[2, 0] = "Item 20";
            Array2D[2, 1] = "Item 21";

            int[,] Array2DA = new int[4, 2] { { 1, 1 }, { 2, 2 }, { 3, 3 }, { 4, 4 } };
            string[,] NumbersArray = new string[,] { { "One", "Two" }, { "Three", "Four" }, { "Five", "Six" }, { "Seven", "Eight" }, { "Nine", "Ten" } };

            //foreach (var item in NumbersArray)
            //{
            //    Console.WriteLine(item);
            //}

            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine("Now we are accessing ROW no " + i);
                for (int j = 0; j < 2; j++)
                {
                    Console.WriteLine("Now we are acessing COLUMN " + j);
                    Console.WriteLine(NumbersArray[i,j]);
                }
            }


            Console.WriteLine();
        }
    }
}



pro2______________________________________________________________________________________________________________________________________________________________________________________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MultidimensionalArraysExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            string[,] array = new string[4, 4];
            array[0, 0] = "Item00";
            array[0, 1] = "Item01";
            array[0, 2] = "Item02";
            array[1, 0] = "Item10";
            array[1, 1] = "Item11";
            array[1, 2] = "Item12";
            array[2, 0] = "Item20";
            array[2, 1] = "Item21";
            array[2, 2] = "Item22";

            Console.WriteLine("\tColumn 1 \tColumn 2 \tColumn 3");
            Console.WriteLine("\t------- \t------- \t-------");
            for (int i = 0; i < 4; i++)
            {
                Console.Write("Row " + (i+1));
                for (int j = 0; j < 4; j++)
                {
                    Console.Write("\t");
                    Console.Write(array[i,j]);
                    Console.Write("\t");
                    if(j==2)
                        Console.WriteLine();
                }
            }
            Console.WriteLine();
        }
    }
}



jagged array -
__________________

these array can differ in each column and row size 
eg:
1   0   2   3
2       4   5
        7   8   
            9



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JaggedArrays
{
    class Program
    {
        static void Main(string[] args)
        {
            int[][] jaggedArrayOne = new int[3][];
            jaggedArrayOne[0] = new int[5] { 0, 1, 2, 3, 4 };
            jaggedArrayOne[1] = new int[2] { 10,20 };
            jaggedArrayOne[2] = new int[3] { 1,3,5 };

            int[][] jaggedArrayTwo = {
            new int[] { 0,1,2,3,10,200},
            new int[] { 10,20,30,40,50,500,5000}
            };

            //Console.WriteLine(jaggedArrayTwo[1][4]);

            for (int i = 0; i < jaggedArrayTwo.Length; i++)
            {
                Console.WriteLine("Now acessing array number " + i);
                for (int j = 0; j < jaggedArrayTwo[i].Length; j++)
                {
                    Console.WriteLine(jaggedArrayTwo[i][j]);
                }
            }

            Console.WriteLine();
        }
    }
}






pro2______________________________________________________________________________________________________________________________________________________________________________________________________


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JaggedMultidimensionalExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int[][,] jaggedMultiArray = new int[3][,];

            jaggedMultiArray[0] = new int[2, 2] { { 1, 2 }, { 3, 4 } };
            jaggedMultiArray[1] = new int[3, 2] { { 10, 10 }, { 20, 20 }, { 30, 30 } };
            jaggedMultiArray[2] = new int[2, 2] { { 3, 5 }, { 1, 2 } };
            Console.WriteLine();
        }
    }
}








indexers-
___________________________

this is how u pass a array in a class of objects

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IndexersApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals animals = new Animals();

            animals[0] = "Dog";
            animals[1] = "Tiger";
            animals[2] = "Horse";

            Console.WriteLine(animals[2]);
        }
    }

    class Animals
    {
        private string[] name = new string[100];

        public string this[int index]
        {
            get { return name[index]; }
            set { name[index]= value; }
        }

    }
}






dynamic keyword-
___________________________

this used for defining the dynamic data type 

like u can define any value a int ,str or a list  etc ...... u can also defiune dynamic objects with multiple datatypes and parameters


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DynamicKeyword
{
    class Program
    {
        static void Main(string[] args)
        {
            dynamic value = 0;
            Console.WriteLine("Value is " + value);
            Console.WriteLine("Value type is " + value.GetType().Name);
            Console.WriteLine();

            value = "Game of Thrones";
            Console.WriteLine("Value is " + value);
            Console.WriteLine("Value type is " + value.GetType().Name);
            Console.WriteLine();

            value = new Animals();
            value.Name = "Dog";
            Console.WriteLine("Value is " + value.Name);
            Console.WriteLine("Value type is " + value.GetType().Name);
            Console.WriteLine();

        }
    }

    class Animals
    {
        private string name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }
}





var vs Dynamic-
__________________




 




readonly keyword-
__________________

this is a key word where u can only read the variable not write value in it

if u want to write the data it can be only done using the class get function and put function




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadonlyKeyword
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals dog = new Animals("Dog");
            Console.WriteLine(dog.AnimalName);

            dog = new Animals("Another Dog");
            Console.WriteLine(dog.AnimalName);

        }
    }

    class Animals
    {
        readonly private string animalName;

        public string AnimalName
        {
            get => animalName;
        }

        public Animals(string name)
        {
            animalName = name;
        }
    }
}







static derivatives-
___________________________

u dont need to call the full function when u use it eg:

Systerm.Console.WriteLine() or Console.WriteLine();

u can first define the class u are using with the "using" key word then use only the nessary function 


eg:






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Math;
using static System.Console;

namespace StaticDirectives
{
    class Program
    {
        static void Main(string[] args)
        {
            WriteLine(Round(2.5465,2));
        }
    }
}








preprocessor directives-
_____________________________________________

it is defined using the # in the code 

this tells the compiler to call this first before exection of actual code

there are few types eg

#define

this is used to dine tyhe state of whole program like u can name any liske underDEV - for under developement or Debug - for Debugging

#if

this can be used to check the state which is defined is true or fales based on this any desision can be taken

#else

it will execute the else part

#endif

indicator of where the if statement ends

#warning

this used to print the waring in the compiler section

#error

this is used to create a custom error so that u an see it while execution this is not like warnig it will stop the program from execution

#pragma warning disable

this is used to diable the warnings inside the program






#define underDeva
#pragma warning disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PreprocessorDirectives
{
    class Program
    {
        static void Main(string[] args)
        {
            int x;
            /*
               #define #if  #else #endif #warning #error #pragma warning disable 
            */

#if(underDev)
            Console.WriteLine("This app is under development");
//#error This app is not yet finished Oh my God this is so amaaazing
#else
            Console.WriteLine("This app is Complete");
#warning This app is complete and ready to be published
#endif

        }
    }
}







isNullOrEmpty message-
___________________________

this is used to find the value is null or empty or does has some value 

there are  many ways to find it 

u can also find does it contains only the white spaces






using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IsNullOrEmptyApp
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = " ";
            if (name == "" || name is null) // this doesnt finds the empty space
                Console.WriteLine("Empty");
            else
                Console.WriteLine("Has a value");

            if(string.IsNullOrEmpty(name)) // this doesnt finds the empty space
                Console.WriteLine("Empty");
            else
                Console.WriteLine("Has a value");

            if(string.IsNullOrWhiteSpace(name))
                Console.WriteLine("Empty");
            else
                Console.WriteLine("Has a value");
        }
    }
}






destructors-
__________________

they run when the object is going to lose the scope

the destructor is defined as same as the class name but defined with "~" sign

there can be only one destructor in a class







using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DestructorsApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Animals dog = new Animals();
            var name = Console.ReadLine();
        }
    }

    class Animals
    {
        public Animals()
        {
            Console.WriteLine("A new animal is created");
        }

        ~Animals()
        {
            Console.WriteLine("Animal object is about to be destroyed");
        }
    }
}








using statement-
___________________________



for file writing u have to open and close the object like that fore the network socket to automate this we are using this key word

it automatically opens and closes when the object is executed a set of instructions 

eg:




using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UsingStatement
{
    class Program
    {
        static void Main(string[] args)
        {
            using (StreamWriter sw = new StreamWriter(@"c:\files\heroes.txt"))
            {
                sw.WriteLine("Superman");
                sw.WriteLine("Batman");
                sw.WriteLine("Wonder Woman");
                sw.WriteLine("Aquaman");
                sw.WriteLine("Flash");
            }
        }
    }
}












assemblies-
__________________


to know more - https://www.c-sharpcorner.com/UploadFile/78607b/what-is-assembly/#:~:text=by%20the%20CLR.-,An%20Assembly%20is%20a%20basic%20building%20block%20of%20.,a%20logical%20unit%20of%20functionality.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;

namespace AssembliesApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Assembly assemObject = Assembly.GetEntryAssembly();
            AssemblyName assemName = assemObject.GetName();

            Console.WriteLine(assemName.Name);
        }
    }
}








CultureInfo-
__________________

this is used to describe the real world culture like english language and from us or uk and different languages from different reagion

and also used to get type of currncy it can be useful when u make fin tech app that is used globally and if they need to change any of the settings

even calander can be accessed

more detail - https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?redirectedfrom=MSDN&view=net-7.0







using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;

namespace CultureInfoApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Assembly assemObject = Assembly.GetEntryAssembly();
            AssemblyName assemName = assemObject.GetName();

            Console.WriteLine(assemName.FullName);

            Console.WriteLine(assemName.CultureName);
            CultureInfo cultureInfo = new CultureInfo("en-GB");
            assemName.CultureInfo = cultureInfo;
            Console.WriteLine(assemName.CultureInfo.DisplayName);
            Console.WriteLine(assemName.CultureInfo.NativeName);
            Console.WriteLine(assemName.CultureInfo.NumberFormat.CurrencySymbol);
            Console.WriteLine(assemName.CultureInfo.Calendar);


        }
    }
}








versions-
__________

used to controle or define the version of the software






using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace VersionsApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Assembly assemObject = Assembly.GetEntryAssembly();
            AssemblyName assemName = assemObject.GetName();

            Console.WriteLine(assemName.FullName);

            Console.WriteLine(assemName.CultureName);
            CultureInfo cultureInfo = new CultureInfo("en-GB");
            assemName.CultureInfo = cultureInfo;
            Console.WriteLine(assemName.CultureInfo.DisplayName);
            Console.WriteLine(assemName.CultureInfo.NativeName);
            Console.WriteLine(assemName.CultureInfo.NumberFormat.CurrencySymbol);
            Console.WriteLine(assemName.CultureInfo.Calendar);

            Console.WriteLine(assemName.Version);
            assemName.Version = new Version(2, 0, 0, 0);
            Console.WriteLine(assemName.Version);
        }
    }
}









region info-
___________________________

this only contain the information the region nothing else like the geolocation

it can be useful if u have map functionality in ur program

u can alos get info like they use metric systerm or not incase u are making a shoping website that has values like kg etc

curtrency etcc............





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;

namespace RegionInfoApp
{
    class Program
    {
        static void Main(string[] args)
        {
            RegionInfo info = new RegionInfo("AE");

            Console.WriteLine(info.DisplayName);
            Console.WriteLine(info.IsMetric);
            Console.WriteLine(info.CurrencyEnglishName);
            Console.WriteLine(info.ThreeLetterISORegionName);
        }
    }
}



more on this -- https://learn.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo?redirectedfrom=MSDN&view=net-7.0








attributes-
__________________

Obsolete - this gives a message while uing an metthod or a variable that it shows a green line with a message like this is not going to be used or use this insted and pass this and otherwise

u can make it false so it doesnt display or true to display 

it will not allow u to run the program it will show a error


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace AttributesApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Persons.SayHi();
            Persons.SayHello();
            Persons.DisplayMessage("We are in the debugging mode");
        }
    }

    class Persons
    {
        [Obsolete("This method is not going to be included in the upcoming versions",false)]
        public static void SayHi()
        {
            
        }

        public static void SayHello()
        {

        }

        [Conditional("DEBUG")]
        public static void DisplayMessage(string message)
        {
            Console.WriteLine(message);
        }
    }
}








custome attribute-
___________________________

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomAttributes
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class Developer : System.Attribute
    {
        private string developerName;
        private bool isReviewed;
        private string message;

        public Developer(string developerName, bool isReviewed, string message)
        {
            this.developerName = developerName;
            this.isReviewed = isReviewed;
            this.message = message;
        }

        public string DeveloperName
        {get => developerName;set => developerName = value;}

        public bool IsReviewed
        {get => isReviewed;set => isReviewed = value;}

        public string Message
        {get => message;set => message = value;}
    }

    class Program
    {
        static void Main(string[] args)
        {

        }
    }

    [Developer("Ahmad Mohey",false,"This need to be finished by next friday")]   // the attribute is defined at top
    class Animals
    {

    }
}


these are used to give the custome messages or the errors and copile time messages 






reflections-
___________________________

this how u get all the atributes linked 

the content is not shown




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;


namespace ReflectionsApp
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class Developer : System.Attribute
    {
        private string developerName;
        private bool isReviewed;
        private string message;

        public Developer(string developerName, bool isReviewed, string message)
        {
            this.developerName = developerName;
            this.isReviewed = isReviewed;
            this.message = message;
        }

        public string DeveloperName
        { get => developerName; set => developerName = value; }

        public bool IsReviewed
        { get => isReviewed; set => isReviewed = value; }

        public string Message
        { get => message; set => message = value; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            MemberInfo info = typeof(Animals);
            object[] attributes = info.GetCustomAttributes(true);
            for (int i = 0; i < attributes.Length; i++)
            {
                Console.WriteLine(attributes[i]);
            }
        }
    }

    [Developer("Ahmad Mohey", false, "This need to be finished by next friday")]
    [Obsolete]
    class Animals
    {

    }
}





serialization and deserialization-
_____________________________________________

serialization its nothing to conver the data to bits and bytes to store diffrent place which can be easy to transfer opp is deserialization



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































ls -10 8

last seen - https://www.youtube.com/watch?v=GhQdlIFylQ8&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i 

last seen - youtube.com/watch?v=hxIb99-Z8_I&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i&index=4
