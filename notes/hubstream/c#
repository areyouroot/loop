we need to download and work in visual studio
and in visual stdio select the community edition and the package is .NET desktop developement

after installing open a directory and open that dir with visual studio and select new project and start the type of application that u are going to develope select the options and frame work version 

and now a template is generated for you to work make sure you dont have any old apps in that folder if that exist its fine still it can some times overlap

for me i have choose "new -> new project -> console app (.net framework)

the new generated program will be like having a file called program.cs and the content will be 

note : the text behind // are meessages this will not reflect in original code they are only for reference

----------------------------------------code----------------------------------------------

using System;                           //these are header files
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program              //classes
    {
        static void Main(string[] args) //functions or aka method
        {
            //here is where the actual code is typed and first executed
        }
    }
}

------------------------------------------------------------------------------------------

-------------------------------hello world program----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World");
            
        }
    }
}
---------------------------------------------------------------------------------------------


-------------------------first program to print hello world-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");
        }
    }
}

------------------------------------------------------------------------------------------

select 2nd play button "run without debugging"

to execute the program fully use first start button but the program will be terminated after execution u can stuck it by demanding a input

to get input use 

    Console.ReadLine();

full program

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            Console.ReadLine();
        }
    }
}

to print the line without the next line use 

            Console.Write("hello world");

this prints in same line

_______________________variables__________________________________________________________

variables are use to store data in a program for more pls google it

C# Variables
Variables are containers for storing data values.

In C#, there are different types of variables (defined with different keywords), for example:

int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false
var - can store anything for float mention f at last of the number d - decimals or value in actual float like 2.9 or string etc ..........

sample for float double and decimal:

code :

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FloatingPointNumbers
{
    class Program
    {
        static void Main(string[] args)
        {
            float f_no = 0.0f;
            double d_no = 0.0d;
            decimal m_no = 0.0m;

            f_no = 1 / 3f;
            d_no = 1 / 3d;
            m_no = 1 / 3m;

            //place holder
            Console.WriteLine("Float no. is {0}", f_no);
            Console.WriteLine("Double no. is {0}", d_no);
            Console.WriteLine("Decimal no. is {0}", m_no);
        }
    }
}


output:

    Float no. is 0.3333333
    Double no. is 0.333333333333333
    Decimal no. is 0.3333333333333333333333333333
    Press any key to continue . . .


Declaring (Creating) Variables
To create a variable, you must specify the type and assign it a value:

Syntax
type variableName = value;
Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.

To create a variable that should store text, look at the following example:

Example
Create a variable called name of type string and assign it the value "John":

string name = "John";
Console.WriteLine(name);

Other Types
A demonstration of how to declare variables of other types:

Example
int myNum = 5;
double myDoubleNum = 5.99D;
char myLetter = 'D';
bool myBool = true;
string myText = "Hello";

the other datatypes related to numbers are given as "./number datatypes.png" 

Name .NET Type Size Range
sbyte System.SByte 1 byte -128 to 127
byte System.Byte 1 byte 0 to 255
short System.Int16 2 bytes -32,768 to 32,767
ushort System.UInt16 2 bytes 0 to 65,535
int System.Int32 4 bytes -2,147,483,648 to 2,147,483,647
uint System.UInt32 4 bytes 0 to 4,294,967,295
long System.Int64 8 bytes -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
ulong System.UInt64 8 bytes 0 to 18,446,744,073,709,551,615
float System.Single 4 bytes 7 digits 1.5 x 10^-45 to 3.4 x 10^38
double System.Double 8 bytes 15-16 digits 5.0 x 10^-324 to 1.7 x 10^308
decimal System.Decimal 16 bytes 28-29 decimal places 1.0 x 10^-28 to 7.9 x 10^28




the variables can be concardinated in write line with + sign eg program with output

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("hello world");

            int myNum = 5;
            double myDoubleNum = 5.99D;
            char myLetter = 'D';
            bool myBool = true;
            string myText = "Hello";

            Console.WriteLine("int " + myNum );
            Console.WriteLine("double " + myDoubleNum + " number");
            Console.WriteLine("char " + myLetter );
            Console.WriteLine("bool " + myBool + " haha");
            Console.WriteLine("string " + myText );


            Console.ReadLine();
        }
    }
}


output:

hello world
int 5
double 5.99 number
char D
bool True haha
string Hello

-------------------------------------sample program2 for variables-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Variables
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 2;
            Console.WriteLine("Number x is " + x);
            x = 5;
            Console.WriteLine("Number x is " + x);

            double double_num = 0.0d;
            float float_num = 0.0f;
            decimal decimal_num = 0.0m;

            double_num = 9.8;
            float_num = 5.5f;
            decimal_num = 100.250m;

            Console.WriteLine("Double is " + double_num + " float is " + float_num + " decimal is "+decimal_num);

            string firstName, lastName, House;
            firstName = "Jon";
            lastName = " Snow";
            House = "Stark";


            Console.Write("Hello, " + firstName +  lastName + " of House Stark");

            bool IsWorking;

            IsWorking = true;

            Console.WriteLine(IsWorking);

            int sum;
            sum = 0;

            int number1, number2;

            number1 = 5;
            number2 = 100;
            sum = number2;
            Console.WriteLine(sum);
        }
    }
}

________________________________________________________________________________________________________________________________________________________________________________________

__________________________________________sample program for var---------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace var
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            string name = "faheem";

            var test = name;
            Console.WriteLine(test);
        }
    }
}

----------------------------------------------------------------------------------------------

to find the lenght of a string use ".Length"

eg:            Console.WriteLine( variable.length );

like length u can use ToUpper() to convert string from lower to Upper and ToLower() for wiseversa

            Console.WriteLine(myText.Contains("Hell"));

the above function is to check whether the given word is there in the string returns true or false

u can print character by character by their index position 
eg:myText[0]

note: index starts from 0

u can print the index of a character by the IndexOf function

u can print a range of indexes using the Substring function
eg: myText.Substring(2,5);

u can execute the arithmetic operations directly in write line function

Arithmetic Operations
 Addition (+) ex. 1 + 1 = 2
 Subtraction (-) ex. 3 - 1 = 2
 Multiplication (*) ex. 2 * 2 = 4
 Division (/) ex. 6 / 3 = 2
Remainder (%) ex. 7 % 3 = 1 or 19 % 5 = 4
Remainder is the amount left over after division
19 / 5
19 cannot be divided exactly by 5
 The closest you can get without going over is 3 x 5 = 15, which is 4 less than 19
 So 4 is the remainder
 
code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 7;
            int y = 2;
            int result = 0;
            result = x % y;
            Console.WriteLine("Rem: " + result);
        }
    }
}

---------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticOperatorsExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            int x, y;
            int add, sub, mult,rem;
            float div;

            Console.WriteLine("Enter no. 1");
            x = int.Parse(Console.ReadLine());

            Console.WriteLine("Enter no. 2");
            y = int.Parse(Console.ReadLine());

            add = x + y;
            Console.WriteLine(x + " + " + y + " = " + add);

            sub = x - y;
            Console.WriteLine(x + " - " + y + " = " + sub);

            mult = x * y;
            Console.WriteLine(x + " * " + y + " = " + mult);

            div = (float)x / (float)y;
            Console.WriteLine(x + " / " + y + " = " + div);

            rem = x % y;
            Console.WriteLine(x + " % " + y + " = " + rem);
        }
    }
}


---------------------------------------------------------------------------------------------


Precedence of operators

wrong method

2 + 3 * 2 - 4 + 2
5 * 2 - 4 + 2
10 - 4 + 2
6 + 2
8

right method

2 + 3 * 2 - 4 + 2
2 + 6 - 4 + 2
8 - 4 + 2
4 + 2
6


increment and decrement exist

there are many math functions see https://www.w3schools.com/cs/cs_math.php

trial code use BODMAS:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrecedenceOfoperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            x = (2 + 3) * 2 - 4 + 2;
            Console.WriteLine(x);
        }
    }
}



---------------------------------------input operations----------------------------------
            
            Console.WriteLine("enter the name:");
            myText=Console.ReadLine(); //this read line only works for string
            Console.WriteLine("hello" + myText);

eg code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadLine
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");

            string name =  Console.ReadLine();

            Console.WriteLine("Welcome " + name + ", welcome back!");
        }
    }
}


-----------------------------------------------------------------------------------------
to convert the datatype of the variables u can use 

eg: int num = Convert.ToInt32("45");

or

eg: num = num.ToInt32();

also you can use 

eg: variable1 = (int)variable2;

like this, u have different datatypes that u can convert note the datatype should be compatible

-----------------------------------------sample data conversion-------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TypeConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            int serialNo = 150;
            string accountNo = "";
            float anyNo = 3.1f;

            accountNo = serialNo.ToString();

            Console.WriteLine(accountNo);

            //serialNo = Convert.ToInt32(anyNo);
            serialNo = (int)anyNo;

            Console.WriteLine(serialNo);
        }
    }
}


-------------------------------------arrays in c#-----------------------------------------

how to declare an array

syntax:

datatype[index limit] variableName = {value,values}; //here index limit can be empty
Console.WriteLine( variableName[index] );

eg:

int[] number = {1,2,3,4,5,6};
Console.WriteLine(number[0]);

to define a static array

syntax:

datatype variableName = new samedatatype[index limit];

eg:

string[] friends=new string[5]

----------------------------------------c# functions _____________________________________________

how to declare functions or aka methods

    static void Main(string[] args){
        functionName(variable or value to be passed);
    }

    static void functionName(datatype variableName){
        action block;
    }

eg:
-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            hi("hellow world");

            Console.ReadLine();
        }

        static void hi(string s)
        {
            Console.WriteLine(s);
        }
    }
}

-----------------------------------------------------------------------------------------

other rules are as same as other languages

-------------------------------------if statements------------------------------------------

if is as same as c and java

syntax + eg:

if(condition == condition){
    action block;
}
else if{
    action block false;    
}
else{
    action block else;
}

useful things in if:

1) == equalto
2) && and
3) || or
4) != not equal

Comparison operators

== equal
!= not equal
> greater than
 < less than
>= greater than or equal to
 <= less than or equal to

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConditionalStatmentsIF
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 5;
            int y = 7;

            x = int.Parse(Console.ReadLine());
            y = int.Parse(Console.ReadLine());

            if (x > y)
            {
                Console.WriteLine("Number one is greater than number two");
            }
            else if (x < y)
            {
                Console.WriteLine("Number one is less than number two");
            }
            else 
            {
                Console.WriteLine("They matches!!");
            }
         }
    }
}

-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComparisonOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            int x = 0;
            int y = 0;

            x = 9; y = 9;

            if (x == y)
                Console.WriteLine("X is equal to y");
            else if (x != y)
            {
                //nested if
                if (x > y)
                    Console.WriteLine("X is greater than y");
                else if (x < y)
                    Console.WriteLine("X is less than y");
            }
               

        }
    }
}

---------------------------------logical operators-----------------------------------------

Logical operators
Condition X Condition Y AND OR
true - true true true
true - false false true
false -true false true
false -false false false
AND
Learn to drive Get license Get to drive in streets
true- true true
true- false false
false- true false
false- false false
OR
Take a shower Go for a swim Get wet
true- true true
true- false true
false- true true
false- false false

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MoreLogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            bool username = false;
            bool email = false;
            bool password = true;

            if ((username || email) && password)
                Console.WriteLine("User is valid.");
            else
                Console.WriteLine("Something went wrong");
        }
    }
}

----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicalOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            // and operator
            //bool HasLicence = true;
            //bool KnowHowToDrive = false;

            //if (HasLicence == true && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You are good to go!");
            //}
            //else if (HasLicence == true && KnowHowToDrive == false)
            //{
            //    Console.WriteLine("Cheateeer!!!");
            //}
            //else if (HasLicence == false && KnowHowToDrive == true)
            //{
            //    Console.WriteLine("You need to get a licence");
            //}
            //else
            //{
            //    Console.WriteLine("That is not gonna happen pal!");
            //}

            // or operator
            bool WentForSwim = true;
            bool TookAShower = true;

            if (!WentForSwim || !TookAShower)
            {
                Console.WriteLine("Pal you are so wet");
            }
            else
            {
                Console.WriteLine("You are not wet");
            }

            // Not !
        }
    }
}

-----------------------------------------------------------------------------------------------

------------------------------------------------switch --------------------------------

syntax + eg:

switch(variable)
{
    case condition:
        actionblock case1;
        break;
    
    other cases..................
    .
    .
    .
    .
    .
    .
    .
    .
    .
    default:
    action block default;
    break;
}

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchStatment
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Are you enjoying C#? (Yes or No)");
            string input = Console.ReadLine();

            switch (input)
            {
                case "Yes": Console.WriteLine("This is very good"); break;
                case "No": Console.WriteLine("So sorry that you are not enjoying");break;
                default: Console.WriteLine("This is not a correct answer");break;
            }
        }
    }
}


---------------------------------------------while--------------------------------------

syntax + eg:

while(condition){
    actionblock;
}

the switch is as same as c and be careful if u didnt mention break it will continue to execute inside the switch break is used to jum out of switch case

do while is also same as c

syntax :

do{
    actionblock;
}while (condition);

//dont forget ;

--------------------------------------for-------------------------------------------------

for is as same as C

syntax:

for(intialization;condition;itration){
    action block;
}

-------------------------------------comments------------------------------------------------------
//single line 

/*multiline comment*/

sample code for comments:
----------------------------basic errors and debugging-----------------------------------
syntax errors - they are like spelling mistakes in codeing like usage of ; () and function name can be misused or missed or any data is mismatched type of data is incorrect

run time errors - error which is caused during run time

logical error - they are error in the logic like divided by zero 

----------------------------advance exception handelling aka error handeling-------------------------

they are as samme as C

use try for code and catch for error handeling

try{
    action block;
}
catch(type_of_exception object_for_reference /*optional*/){
    action on error;
    object_for_reference.command;
}
finally{
    should be executed action block;
}

to know more on detail and types read :https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm

execute no matter what happens should be added in finally method

-------------------------------------classes and objects----------------------------------

when u creat a class u can use a class file by accessing the view->solution explorer->(right click)new file->c# class

this will create a new class

when u define thwe classes make sure that u define the access controle such as public private protected internal etc.....

when ever u create and define a class make sure that u also declare and create a object_for_reference

eg class code (external class file called class1.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

    }
}

eg program code (main.cs):

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book();
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}

you can call functions also like this eg: name is a function then

book1.read(arguments);
_____________________________________________constructor----------------------------------

the constructure should have the class name there can be many constructure and the access type should be defined

the constructure should have as same name as class

eg program for the constructure:

main.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    internal class Program
    {
        static void Main(string[] args)
        {
            book book1= new book("baba");
            book1.name = "hari putter";
            book1.author = "jkd";
            book1.pages = 96;

            Console.WriteLine(book1.name);
            Console.WriteLine(book1.author);
            Console.WriteLine(book1.pages);

            Console.ReadLine();
        }
    }
}


class.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testcsharpnet
{
    class book
    {
        public string name;
        public string author;
        public int pages;

        public book(string title) { 
            Console.WriteLine(title);
        }

    }
}

when a object (class) is under a scope the constructor gets executed 

-------------------------------getters and setters-----------------------------------------

getters and setter are used to access the data which is private to return a specific value or to set a specific value 

sample code how to use getter and setter 

private private_variable;//declared in class

public datatype variable //this will represent the private variable
{
    get {return private_variable;}
    set{condition;}
}

the variable should be called by the public variable name 
-----------------------------static class attributes & methods--------------------------------------

static means that the method belongs to the Program class and not an object of the Program class. You will learn more about objects and how to access methods through objects later in this tutorial. void means that this method does not have a return value. You will learn more about return values later in this

u can only call use add the values or modify only using the class not out side the class eg object.variable will not work here u can only use in class and its function

syntax and eg:

public static int count=0;

--methods--

to access the class functions without the object declaration eg:math.sqrt(3,3) like this u can use the key word static

eg and syntax:

class.cs:

class class_name{
    public static void function_name(){
        action block;
    }
}

main.cs:

class_name.function_name();

no need of object declaration like object class_name= new objectname() then objectname.function_name(); // no need of this 

--------------------------------------inheritance-------------------------------------------

we use : for inheretance

we should have 2 class for in heretance

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg")
        //super class
    }
}

class nonvegchef : vegchef {
    public void noncook(){
        Console.WriteLine("cooks non veg")
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

------------------------------------overriding--------------------------------------------

if super class and sub class same named functions when u execute it u wnat that class function to run u can use override method

eg :

eg :
class1:

class vegchef{
    public void cook(){
        Console.WriteLine("cooks veg");
        //super class
    }
    public virtual noncook(){
        Console.WriteLine("cooks milk");
    }
}

class nonvegchef : vegchef {
    public override void noncook(){
        Console.WriteLine("cooks non veg");
        //subclass if veg chef is gone every thing in veg is gone 
    }
}

mainclass:

class main{
    static void main(string[] args){
        //u can call any chef to cook veg but only non veg chef cooks nonveg eg

        vegchef chef1 = new vegchef;
        veg.cook();
        veg.noncook();

        //nonveg chef

        nonvegchef chef2 = new nonvegchef;
        chef2.cook();
        chef2.noncook(); 
        //cooks both

    }
}

advance--------------------------------------------------------------------------------------

see ./accessc#.png for access control in c#

types of constructor are 

1)default

the default constructor doesnt has a parameter

when a class has no constructor ,default constructor is served by the compiler to that class

2)parameterized

the constructor has one or more parameters

3)static

restricted class but cannot be changed 

this constructor is called before the object is created

4)private

restricted class can be changed

there is also public constructor so that they can be accessed by anywhere

5)destructor

this gets scope when object is destroid this is represent by ~ symbol same name as class and there is only one desctroctor

to know more see this https://youtu.be/hxIb99-Z8_I

here u see the out put will be like the veg chef cooks milk but non veg chef cooks nonveg

---------------------------------------sample code for greeting---------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace greeting
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("What is your name?");
            var name = Console.ReadLine();
            Console.WriteLine("Nice to meet you {0} My name is C#, How old are you?",name);
            int.TryParse(Console.ReadLine(), out int age);
            if(age==0)
                Console.WriteLine("That is not a correct input");
            else
                Console.WriteLine("{0} good, As for me I was born on 2002. Which makes me {1} years old.", age,DateTime.Now.Year-2002);
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------date program-----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace date
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the day...");
            var day = Console.ReadLine();

            Console.WriteLine("Enter the month...");
            var month = Console.ReadLine();

            Console.WriteLine("Enter the year...");
            var year = Console.ReadLine();

            DateTime date = new DateTime(int.Parse(year), int.Parse(month), int.Parse(day));
            Console.WriteLine("\n" + date.DayOfWeek);

        }
    }
}

--------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DateTimeLecture
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime myDate = DateTime.Now;
            string formattedDate = string.Format("Date is {0:yyyy MMMM dddd HH mm ss tt}",myDate);
            Console.WriteLine(formattedDate);
        }
    }
}


--------------------------------------------------------------------------------------------------------

-------------------------------------print day----------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace day
{
    class Program
    {
        static void Main(string[] args)
        {
            var day = DateTime.Now.DayOfWeek.ToString();

            switch (day)
            {
                case "Saturday": Console.WriteLine("Yellow");break;
                case "Sunday": Console.WriteLine("Green"); break;
                case "Monday": Console.WriteLine("Blue"); break;
                case "Tuesday": Console.WriteLine("Grey"); break;
                case "Wednesday": Console.WriteLine("Red"); break;
                case "Thursday": Console.WriteLine("Orange"); break;
                case "Friday": Console.WriteLine("White"); break;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------------

Date Class in C#---------------------------------------------------------------------------------

To set dates in C#, use DateTime class. The DateTime value is between 12:00:00 midnight, January 1, 0001 to 11:59:59 P.M., December 31, 9999 A.D.

Let’s create a DateTime object.

Example

using System;
class Test {
   static void Main() {
      DateTime dt = new DateTime(2018, 7, 24);
      Console.WriteLine (dt.ToString());
   }
}

Output
7/24/2018 12:00:00 AM
Let us now get the current date and time.

Example

using System;
class Test {
   static void Main() {
      Console.WriteLine (DateTime.Now.ToString());
   }
}

Output
9/17/2018 5:49:21 AM
Now using the method Add(), we will add days in a date with the DateTime structure.

Example
 
using System;
class Test {
   static void Main() {
      DateTime dt1 = new DateTime(2018, 7, 23, 08, 20, 10);
      Console.WriteLine ("Old Date: "+dt1.ToString());
      DateTime dt2 = dt1.AddDays(7);
      Console.WriteLine ("New Date: "+dt2.ToString());
   }
}

Output
Old Date: 7/23/2018 8:20:10 AM
New Date: 7/30/2018 8:20:10 AM

------------------------------------------------------------------------------------------------------



random month gerenrator Program using if - else

code:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo5
{
    class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();
            int x = rand.Next(1,13);
            string monthName = "";
                        
            if (x == 1)
                monthName = "January - 31 days";
            else if (x == 2 )
                monthName = "February - 28/29 days";
            else if (x == 3)
                monthName = "March - 31 days";
            else if (x == 4)
                monthName = "April - 30 days";
            else if (x == 5)
                monthName = "May - 31 days";
            else if (x == 6)
                monthName = "June - 30 days";
            else if (x == 7)
                monthName = "July - 31 days";
            else if (x == 8)
                monthName = "August - 31 days";
            else if (x == 9)
                monthName = "September - 30 days";
            else if (x == 10)
                monthName = "October - 31 days";
            else if (x == 11)
                monthName = "November - 30 days";
            else 
                monthName = "December - 31 days";

            Console.WriteLine(monthName);
        }
    }
}

----------------------------------------random data is generated in every datatype--------

// Instantiate random number generator using system-supplied value as seed.
var rand = new Random();

// Generate and display 5 random byte (integer) values.
var bytes = new byte[5];
rand.NextBytes(bytes);
Console.WriteLine("Five random byte values:");
foreach (byte byteValue in bytes)
    Console.Write("{0, 5}", byteValue);
Console.WriteLine();

// Generate and display 5 random integers.
Console.WriteLine("Five random integer values:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,15:N0}", rand.Next());
Console.WriteLine();

// Generate and display 5 random integers between 0 and 100.
Console.WriteLine("Five random integers between 0 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(101));
Console.WriteLine();

// Generate and display 5 random integers from 50 to 100.
Console.WriteLine("Five random integers between 50 and 100:");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N0}", rand.Next(50, 101));
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 1.
Console.WriteLine("Five Doubles.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble());
Console.WriteLine();

// Generate and display 5 random floating point values from 0 to 5.
Console.WriteLine("Five Doubles between 0 and 5.");
for (int ctr = 0; ctr <= 4; ctr++)
    Console.Write("{0,8:N3}", rand.NextDouble() * 5);

// The example displays output like the following:
//    Five random byte values:
//      194  185  239   54  116
//    Five random integer values:
//        507,353,531  1,509,532,693  2,125,074,958  1,409,512,757    652,767,128
//    Five random integers between 0 and 100:
//          16      78      94      79      52
//    Five random integers between 50 and 100:
//          56      66      96      60      65
//    Five Doubles.
//       0.943   0.108   0.744   0.563   0.415
//    Five Doubles between 0 and 5.
//       2.934   3.130   0.292   1.432   4.369

================================================================================================

random team generator

Random rnd = new Random();
string[] malePetNames = { "Rufus", "Bear", "Dakota", "Fido",
                          "Vanya", "Samuel", "Koani", "Volodya",
                          "Prince", "Yiska" };
string[] femalePetNames = { "Maggie", "Penny", "Saya", "Princess",
                            "Abby", "Laila", "Sadie", "Olivia",
                            "Starlight", "Talla" };

// Generate random indexes for pet names.
int mIndex = rnd.Next(malePetNames.Length);
int fIndex = rnd.Next(femalePetNames.Length);

// Display the result.
Console.WriteLine("Suggested pet name of the day: ");
Console.WriteLine("   For a male:     {0}", malePetNames[mIndex]);
Console.WriteLine("   For a female:   {0}", femalePetNames[fIndex]);

// The example displays output similar to the following:
//       Suggested pet name of the day:
//          For a male:     Koani
//          For a female:   Maggie

--------------------------------random dice generator-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo6
{
    class Program
    {
        static void Main(string[] args)
        {
            string input = "";
            Random rand = new Random();
            int x = 0;
            do
            {
                Console.WriteLine("Roll dice? (yes, no)");
                input = Console.ReadLine();
                if (input.ToLower() == "yes")
                {
                    x = rand.Next(1, 7);
                    Console.WriteLine("New dice no is " + x);
                }
            }
            while (input.ToLower() != "no");
        }
    }
}

note:indentation is c# is not nessary

------------------------------------triange generator using for --------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssignmentNo4
{
    class Program
    {
        static void Main(string[] args)
        {
            for (int j = 15; j >= 0; j--)
            {
                for (int t = 0; t <= j; t++)
                {
                    Console.Write("0 ");
                }
                Console.WriteLine();
            }
        }
    }
}
--------------------------------------------------------------------------------------------
                                    Parse and TryParse
_______________________________________________________________________________________________________________________________________________________________________________________

Convert a string representation of number to an integer,using the int.TryParse and intParse method in C#.

If the string cannot be converted, then the int.TryParse method returns false i.e. a Boolean value, whereas int.Parse returns an exception.

Let us see an example of int.Parse method −

eg Parse:

using System.IO;
using System;
class Program {
   static void Main() {
      int res;
      string myStr = "120";
      res = int.Parse(myStr);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

eg TryParse:

using System.IO;
using System;
class Program {
   static void Main() {
      bool res;
      int a;
      string myStr = "120";
      res = int.TryParse(myStr, out a);
      Console.WriteLine("String is a numeric representation: "+res);
   }
}

here in str u can also provide a text or word it will return 0 but parse cannot handel it it can only convert

---------------------------------------constants------------------------------------------

the value of pi or gravity doent changes so these types of values are called constants

u should use the keyword const followed by the datatype

eg:

const var asd=1;
const double pi=3.14;

u cannot change it later in run time

-------------------------------------string manuplation-------------------------------------

the string is used to represent words and s
_______________________________________________________________________________________________________________________________________________________________________________________

ls -3 5

last seen - https://www.youtube.com/watch?v=GhQdlIFylQ8&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i 

last seen - youtube.com/watch?v=hxIb99-Z8_I&list=PLnIuGyeSptxhRhnWhPw2kunS6h4MRgo1i&index=4
