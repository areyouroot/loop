download and install docker 

install and enable virtualization and wsl and follow docker installlation documents

both virtual box and hyper v cannot exist in the same machine

for docker the kernels are connected so kernl level infection can spread

docker run #this command runs the program or the continer

docker ps # prinst of all running docker images

docker ps -a # prints all running recently closed containers

docker stop name {or} docker stop [container id] #this will stop the container 

docker rm [id or name] #delets the stoped docker container

docker images #prints all of the avalible images

docker rmi [id or name] # this will remove the image perminetly and see no continer is using the image else it will also be crooupted

docker pull [name of the image] #this will download and keep the image if u dont have image still want to run it just use the run command it will automatically pull and run

# the continer automatically exits and stops when the tast is completed or crashed so dont excpecto run a os instance

docker run [container] #this runs the container in attaced format so the out put is visible not input is taken

docker run -d [container] #this runs the container in dettaced format so the out put is not visible not input is taken

#after running it as detaced u can attach the output by copying the id generated after the detach command like this 

docker attach [id]  #some times few charactes of id is enought to recoganise the process

#To run old version of any software use command 

Docker run [container]:[version]

#u can run the container in interactive mode by this command

Docker run -i [contain]

#this will both get imput and output

#u can run the container in interactive mode by this command and attach terminal 

Docker run -it [contain]

#this will both get imput and output the terminal will show the out put of terminal also else it will look like netcat output

# You can portforward the docker containers ip to ur host machine by this syntax

Docker run -p 80:5000 [container]

#here the 80 is host port and 5000 is dockers port

#remember u cannot port forward 2 application to the same port

#once you have stopped the continer your container data also gets destroyed so if u wana persistent the data or save in host os files then use -v tag to save

Docker run -v /opt/datadir:/var/lib/mysql [container]

#here /opt/datadir is in the host os and /var/lib/mysql is the containers location or file to be saved

#to inspect all details of the docker containers use thsi All data will be reprented in json formatcommand

Docker inspect [container]

#to see the logs of the container use logs command

Docker logs (container)

#u can define and use the system variables using this command ,u can pass the values of these variables so that the input is like argument

#normal sys cmd $export app_color=blue

see pic flaskcode1

#To pack and send the env variable in the docker use this cmd 

Docker run -e APP_COLOR=blue simple-webapp-color

#where -e is used to pass the env variable and app color is the variable

#u can run multiple containers with different value and same image

#u can see the env variable using the inspect argument

#Simple example for docker file for custom Ubuntu instructions

see pic flaskcode2

Docker build [dockerfile] -t [container name and loc]

#here the docker is built from a custom file give as own image

#to push this image to docker use push command

Docker push [container]

#The above pic contains custom code which only docker can understand

Working and architecture see wa1 wa2 wa3

#you can see the resources consumption and the history of a container by

Docker history [container]

#also steps can be seen

#if any steps get failed while building the docker then it will automatically resume from cache once its corrected

#you can append the docker file like this for eg i have ran some bash command after running the ubuntu

    docker run ubuntu sleep 5 

#here the i have appended a sleep command after exicuting it the container just exits

#here is an eg of custom docker image which runs sleep

    FROM Ubuntu
    CMD sleep 5 (or) CMD ["sleep","5"]

#if u are using the json format remember to seperate the command from the argument like CMD ["command","param"] u shouldnt use like CMD ["command param"] eg CMD ["sleep 5"]

ENTRYPOINT INSTRUCTION

this is used to get the arguments as input from cmd eg docker run ubuntu-sleeper 10 

the contents of ubuntu sleeper is 

    FROM Ubuntu
    ENTRYPOINT ["sleep"]

when we bulid and run it like #docker run ubuntu-sleeper 10 
the sleep command will run for 10 sec

the values in CMD will be over written if any argument is specified 

if u want a default value that should be ran if no argument is provided then use cmd

    FROM Ubuntu
    ENTRYPOINT ["sleep"]
    CMD ['5']

if user doesnt specify any argument as value then cmd will be appended here

you can overwrite entrypoint command or add entry point direcly in docker cmd like this

#docker run --entrypoint sleep2.0 ubuntu-sleeper 10

NETWORKS IN DOCKER 

there are 3 types of network in the docker 
    1)bridge(default)
    2)none
    3)host

    tochange into the none network use this cmd 
    #docker run Ubuntu --network=none

    to change in to host network use 
    #docker run Ubuntu --network=host

docker has default private network besides that u can create different networks using this commands

    docker network create --driver bridge --subnet 182.18.0.0/16 custom-isolated-network

u can list all the bridged networks by

    docker network ls

you can see the containers network by inspecting it

all docker container name can be acceced as dns names within the container 
    eg a webserver ip is 1.1.1.1 if we want to connet it the user mysql.connect(1.1.1.1)else use mysql.connect("webserver container name")

VOLUMES

u can store the data of the container to the host in /var/lib/docker by default from this cmd

    docker run -v [volume name]:[container volume name] [container

you can also save it in the custome location by let knowing the docker full path

you can also mount the host files by this cmd

    docker run --mount type=[type],source=[location of the host],target=[loctain of the containers file to be stored] [container]

types are :
    1)bind

you can create a yml file to turn on multiple images at once eg you have to turn on ubuntu mongodb alpine ansible at same time multiple times u can create a yml file called docker-compose.yml

    docker-compose.yml

        web:
            image: "ubuntu"
        database:
            image:"mongodb"
        messaging:
            image:"alpine"
        oechestration:
            image:"ansile"

and to run and enable the docker composre use thsi cmd
file name up
    
    #docker_compose up

you can use costume name fror each container by 

    docker run -d --name=[name to be kept] [container]

you can link the container to eah other by their name and a argument called link

    docker run -d --name vote -p 5000:80 --link redis:redis voting-app

you can create multiple images

docker compose file with yml

    docker-compose-build.yml

        redis:
            image:redis
        db:
            image:postgres:9.4
        vote:
            image:voting-app
            ports: 
                - 5000:80
            links:
                -redis
        result:
            image:result
            ports:
                -5001:80
            links:
                -db

you can also build the compose file with oanther file byu usig key build:./file

you should mention the version of the yml file if its 2 or lateer version for version 2 the docker automatically creates a private network         

you can start certain service after launch of anther service by using "depends_on:[image name]"

you can have have a custom server hosted in private registry by using the registry image 

a remote docker image can be accessed by this command

    docker -H=[remote docker engine address or ip add]:[port] [commands]

you can limit the cpu and ram to the docker containers by 2 arguments

    docker run ubuntu --cpus=[1-0.0 where 1 is 100% and 0.5 is 50%] --memory=[(value)m this will set values in mb]

you can deploy multiple instace of the same image by this command

    docker service create --replicas=[number of instance] nodejs