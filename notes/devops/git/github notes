first download and install the git hub as give in git website

then download and install vscode

create a ssh key so that u can acess the git hub

then clone the ssh 

link your account to the github shell using this commands

     git config --global user.email "<you@example.com>"
     git config --global user.name "<Your Name>"


and start editing

if u have created new files and git is not able to track it or new changes is made then follow this 
//the both commands work only in offline no changes are made in github

    1)git add . //this command add all files and changes to the git and new files are tracked all
    2)git add <new file that is created or need to be tracked> //this will only track that particular file

after adding the changes to the track then use this command to commit
// commands work only in offline no changes are made in github

    1)git commit -m "<changes tittle this is important>" -m "<changes descrption >"
    // u can add and comit at same time just by commit command

after commit you need to push it to the github so that it is saved online
//this command needs internet and the changes is directly to the git main

    !)git push origin main or master
    2)git push origin <sub branch you want>

if u dont have a repo created then do this first create the repo and add files then 

    !)git init //to make the current dir into git dir
    2)git add .
    3)git commit -m "<any thing>" -m "<any thing>"
    4)git remote add origin <the ssh git link> //this will only work if u create a repo in github
    5)git push -origin main or master

to get the status of the changes and the new files created or deleted use this 

    1)git status

to check which repo u are connected to use

    1)git remote -v

you can define the directory once wher to push by this

    1)git push -u origin <ur branch name>
    //next time use u no need to mention the full command just use
    2)git push

to look the current working branch use or see the branches available
    
    1)git branch

to create a new branch use

    1)git checkout -b <branch name>

to switch between the branches use 

    1)git checkout <branch name>

to checkout the difference between the main and  the branch use 

    1)git diff <branch name>

merging two branches in github

    1)git push -u origin <branch name>//first push and commit the changes
    2)git checkout <breanch where we need to add the code>
    3)git merge <the branch which has the change>

how to undo the commit

    1)git reset <file name> //works on the add command
    2)git reset //works on the add command for all files
    3)git reset HEAD~1 //works after commiting it does goes one step back
    
    //to go back to a specific commit or undo multiple commit
    
    4)git log //to see all the logs of the git commit and copy the hash to go back to a particular point
    5)git reset <hash of the commit u need> //u will go back to that commit but not all changes will be removed

    //to undo mutiple commits and delete it

    6)git reset --hard <hash>

forking is done in web // this is a process of cloning the code from different repo

git config –global user.name “[name]” ->sets author name
git config –global user.email “[email address]” ->sets author email id
git init [repository name] ->start new repository
git clone [url] ->obtain a repository from an existing URL.
git add [file] ->adds a file to the staging area.
git commit -m “[ Type in the commit message]” ->records or snapshots the file permanently in the version history.
git commit -a ->commits any files you’ve changed since then.&commits any files you’ve added
git diff ->shows the file differences which are not yet staged.
git diff –staged ->differences between the files in the staging area and the latest version present.
git diff [first branch] [second branch] ->differences between the two branches mentioned.
git reset [file] ->unstages the file, but it preserves the file contents.
git reset [commit] ->undoes all the commits after the specified commit and preserves the changes locally.
git reset –hard [commit] ->discards all history and goes back to the specified commit.
git status ->command lists all the files that have to be committed.
9 ) git rm [file] ->deletes the file from your working directory and stages the deletion.

git log ->used to list the version history for the current branch.
git log –follow[file] ->lists version history for a file, including the renaming of files also.
git show [commit] ->shows the metadata and content changes of the specified commit.
git tag [commitID] ->used to give tags to the specified commit.
git branch ->lists all the local branches in the current repository.
git branch [branch name] -> creates a new branch.
git branch -d [branch name] -> deletes the feature branch.
git checkout [branch name] -> used to switch from one branch to another
git checkout -b [branch name] ->creates a new branch and also switches to it.
git merge [branch name] ->merges the specified branch’s history into the current branch.
git remote add [variable name] [Remote Server Link] ->used to connect your local repository to the remote server.
git push [variable name] master ->sends the committed changes of master branch to your remote repository.
git push [variable name] [branch] ->sends the branch commits to your remote repository.
git push –all [variable name] ->pushes all branches to your remote repository.
git push [variable name] :[branch name] ->deletes a branch on your remote repository.
git pull [Repository Link] ->fetches and merges changes on the remote server to your working directory.
git stash save ->stores all the modified tracked files.
git stash pop ->restores the most recently stashed files.
git stash list ->lists all stashed changesets.
git stash drop ->discards the most recently stashed changeset.

you can see other commands in https://gist.github.com/gwenf/19e5748a5391929e8e938a22c8a4b3f2














